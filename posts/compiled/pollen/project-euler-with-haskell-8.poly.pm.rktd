#hash((doc . (body (h2 "Problem 8") (p "This problem actually wasn’t as bad as I originally thought it would be.") (div ((class "filebox")) (div ((class "filename") (decode "exclude")) "ProjectEuler8.hs") (div ((class "highlight")) (table ((class "sourcetable")) (tbody (tr (td ((class "linenos")) (div ((class "linenodiv")) (pre " 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21"))) (td ((class "code")) (div ((class "source")) (pre (span) (span ((class "nf")) "main") " " (span ((class "ow")) "::") " " (span ((class "kt")) "IO") " " (span ((class "nb")) "()") "\n" (span ((class "nf")) "main") " " (span ((class "ow")) "=") " " (span ((class "kr")) "do") "\n    " (span ((class "n")) "putStrLn") " " (span ((class "s")) "\"" "ProjectEuler.net" "\"") "\n    " (span ((class "n")) "putStrLn") " " (span ((class "s")) "\"" "Problem8 - Largest product in a series" "\"") "\n    " (span ((class "n")) "print") " " (span ((class "n")) "problem8") "\n\n" (span ((class "c1")) "--Largest product in a series") "\n" (span ((class "nf")) "problem8") " " (span ((class "ow")) "=") " " (span ((class "n")) "maximum") " " (span ((class "n")) "listOfProducts") "\n\n" (span ((class "nf")) "stringToList") " " (span ((class "ow")) "::") " " (span ((class "kt")) "String") " " (span ((class "ow")) "-" ">") " " (span ((class "p")) "[") (span ((class "kt")) "String") (span ((class "p")) "]") "\n" (span ((class "nf")) "stringToList") " " (span ((class "n")) "n") " " (span ((class "ow")) "=") " " (span ((class "n")) "map") " " (span ((class "p")) "(") (span ((class "nf")) "\\") (span ((class "n")) "x") " " (span ((class "ow")) "-" ">") " " (span ((class "p")) "[") (span ((class "n")) "x") (span ((class "p")) "]") " " (span ((class "ow")) "::") " " (span ((class "p")) "[") (span ((class "kt")) "Char") (span ((class "p")) "])") " " (span ((class "n")) "n") "\n\n" (span ((class "nf")) "listOfProducts") " " (span ((class "ow")) "=") " " (span ((class "n")) "map") " " (span ((class "n")) "product") " " (span ((class "n")) "groupedInts") "\n\n" (span ((class "nf")) "groupedInts") " " (span ((class "ow")) "=") " " (span ((class "n")) "map") " " (span ((class "p")) "(") (span ((class "nf")) "\\") (span ((class "n")) "x") " " (span ((class "ow")) "-" ">") " " (span ((class "p")) "(") (span ((class "n")) "take") " " (span ((class "mi")) "13") " " (span ((class "p")) "(") (span ((class "n")) "drop") " " (span ((class "n")) "x") " " (span ((class "n")) "listOfInts") (span ((class "p")) ")))") " " (span ((class "p")) "[") (span ((class "mi")) "0") (span ((class "p")) ",") (span ((class "mi")) "1") (span ((class "o")) "..") (span ((class "p")) "(") (span ((class "mi")) "1000") (span ((class "o")) "-") (span ((class "mi")) "13") (span ((class "p")) ")]") "\n\n" (span ((class "nf")) "listOfInts") " " (span ((class "ow")) "=") " " (span ((class "n")) "map") " " (span ((class "p")) "(") (span ((class "n")) "read") (span ((class "ow")) "::") (span ((class "kt")) "String") (span ((class "ow")) "-" ">") (span ((class "kt")) "Int") (span ((class "p")) ")") " " (span ((class "n")) "listOfStrings") "\n\n" (span ((class "nf")) "listOfStrings") " " (span ((class "ow")) "=") " " (span ((class "p")) "(") (span ((class "n")) "stringToList") " " (span ((class "n")) "largeString") (span ((class "p")) ")") "\n\n" (span ((class "nf")) "largeString") " " (span ((class "ow")) "=") " " (span ((class "s")) "\"" "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450" "\"") "\n")) "\n")))))) (p "I’m sure that there are better ways to go about solving this problem. I know that the " (code "String") " data type is stored as a list of " (code "Char") " type, so I should have been able to convert immediately from " (code "String") " to " (code "[Int]") " with a " (code "map") " function. Unfortunately I wasn’t able to get this conversion to work so I had to take extra steps to convert the " (code "String") " to " (code "[String]") ".") (p "Once I had a list of " (code "Int") " it was rather straight forward to create groups of 13 integers and map " (code "product") " over them."))) (metas . #hasheq((here-path . "/media/henry/Steam/Github/hebr3.github.io/posts/project-euler-with-haskell-8.poly.pm") (published . "2015-10-24") (title . "Project Euler problem 8 with Haskell") (topics . "Project Euler,Haskell"))))