#hash((doc . (body (p "This was a rather long assignment to type up however, the instructions made the requirements rather clear. I wasnâ€™t required to do any outside the box thinking here, just put the peices together correctly.") (div ((class "filebox")) (div ((class "filename") (decode "exclude")) "Lab5.asm") (div ((class "highlight")) (table ((class "sourcetable")) (tbody (tr (td ((class "linenos")) (div ((class "linenodiv")) (pre "  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198"))) (td ((class "code")) (div ((class "source")) (pre (span) (span ((class "c")) "#Henry Brooks") "\n" (span ((class "c")) "#CS231 Assignment1") "\n" (span ((class "na")) ".data") "\n" (span ((class "nl")) "array:") "\t\t" (span ((class "na")) ".word") "\t" (span ((class "mi")) "1") (span ((class "p")) ",") (span ((class "mi")) "2") (span ((class "p")) ",") (span ((class "mi")) "3") (span ((class "p")) ",") (span ((class "mi")) "4") (span ((class "p")) ",") (span ((class "mi")) "5") (span ((class "p")) ",") (span ((class "mi")) "6") (span ((class "p")) ",") (span ((class "mi")) "7") (span ((class "p")) ",") (span ((class "mi")) "8") (span ((class "p")) ",") (span ((class "mi")) "9") (span ((class "p")) ",") (span ((class "mi")) "10") (span ((class "p")) ",") (span ((class "mi")) "11") (span ((class "p")) ",") (span ((class "mi")) "12") (span ((class "p")) ",") (span ((class "mi")) "13") (span ((class "p")) ",") (span ((class "mi")) "14") (span ((class "p")) ",") (span ((class "mi")) "15") (span ((class "p")) ",") (span ((class "mi")) "16") (span ((class "p")) ",") (span ((class "mi")) "17") (span ((class "p")) ",") (span ((class "mi")) "18") (span ((class "p")) ",") (span ((class "mi")) "19") (span ((class "p")) ",") (span ((class "mi")) "20") "\n" (span ((class "nl")) "str0:") "\t\t" (span ((class "na")) ".asciiz") "\t" (span ((class "s")) "\"" "Please enter the array length: " "\"") "\n" (span ((class "nl")) "goodMsg:") "\t" (span ((class "na")) ".asciiz") "\t" (span ((class "s")) "\"" " is a good value in checkNumPositive\\n" "\"") "\n" (span ((class "nl")) "badMsg:") "\t\t" (span ((class "na")) ".asciiz") " " (span ((class "s")) "\"" " is a bad value in checkNumPositive\\n" "\"") "\n" (span ((class "nl")) "errorMsg:") "\t" (span ((class "na")) ".asciiz") "\t" (span ((class "s")) "\"" "Invalid array length\\n" "\"") "\n" (span ((class "nl")) "invalidMsg:") "\t" (span ((class "na")) ".asciiz") "\t" (span ((class "s")) "\"" "Invalid array value\\n" "\"") "\n" (span ((class "nl")) "space:") "\t\t" (span ((class "na")) ".asciiz") " " (span ((class "s")) "\"" " " "\"") "\n" (span ((class "nl")) "newline:") "\t" (span ((class "na")) ".asciiz") " " (span ((class "s")) "\"" "\\n" "\"") "\n\n" (span ((class "na")) ".text") "\n" (span ((class "nl")) "begin:") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "str0") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "syscall") "\n\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "readNum") "\t\t" (span ((class "c")) "# input passed back in $v1") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$s0") (span ((class "p")) ",") " " (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# $s0 = arraySize") "\n\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arraySize in $a0 to veriftySize") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "verifySize") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# get 1 or 0 back from verifySize") "\n\n        " (span ((class "nf")) "beq") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "begin") "\n\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arraySize to createArray in $a0") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "createArray") "\n\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arraySize to printArray in $a0") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "printArray") "\n\n\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arraySize to reverseArray in $a0") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "reverseArray") "\n\n\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arraySize to printArray in $a0") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "printArray") "\n\n" (span ((class "nl")) "exit:") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "10") "\n        " (span ((class "nf")) "syscall") "\n\n" (span ((class "c")) "#----------- int readNum(), returns and int") "\n" (span ((class "nl")) "readNum:") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "5") "\n        " (span ((class "nf")) "syscall") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass input back in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "c")) "#----------- int verifySize(int arraySize), returns 0 or 1") "\n" (span ((class "nl")) "verifySize:") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save passed arg (arraySize) to $t0") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "mi")) "20") "\n        " (span ((class "nf")) "bgt") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "no")) "verifySizeBad") "\n        " (span ((class "nf")) "ble") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "verifySizeBad") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "mi")) "1") "\t\t\t" (span ((class "c")) "# pass 1 back to main in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "nl")) "verifySizeBad:") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "errorMsg") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "syscall") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "mi")) "0") "\t\t\t" (span ((class "c")) "# pass 0 back to main in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "c")) "#----------- void createArray(int arraySize), returns nothing") "\n" (span ((class "nl")) "createArray:") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$s1") (span ((class "p")) ",") " " (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save passed arg (arraySize) to $s1") "\n        " (span ((class "nf")) "sw") "\t" (span ((class "no")) "$ra") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$sp") (span ((class "p")) ")") "\t\t" (span ((class "c")) "# save current $ra to stack") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$s2") (span ((class "p")) ",") " " (span ((class "mi")) "0") "\t\t\t" (span ((class "c")) "# counter") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$s3") (span ((class "p")) ",") " " (span ((class "no")) "array") "\t\t" (span ((class "c")) "# create pointer to array[0]") "\n\n" (span ((class "nl")) "createArrayLoop:") "\t\t" (span ((class "c")) "# arraySize " "<" " counter") "\n        " (span ((class "nf")) "beq") "\t" (span ((class "no")) "$s1") (span ((class "p")) ",") " " (span ((class "no")) "$s2") (span ((class "p")) ",") " " (span ((class "no")) "createArrayDone") "\n\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "readNum") "\t\t\t" (span ((class "c")) "# int readNum(), returns int in $v1") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$s4") (span ((class "p")) ",") " " (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save arrayEntry to $s4") "\n\n" (span ((class "c")) "#------- int checkNumPositive(arrayEntry), returns 0 or 1") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s4") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arrayEntry to checkNumPositive") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "checkNumPositive") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save return value to $t4, either 0 or 1") "\n\n        " (span ((class "nf")) "beq") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "createArrayBad") "\n\n" (span ((class "c")) "#------- int divisibleBy3(arrayEntry), returns 0 or 1") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$s4") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# pass arrayEntry to divisibleBy3") "\n        " (span ((class "nf")) "jal") "\t" (span ((class "no")) "divisibleBy3") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save return value to $t4, either 0 or 1") "\n\n        " (span ((class "nf")) "beq") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "createArrayBad") "\n\n" (span ((class "c")) "#------- if both tests pass then save to the array and increment the counters") "\n        " (span ((class "nf")) "sw") "\t" (span ((class "no")) "$s4") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$s3") (span ((class "p")) ")") "\n\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$s3") (span ((class "p")) ",") " " (span ((class "no")) "$s3") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\t" (span ((class "c")) "# pointer++") "\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$s2") (span ((class "p")) ",") " " (span ((class "no")) "$s2") (span ((class "p")) ",") " " (span ((class "mi")) "1") "\t" (span ((class "c")) "# counter--") "\n        " (span ((class "nf")) "j") "\t" (span ((class "no")) "createArrayLoop") "\n\n" (span ((class "nl")) "createArrayDone:") "\n        " (span ((class "nf")) "lw") "\t" (span ((class "no")) "$ra") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$sp") (span ((class "p")) ")") "\t" (span ((class "c")) "# load old $ra from stack") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "nl")) "createArrayBad:") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "invalidMsg") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "syscall") "\n\n        " (span ((class "nf")) "j") "\t" (span ((class "no")) "createArrayLoop") "\n\n" (span ((class "c")) "#----------- void reverseArray(int arraySize), returns nothing") "\n" (span ((class "nl")) "reverseArray:") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save passed arg (arraySize) to $t0") "\n\n        " (span ((class "nf")) "li") "\t\t" (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\t\t" (span ((class "c")) "# set $t1 = 4") "\n        " (span ((class "nf")) "mult") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$t1") "\t" (span ((class "c")) "# length * 4") "\n        " (span ((class "nf")) "mflo") "\t" (span ((class "no")) "$t1") "\t\t\t" (span ((class "c")) "# set $t1 = length * 4") "\n\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$t2") (span ((class "p")) ",") " " (span ((class "no")) "array") "\t" (span ((class "c")) "# set pointer to start of the array") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "array") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "$t1") "\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "p")) "-") (span ((class "mi")) "4") "\t" (span ((class "c")) "# set pointer to end of the array") "\n\n" (span ((class "nl")) "reverseArraySwap:") "\n        " (span ((class "nf")) "bgt") "\t" (span ((class "no")) "$t2") (span ((class "p")) ",") " " (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "reverseArrayDone") "\n        " (span ((class "nf")) "lw") "\t" (span ((class "no")) "$t4") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$t2") (span ((class "p")) ")") "\n        " (span ((class "nf")) "lw") "\t" (span ((class "no")) "$t5") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$t3") (span ((class "p")) ")") "\n        " (span ((class "nf")) "sw") "\t" (span ((class "no")) "$t5") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$t2") (span ((class "p")) ")") "\n        " (span ((class "nf")) "sw") "\t" (span ((class "no")) "$t4") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$t3") (span ((class "p")) ")") "\n\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$t2") (span ((class "p")) ",") " " (span ((class "no")) "$t2") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "p")) "-") (span ((class "mi")) "4") "\n        " (span ((class "nf")) "j") "\t" (span ((class "no")) "reverseArraySwap") "\n\n" (span ((class "nl")) "reverseArrayDone:") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "c")) "#----------- void printArray(int arraySize), returns nothing") "\n" (span ((class "nl")) "printArray:") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save passed arg (arraySize) to $t0") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "no")) "array") "\n\n" (span ((class "nl")) "printArrayLoop:") "\n        " (span ((class "nf")) "beq") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "printArrayDone") "\n        " (span ((class "nf")) "lw") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "mi")) "0") (span ((class "p")) "(") (span ((class "no")) "$t1") (span ((class "p")) ")") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "1") "\n        " (span ((class "nf")) "syscall") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "space") "\n        " (span ((class "nf")) "syscall") "\n\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "addi") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "p")) "-") (span ((class "mi")) "1") "\n        " (span ((class "nf")) "j") "\t" (span ((class "no")) "printArrayLoop") "\n\n" (span ((class "nl")) "printArrayDone:") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v0") (span ((class "p")) ",") " " (span ((class "mi")) "4") "\n        " (span ((class "nf")) "la") "\t" (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "newline") "\n        " (span ((class "nf")) "syscall") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "c")) "#----------- int divisibleBy3(int arrayEntry) , returns 0 or 1") "\n" (span ((class "nl")) "divisibleBy3:") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save passed arg (arrayEntry) to $t0") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$t1") (span ((class "p")) ",") " " (span ((class "mi")) "3") "\n        " (span ((class "nf")) "div") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$t1") "\n        " (span ((class "nf")) "mfhi") "\t" (span ((class "no")) "$t3") "\n\n        " (span ((class "nf")) "bne") "\t" (span ((class "no")) "$t3") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "divisibleBy3Bad") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "mi")) "1") "\t\t\t" (span ((class "c")) "# pass 1 back to main in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "nl")) "divisibleBy3Bad:") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "mi")) "0") "\t\t\t" (span ((class "c")) "# pass 0 back to main in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "c")) "#----------- int checkNumPositive(int arrayEntry) , return 0 or 1") "\n" (span ((class "nl")) "checkNumPositive:") "\n        " (span ((class "nf")) "add") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$a0") (span ((class "p")) ",") " " (span ((class "no")) "$0") "\t" (span ((class "c")) "# save passed arg (arrayEntry) to $t0") "\n\n        " (span ((class "nf")) "blt") "\t" (span ((class "no")) "$t0") (span ((class "p")) ",") " " (span ((class "no")) "$0") (span ((class "p")) ",") " " (span ((class "no")) "checkNumPositiveBad") "\n\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "mi")) "1") "\t\t\t" (span ((class "c")) "# pass 1 back to main in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n\n" (span ((class "nl")) "checkNumPositiveBad:") "\n        " (span ((class "nf")) "li") "\t" (span ((class "no")) "$v1") (span ((class "p")) ",") " " (span ((class "mi")) "0") "\t\t\t" (span ((class "c")) "# pass 0 back to main in $v1") "\n        " (span ((class "nf")) "jr") "\t" (span ((class "no")) "$ra") "\n")) "\n")))))))) (metas . #hasheq((here-path . "C:\\GitHub\\hebr3.github.io\\posts\\cs231-assignment1.poly.pm") (published . "2017-03-02") (title . "CS231-Assignment1") (topics . "CS231,Assembly"))))