#hash((doc . (body (p "Euler discovered the remarkable quadratic formula:") (p (mathjax "$n^2 + n + 41$")) (p "It turns out that the formula will produce " (mathjax "$40$") " primes for the consecutive values " (mathjax "$n = 0$") " to " (mathjax "$39$") ". However, when " (mathjax "$n = 40$") ", " (mathjax "$40^2 + 40 + 41 = 40(40 + 1) + 41$") " is divisible by " (mathjax "$41$") ", and certainly when " (mathjax "$n = 41, 41^2 + 41 + 41$") " is clearly divisible by " (mathjax "$41$") ".") (p "The incredible formula " (mathjax "$n^2 − 79n + 1601$") " was discovered, which produces " (mathjax "$80$") " primes for the consecutive values " (mathjax "$n = 0$") " to " (mathjax "$79$") ". The product of the coefficients, " (mathjax "$−79$") " and " (mathjax "$1,601$") ", is " (mathjax "$−126,479$") ".") (p "Considering quadratics of the form:") (p (mathjax "$n^2 + an + b$") ", where " (mathjax "$|a| < 1,000$") " and " (mathjax "$|b| < 1,000$") " where " (mathjax "$|n|$") " is the modulus/absolute value of " (mathjax "$n$") " e.g. " (mathjax "$|11| = 11$") " and " (mathjax "$|−4| = 4$")) (p "Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.") (p (a ((href "https://projecteuler.net/problem=27")) "Project Euler")) (p "Initially I planned to tackle this problem from a strictly brute force perspective. I have found that working on a simple solution to a problem usually gives me insights to more elegant solutions.") (p "Therefore I figured that the most straight forward and inelegant method was to produce a 1999 by 1999 array with individual elements of the array corresponding to the maximum number of consecutive primes generated by that combination of a and b.") (p "Thus the initial element of the array in position |1,1| would be the maximum number of consecutive primes generated by n2 + (-999)n + (-999), and the final position of |1999,1999| would be n2 + (999)n + (999).") (p "With this plan in mind I tried to think up a quick way to calculate the maximum number of consecutive primes for a given " (bold "a") " and " (bold "b") ".") (p "I started by having Mathematica generate the first 101 values from the example given in the problem by using a=1 and b=41.") (figure (img ((src "/posts/img/ProjectEuler27a.png") (alt ""))) (figcaption)) (p "I then used " (bold "PrimeQ") " to test whether each value was prime.") (figure (img ((src "/posts/img/ProjectEuler27b.png") (alt ""))) (figcaption)) (p "Then used " (bold "Boole") " to convert these true false values to 0’s and 1’s.") (figure (img ((src "/posts/img/ProjectEuler27c.png") (alt ""))) (figcaption)) (p "And finally " (bold "FirstPosition") " to find the first false in the list.") (figure (img ((src "/posts/img/ProjectEuler27d.png") (alt ""))) (figcaption)) (p "Note that the answer of 41 corresponds to the 39 primes listed in the example since this method doesn’t count the primes from 0-39 but from 1-40 and it found a non-Prime number in position 41.") (p "So...") (p "This method is horribly inelegant, however it does work so it’s time to see if I can use this method to generate the " (mathjax "$1,999$") " by " (mathjax "$1999$") " array I initially planned for.") (p "I begin by trying my method on a smaller array and seeing if it would work at all.") (figure (img ((src "/posts/img/ProjectEuler27e.png") (alt ""))) (figcaption)) (p "Note that this entry should be much larger as it displays a " (mathjax "$51×51$") " array of values.") (p "To find the maximum element of this array I then use the " (bold "Position") " and " (bold "Max") " commands. " (bold "Position") " gives the location in an array of a specified value, and " (bold "Max") " gives the largest element of the array.") (figure (img ((src "/posts/img/ProjectEuler27f.png") (alt ""))) (figcaption)) (figure (img ((src "/posts/img/ProjectEuler27g.png") (alt ""))) (figcaption)) (p "Since we are counting up from 0 we have now found that the Maximum number of consecutive primes is generated with " (bold "a") "=1 and " (bold "b") "=41 which matches the example.") (p "One area of concern going forward is that it takes " (mathjax "$0.655,204$") " secs for Mathematica to create the " (mathjax "$51×51$") " array I used above. Since a " (mathjax "$1,999×1,999$") " array is almost " (mathjax "$1,600%$") " larger than a " (mathjax "$50×50$") " array, that means that generating a " (mathjax "$1999×1999$") " array should take at least " (mathjax "$17$") " minutes and " (mathjax "$28.33$") " second. Most likely longer considering that the edges of the array will be dealing with " (bold "a") " and " (bold "b") " values greater than " (mathjax "$900$") ".") (p "Still I have free time and I’m not paying for processing time so we might as well go forward and see how long it takes.") (figure (img ((src "/posts/img/ProjectEuler27h.png") (alt ""))) (figcaption)) (p "So " (mathjax "$21$") " minutes and " (mathjax "$14$") " seconds later we have our array and can try to find the Maximum number of consecutive primes.") (figure (img ((src "/posts/img/ProjectEuler27i.png") (alt ""))) (figcaption)) (p "And we have a max at " (mathjax "$|939,1971|$") ", so " (mathjax "$939-1000=-61$") " and " (mathjax "$1971-1000=971$") " are are " (bold "a") " and " (bold "b") " values.") (p (mathjax "$a*b=-61*971=-59231$")) (p "And we thus have our answer for Problem 27.") (p "Now we can focus on improving this process.") (p "We could start by recognizing that " (bold "b") " has to be a prime number. It was only after I had finished this problem that I realized that since n starts at 0 the first element will always be 0*0 + a*0 + b. Since there are 168 primes less than 1000 that means I only needed 168 rows instead of 1999.") (p "A " (mathjax "$1999×168$") " array is " (mathjax "$8.4%$") " the size of a " (mathjax "$1999×1999$") " array and only took Mathematica " (mathjax "$1$") " minute and " (mathjax "$56$") " seconds to calculate.") (figure (img ((src "/posts/img/ProjectEuler27j.png") (alt ""))) (figcaption)) (p "A larger time sink is that I am actually calculating out the first " (mathjax "$100 n$") " values for every combination of " (bold "a") " and" (bold "b") "tested. Thus even if the second value calculated is non-Prime I still waste time evaluating the next 98 values.") (p "Using the following code I can just check if the " (mathjax "$n$") " values are prime and stop when a non-Prime is found.") (figure (img ((src "/posts/img/ProjectEuler27k.png") (alt ""))) (figcaption)) (p "To better understand how much time this saves, I calculated a " (mathjax "$50×50$") " array using the old method and the new method and had Mathematica generate an " (bold "ArrayPlot") " to save space.") (figure (img ((src "/posts/img/ProjectEuler27l.png") (alt ""))) (figcaption)) (p "The second method took " (mathjax "$6.1%$") " of the time taken by the first method.") (p "Using both methods together the entire process of generating the " (mathjax "$1999×168$") " array takes " (mathjax "$10$") " seconds.") (figure (img ((src "/posts/img/ProjectEuler27m.png") (alt ""))) (figcaption)) (p "I haven’t looked into it, but I suspect that I could similarly shave a couple of seconds off of the total running time by finding some trick for picking a values.") (p "Conclusion") (p "I started by creating a rather inelegant method for finding the number of consecutive primes generated on a " (mathjax "$1999×1999$") " matrix. This method took " (mathjax "$21$") " minutes and " (mathjax "$14$") " seconds.") (p "I next examined the problem more closely and found areas that could be refined so that I found that same solution in " (mathjax "$10$") " seconds.") (p "I’m confident that the majority of the improvement in performance came from optimizing the operation that found the number of consecutive primes.") (figure (img ((src "/posts/img/ProjectEuler27n.png") (alt ""))) (figcaption)) (p "Using the above code I found that " (mathjax "$280,607$") " times the second number tested was non-Prime. Since there are only " (mathjax "$336,000$") " entries in the array that means that " (mathjax "$83.5%$") " of the time while generating the original array I could have stopped after calculating the second value.") (p "This was a longer write up than I originally expected, but it was a rather involved problem that benefited greatly from optimization."))) (metas . #hasheq((here-path . "C:\\GitHub\\hebr3.github.io\\posts\\20-project-project-euler-27.poly.pm") (published . "2015-04-11") (title . "20% Project - ProjectEuler #27") (topics . "Teaching Credential,20% Project,Project Euler"))))