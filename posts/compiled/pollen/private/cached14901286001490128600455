#hash((doc . (body (h2 "Problem 5") (p "I have solved similar questions during math test so I went with a purely brute force solution to this problem as I wanted to test how long it would take to complete.") (div ((class "filebox")) (div ((class "filename") (decode "exclude")) "ProjectEuler5.hs") (div ((class "highlight")) (pre (code "main :: IO ()\nmain = do\n    putStrLn \"ProjectEuler.net\"\n\n    putStrLn \"\\nProblem5 - Smallest multiple of the numbers 1-20\"\n    print problem5\n\n--Smallest multiple of the numbers 1-20\nproblem5 = head [x | x <- [1..], mod x 5 == 0, mod x 7 == 0, mod x 9 == 0, mod x 11 == 0, mod x 13 == 0, mod x 16 == 0, mod x 17 == 0,mod x 19 == 0]")))) (p "I was a little suprised that the program didn’t crash considering how large a number it had to count up to. I’m not sure if this says more about the Haskell langauge or modern computers. I do know that Haskell supports Integers that can be as large as the memory space of the computer allows, so I feel like this might be a win for Haskell.") (p "Solving this without programming is mostly an exercise in taking the prime factorization of the numbers from 1 to 20 and " (a ((href "http://www.wolframalpha.com/input/?i=232792560")) "combining them") ".") (h2 "Problem 6") (p "Rather straight foward solution to this problem. I am still suprised by how clean the code looks in haskell compared to " (code "c++") ". There is much less " (a ((href "https://en.wikipedia.org/wiki/Boilerplate_code")) "boilerplate") " code required to get a solution printed on screen.") (div ((class "filebox")) (div ((class "filename") (decode "exclude")) "ProjectEuler6.hs") (div ((class "highlight")) (pre (code "main :: IO ()\nmain = do\n    putStrLn \"ProjectEuler.net\"\n    putStrLn \"\\nProblem6 - Sum sqaure difference for the first 100 natural numbers\"\n    print problem6\n\n--Sum square difference\nproblem6 = sqSum - sumSq\n\nsq x = x * x\n\nsqSum = sq (sum [1..100])\nsumSq = sum (map sq [1..100])")))) (h2 "Problem 7") (p "Another really clean solution using infinite lists.") (div ((class "filebox")) (div ((class "filename") (decode "exclude")) "ProjectEuler7.hs") (div ((class "highlight")) (pre (code "main :: IO ()\nmain = do\n    putStrLn \"ProjectEuler.net\"\n    putStrLn \"\\nProblem7 - 10,001th Prime\"\n    print problem7\n\n--10001th Prime\nproblem7 = primes!!10000 -- index starts at 0\n\nprimes = 2 : primes'\n    where isPrime (p:ps) n = p*p > n || n `rem` p /= 0 && isPrime ps n\n          primes' = 3 : filter (isPrime primes') [5,7..]")))) (p (a ((href "https://projecteuler.net/problem=8")) "Problem 8") " from Project Euler is looking like a much more involved problem however, I’m hopeful that I will be able to get it finished this week."))) (metas . #hasheq((here-path . "C:\\GitHub\\hebr3.github.io\\posts\\project-euler-with-haskell-5-6-7.poly.pm") (published . "2015-10-17") (title . "Project Euler problems 5, 6 and 7, with Haskell") (topics . "Project Euler,Haskell"))))