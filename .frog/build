((3) 0 () 4 ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-08-17-codefights-teamFinder-Python.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-09-case-study-with-big-data-comes-big-responsibility.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-04-01-racket-memorized-function.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-30-codefights-memorized-function.md" . unix)) () (h ! (equal) ((? . 0) f post (u . "CodeFights - teamFinder") (? . 0) 1505086803 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/08/codefights-teamfinder.html" . unix) (u . "/2017/08/codefights-teamfinder.html") (u . "2017-08-17T00:00:00") (? . 2) (? . 1) (c (u . "CodeFights") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Python") c (u . "Author: Henry Brooks")) (u . "\n<p>I have been working through problems from <a href=\"https://codefights.com\">codefights</a> and I found another problem that required <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to complete so I thought I would write up my process solving this problem.</p>") #t (u . "\n<p>I have been working through problems from <a href=\"https://codefights.com\">codefights</a> and I found another problem that required <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to complete so I thought I would write up my process solving this problem.</p>\n<!-- more-->\n\n<p><a href=\"https://codefights.com/challenge/af2y4DBXqibqmHyAN\">Description</a> You just heard about a new Pokemon tournament. In order to compete in the tournament, you must follow these rules:</p>\n\n<ul>\n <li>You must use <code>2</code> Pokemon;</li>\n <li>Their combined attack power must be equal to <code>maxPower</code>.</li></ul>\n\n<p>You and your friends would like to compete, but there is limited time to enter! You need to pick the first <code>2</code> Pokemon in your list whose combined attack power is equal to maxPower and return their indices (<code>0</code>-based). If there are no such pairs, return an empty array.</p>\n\n<p>Some of your friends are true Pokemon masters, and have hundreds of thousands of Pokemon. Make sure to help them find their Pokemon fast too!</p>\n\n<p>Example For <code>pokemonList = [4, 3, 2, 3, 4]</code> and <code>maxPower = 6</code>, the output should be <code>teamFinder(pokemonList, maxPower) = [0, 2]</code>. The pairs that add up to <code>maxPower</code> are: <code>(4, 2), (3, 3), (2, 4)</code>. The pair that gets completed first is <code>(4, 2)</code> whose indices are <code>[0, 2]</code>.</p>\n\n<h3 id=\"version-1\">Version 1</h3>\n\n<p>I initially worked through the problem with racket to get an idea of how it should work and to check the test cases. Initially I wrote the program to recursively check all pairs starting with the first.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">headIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"mi\">2</span> <span class=\"n\">headIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">nextIndex</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [1, 5]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Unfortunately this ended up failing on test 3 and after reading the comments I found that the test actually checks based on the second element of the pair. Specifically, before you check a new pokemon in the list you must have checked all pairs of pokemon made with pokemon before it in the list.</p>\n\n<h3 id=\"version-2\">Version 2</h3>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">nextIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]))</span>\n <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [3, 4]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>It took me a couple minutes to rewrite the program to use <code>nextIndex</code> as the pivot but that was mostly due to some trial and error problems.</p>\n\n<h3 id=\"version-3\">Version 3</h3>\n\n<p>Currently my solution is running in <strong>O(n^2)</strong> however, looking over the comments I know that the solution needs to be close to <strong>O(n)</strong>.</p>\n\n<p>We can achieve this speed up by memorizing the values as we work through the <code>pokemonList</code>. Since we are basing our search off of the second value in the pair we only need to keep a list of the differences between the previous values and the <code>maxPower</code> value.</p>\n\n<p>If we were checking <code>(teamFinder '(10 5 2 3 7 5) 10)</code> we wouldn&rsquo;t want to check <code>maxPower = first + second</code> for every pair on each pass. Instead we want to build a list of <code>maxPower - first</code> and check if the <code>second</code> value is in the list.</p>\n\n<pre><code>(teamFinder '(10 5 2 3 7 5) 10)\ndifList = '(0),       value = 5\ndifList = '(0 5),     value = 2\ndifList = '(0 5 8),   value = 3\ndifList = '(0 5 8 7), value = 7</code></pre>\n\n<p>This leads us to the following code</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">ht</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._make-hash))\" style=\"color: inherit\">make-hash</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">flag</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">)]</span>\n        <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"n\">pokemonList</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">diff</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">maxPower</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n    <span class=\"kd\">#:break</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">ht</span> <span class=\"n\">v</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">ht</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">flag</span> <span class=\"no\">#f</span><span class=\"p\">))</span>    \n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/more-scheme..rkt)._hash-ref!))\" style=\"color: inherit\">hash-ref!</a></span> <span class=\"n\">ht</span> <span class=\"n\">diff</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">flag</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The only further improvements would be checking that the values v are less than <code>maxPower</code>. I finally converted the code to Python as codefights doesn&rsquo;t support racket code submissions.</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">teamFinder</span><span class=\"p\">(</span><span class=\"n\">pokemonList</span><span class=\"p\">,</span> <span class=\"n\">maxPower</span><span class=\"p\">):</span>\n    <span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pokemonList</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxPower</span><span class=\"p\">):</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">maxPower</span> <span class=\"o\">-</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">maxPower</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((? . 1) f post (u . "Case Study - With Big Data Comes Big Responsibility") (? . 1) 1505086808 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/case-study-with-big-data-comes-big-responsibility.html" . unix) (u . "/2017/09/case-study-with-big-data-comes-big-responsibility.html") (u . "2017-09-09T00:00:00") (? . 0) #f (c (u . "Case Study") c (u . "Cybersecurity") c (u . "MIS522") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"week-2-case-study\">Week 2 Case Study</h2>\n\n<p><a href=\"https://hbr.org/2014/11/with-big-data-comes-big-responsibility\">With Big Data Comes Big Responsibility</a></p>\n\n<p>This weeks case study examines an article from the Harvard Business Review concerning the current and future usage of smart devices and the collection of personal data.</p>") #t (u . "\n<h2 id=\"week-2-case-study\">Week 2 Case Study</h2>\n\n<p><a href=\"https://hbr.org/2014/11/with-big-data-comes-big-responsibility\">With Big Data Comes Big Responsibility</a></p>\n\n<p>This weeks case study examines an article from the Harvard Business Review concerning the current and future usage of smart devices and the collection of personal data.</p>\n<!-- more-->\n\n<p>In the article Professor Alex Pentland from MIT shares some of his observations and concerning about the sharing habits individuals and views concerning the collection of personal data. Reading this article with an eye towards cybersecurity issues I found that the Professor touched on two topics that should be examined more closely.</p>\n\n<p>First is the issue of business ethics as it relates to the collection and storage of personal data, especially biometric data. While sales teams and designers are constantly thinking of new ways to monetize user data, care has to be taken to consider the long term costs of storing personal user data. It isn&rsquo;t a stretch to consider that the biometric and locational data being collected by smart devices is nearly equivalent to medical data. While the laws might not be in place currently, I expect that eventually this data will be classified with medical data and require similar protections and regulations. A company jumping that decides to start collecting personal data from IoT devices has to consider that this data might have strong regulations place on it one day. If a company is trying to market specialty device they need to consider exactly how much data they really need to collect and store.</p>\n\n<p>The second issue I see with the collection of personal data is related to its long term storage. There have been a number of security breaches related to personal data. These breach are a result of there being different entities that are willing to purchase user data for use in targeted marketing and analytics. Having a collection of user data on your service increases the risk of being targeted for this user data. A company needs to consider the cost of securing and storing personal user data when creating their business plans. Does that data being stored represent more potential profit to the company that liability.</p>\n\n<p>Many people enjoy having analytic data for their activities. Being able to present users with detailed breakdowns of data they are interested in and being able to share that data represents a real business opportunity. Companies just need to properly account for the costs related to these projects before they start making long term investments.</p>")) ((? . 2) f post (u . "Memoization in Racket") (? . 2) 1505086797 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/04/memoization-in-racket.html" . unix) (u . "/2017/04/memoization-in-racket.html") (u . "2017-04-01T00:00:00") (? . 3) (? . 0) (c (u . "Racket") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">totalOnes</a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p>") #t (u . "\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">totalOnes</a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">c</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"n\">c</span><span class=\"p\">))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></span> <span class=\"mi\">1000</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;(time (fib 40))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>While the standard Fibonacci formula performed as bad as it always does for large values, I was quite suprised by the speed up generated by the memoization method. Memoization uses almost the exact formula for calculating Fibonacci yet it has a speed up that is even with the iterative version into the 10&rsquo;s of thousands.</p>\n\n<p>Unfortunately I was never able to find an iterative version of <code>totalOnes</code> code however, there is still a significant increase in speed associated with converting the equation to use memoization.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">n2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient))\" style=\"color: inherit\">quotient</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"n\">n2</span> <span class=\"mi\">1</span><span class=\"p\">))))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">78</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">63</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">0</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"mi\">9884999</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">i2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient))\" style=\"color: inherit\">quotient</a></span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                               <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"n\">i2</span> <span class=\"mi\">1</span><span class=\"p\">)))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">19</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"mi\">9884999</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-30-codefights-memorized-function.md" . unix) f post (u . "CodeFights - totalOnes") (? . 3) 1505086457 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/codefights-totalones.html" . unix) (u . "/2017/03/codefights-totalones.html") (u . "2017-03-30T00:00:00") #f (? . 2) (c (u . "CodeFights") c (u . "Haskell") c (u . "C++") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>I&rsquo;ve been working through algorithm challenges on [&ldquo;https://codefights.com/&rdquo;](&ldquo;Code Fights&rdquo;) and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"&quot;memoization&quot;\">&ldquo;https://en.wikipedia.org/wiki/Memoization&rdquo;</a> to speed up a [&ldquo;https://en.wikipedia.org/wiki/Dynamic_programming&rdquo;](&ldquo;dynamic programming&rdquo;) problem. I have included the description of the challenge below.</p>\n\n<h3 id=\"httpscodefightscomchallengedgh5cqegpfu82obqsdescription\"><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description</a></h3>\n\n<p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p>") #t (u . "\n<p>I&rsquo;ve been working through algorithm challenges on [&ldquo;https://codefights.com/&rdquo;](&ldquo;Code Fights&rdquo;) and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"&quot;memoization&quot;\">&ldquo;https://en.wikipedia.org/wiki/Memoization&rdquo;</a> to speed up a [&ldquo;https://en.wikipedia.org/wiki/Dynamic_programming&rdquo;](&ldquo;dynamic programming&rdquo;) problem. I have included the description of the challenge below.</p>\n\n<h3 id=\"httpscodefightscomchallengedgh5cqegpfu82obqsdescription\"><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description</a></h3>\n\n<p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p>\n<!-- more-->\n\n<h3 id=\"example\">Example</h3>\n\n<p>For <code>k = 5</code>, the output should be <code>totalOnes(k) = 7</code>.</p>\n\n<p><code>1\n  <sub>10</sub> = 1\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>2\n  <sub>10</sub> = 10\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>3\n  <sub>10</sub> = 11\n  <sub>2</sub>&nbsp;&#8594; 2</code></p>\n\n<p><code>4\n  <sub>10</sub> = 100\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>5\n  <sub>10</sub> = 101\n  <sub>2</sub>&nbsp;&#8594; 2</code></p>\n\n<p>Thus, the answer is <code>1 + 1 + 2 + 1 + 2 = 7</code>.</p>\n\n<h2 id=\"version-1\">Version 1</h2>\n\n<p>Initially I came at this problem utilizing a strictly brute force approach. I generated a list from <code>1 to n</code> and then mapped a function that converted <code>Integer -&gt; Binary -&gt; String</code>. Then I used concat to flatten the list <code>[String] -&gt; String</code>. Finally I filtered the <code>0</code>s out of the <code>String</code> and took the <code>length</code> of the list.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Numeric</span> <span class=\"p\">(</span><span class=\"nf\">showIntAtBase</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span> <span class=\"p\">(</span><span class=\"nf\">intToDigit</span><span class=\"p\">)</span>\n\n<span class=\"nf\">totalOnes</span> <span class=\"n\">k</span> <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"p\">(</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"sc\">&#39;1&#39;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">intToBin</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">k</span><span class=\"p\">])))</span>\n\n<span class=\"nf\">intToBin</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">intToBin</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">showIntAtBase</span> <span class=\"mi\">2</span> <span class=\"n\">intToDigit</span> <span class=\"n\">n</span> <span class=\"s\">\"\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version worked on all of the sample tests however, it wasn&rsquo;t fast enough to pass the hidden tests. For this challenge we are given a time limit of <code>4000ms</code> and <code>k</code> is constrained <code>0&#8804; k&#8804; 2<sup>31</sup></code>.</p>\n\n<p>If I was given <code>k = 2^31 - 1</code> I would have to compute each <code>Int -&gt; String</code> in <code>1.863ns</code> just to have the list ready in less than <code>4000ms</code>.</p>\n\n<p>At this point it was obvious that I needed to look for an equation that would either compute the value of <code>k</code> directly or that would generate a value near <code>k</code>.</p>\n\n<h2 id=\"version-2\">Version 2</h2>\n\n<p>To get a clue for where I needed to go next I generated the values for <code>totalOnes</code> for <code>k &lt;- [1..10]</code>. This gave me <code>1,2,4,5,7,9,12,13,15,17</code> which I was able to plug into the <a href=\"https://oeis.org/A000788\">oeis sequence encyclopedia</a>. I was first shown this site while working on my B.S. and I have found it useful working on a number of algorithm problems.</p>\n\n<p>They have a recursive formula for calculating the <code>totalOnes</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Which can be converted into Haskell as</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"n\">n2</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"kr\">where</span> <span class=\"n\">n2</span> <span class=\"ow\">=</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This formula is faster than the <code>Int -&gt; Binary -&gt; String</code> code I was using before however, it introduced a recursive element that branches similar to fibonacci. Looking for ways to speed up the recursive function I found comments suggesting that I take a dynamic programming approach to the problem and start memoizating the function.</p>\n\n<p>Since I couldn&rsquo;t find a good method for memoization with Haskell I switched over to <code>C++</code> at this point.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version was able to pass the first hidden test however, it failed on the second.</p>\n\n<h2 id=\"version-3\">Version 3</h2>\n\n<p>I had effectively maxxed out the speed for directly calculating the value of <code>k</code> at this point. The next speed up came when I found another equation on the oeis site for calculating specific values of <code>k</code>.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This bit of code allows me to calculate the value of the nearest <code>n&#8804; k&#8739; n = 2<sup>m</sup> &ndash; 1</code> which I could use as a jumping off point to reach k.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I still wasn&rsquo;t able to complete all of the hidden tests with this code however, it did much better than any of my previous examples.</p>\n\n<p>Overall I thought that this was a very interesting problem that required a lot more out of the box thinking than most coding challenges I come across. I have never really been given a task that requires a trade off between storage space and calculation time before and I feel that this problem nicely illustrates that concept.</p>\n\n<p>Going forward I&rsquo;m planning to take another look at the Coin Change problem from SICP to see if it can similarly benefit from memoization.</p>"))))