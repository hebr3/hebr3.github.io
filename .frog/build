((3) 0 () 37 ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-10-mcs511-reading-assignment-1-can-we-make-operation-systems-reliable-and-secure.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-25-mcs511-reading-assignment-2-enclaves-for-operating-system-protection.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-12-hackerrank-climbing-the-leaderboard.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs211-lab2.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-02-16-20-project-csusm-credential-program.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-02-16-20-project.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-02-20-20-project-update.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-15-cs231-test-question.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-30-codefights-memorized-function.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-31-project-euler-with-haskell-9-10.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-11-asm-dsl.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-11-14-project-euler-with-haskell-13-14.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-11-07-project-euler-with-haskell-11-12.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-25-cs211-lab1-program1.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-30-cs211-lab1-program3.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-27-cs211-lab1-program2.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs231-lab2.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-26-fibonacci-in-prolog.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-16-sql-queries-in-prolog.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-11-20-project-project-euler-27.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-11-20-project-project-euler-29.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-15-20-project-project-euler-40-44-and-47.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-12-20-project-witch-of-agnesi.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-24-daily-desmos-24apr-advanced.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-24-daily-desmos-24apr-exploration.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-24-daily-desmos-24apr.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-09-mis522-case-study-1-with-big-data-comes-big-responsibility.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-04-01-racket-memorized-function.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-08-17-codefights-teamFinder-Python.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab4.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-05-cs211-lab7.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab5.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-02-cs231-assignment1.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-03-project-euler-with-haskell.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-24-project-euler-with-haskell-8.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-17-project-euler-with-haskell-5-6-7.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-10-project-euler-with-haskell-3-4.md" . unix)) () (h ! (equal) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-02-16-20-project.md" . unix) f post (u . "20% Project") (? . 5) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/02/20-project.html" . unix) (u . "/2015/02/20-project.html") (u . "2015-02-16T00:00:00") #f (? . 4) (c (u . "20% Project") c (u . "Author: Henry Brooks")) (u . "\n<p>For my 20% Project I am thinking about expanding my coding skills. I took a basic computer programming class with C+ during college and I want to expand that knowledge.</p>") #t (u . "\n<p>For my 20% Project I am thinking about expanding my coding skills. I took a basic computer programming class with C+ during college and I want to expand that knowledge.</p>\n<!-- more-->\n\n<p>I&rsquo;ve been able to solve around 10 of the problems on <a href=\"https://projecteuler.net/\">Project Euler</a> using the coding skills that I already know and some Combinatoric trick however, I have come to recognize that to move any further I am going to need to learn how to actually write complex computer code utilizing arrays and date structures. I haven&rsquo;t settled on a specific language to learn for this project, however I would like to finish the first 100 problems on the site by the end of the semester.</p>\n\n<p>I find that many of the problems I have already solved have a range of possilble solutions ranging from brute force to elegent mathematic proofs. I feel that going through these problems will give me a greater appreciation for the diverse methods students use to solve mathematical problems in my class. Understanding that a problem can have more than one valid solution and being able to articulate how different solution methods can arrive at the same answer is an important skill that we need as teachers. Hopefully this project will assist me in recognizing and articulating that to students.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-30-codefights-memorized-function.md" . unix) f post (u . "CodeFights - totalOnes") (? . 8) 1506456149 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/codefights-totalones.html" . unix) (u . "/2017/03/codefights-totalones.html") (u . "2017-03-30T00:00:00") (? . 7) (? . 27) (c (u . "CodeFights") c (u . "Haskell") c (u . "C++") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>I&rsquo;ve been working through algorithm challenges on <a href=\"https://codefights.com/\">Code Fights</a> and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to speed up a <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a> problem. I have included the description of the challenge below.</p>\n\n<h2 id=\"httpscodefightscomchallengedgh5cqegpfu82obqsdescription\"><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description</a></h2>\n\n<p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p>") #t (u . "\n<p>I&rsquo;ve been working through algorithm challenges on <a href=\"https://codefights.com/\">Code Fights</a> and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to speed up a <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a> problem. I have included the description of the challenge below.</p>\n\n<h2 id=\"httpscodefightscomchallengedgh5cqegpfu82obqsdescription\"><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description</a></h2>\n\n<p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p>\n<!-- more-->\n\n<h2 id=\"example\">Example</h2>\n\n<p>For <code>k = 5</code>, the output should be <code>totalOnes(k) = 7</code>.</p>\n\n<p><code>1\n  <sub>10</sub> = 1\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>2\n  <sub>10</sub> = 10\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>3\n  <sub>10</sub> = 11\n  <sub>2</sub>&nbsp;&#8594; 2</code></p>\n\n<p><code>4\n  <sub>10</sub> = 100\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>5\n  <sub>10</sub> = 101\n  <sub>2</sub>&nbsp;&#8594; 2</code></p>\n\n<p>Thus, the answer is <code>1 + 1 + 2 + 1 + 2 = 7</code>.</p>\n\n<h2 id=\"version-1\">Version 1</h2>\n\n<p>Initially I came at this problem utilizing a strictly brute force approach. I generated a list from <code>1 to n</code> and then mapped a function that converted <code>Integer -&gt; Binary -&gt; String</code>. Then I used concat to flatten the list <code>[String] -&gt; String</code>. Finally I filtered the <code>0</code>s out of the <code>String</code> and took the <code>length</code> of the list.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Numeric</span> <span class=\"p\">(</span><span class=\"nf\">showIntAtBase</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span> <span class=\"p\">(</span><span class=\"nf\">intToDigit</span><span class=\"p\">)</span>\n\n<span class=\"nf\">totalOnes</span> <span class=\"n\">k</span> <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"p\">(</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"sc\">&#39;1&#39;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">intToBin</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">k</span><span class=\"p\">])))</span>\n\n<span class=\"nf\">intToBin</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">intToBin</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">showIntAtBase</span> <span class=\"mi\">2</span> <span class=\"n\">intToDigit</span> <span class=\"n\">n</span> <span class=\"s\">\"\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version worked on all of the sample tests however, it wasn&rsquo;t fast enough to pass the hidden tests. For this challenge we are given a time limit of <code>4000ms</code> and <code>k</code> is constrained <code>0&#8804; k&#8804; 2<sup>31</sup></code>.</p>\n\n<p>If I was given <code>k = 2^31 - 1</code> I would have to compute each <code>Int -&gt; String</code> in <code>1.863ns</code> just to have the list ready in less than <code>4000ms</code>.</p>\n\n<p>At this point it was obvious that I needed to look for an equation that would either compute the value of <code>k</code> directly or that would generate a value near <code>k</code>.</p>\n\n<h2 id=\"version-2\">Version 2</h2>\n\n<p>To get a clue for where I needed to go next I generated the values for <code>totalOnes</code> for <code>k &lt;- [1..10]</code>. This gave me <code>1,2,4,5,7,9,12,13,15,17</code> which I was able to plug into the <a href=\"https://oeis.org/A000788\">oeis sequence encyclopedia</a>. I was first shown this site while working on my B.S. and I have found it useful working on a number of algorithm problems.</p>\n\n<p>They have a recursive formula for calculating the <code>totalOnes</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Which can be converted into Haskell as</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"n\">n2</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"kr\">where</span> <span class=\"n\">n2</span> <span class=\"ow\">=</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This formula is faster than the <code>Int -&gt; Binary -&gt; String</code> code I was using before however, it introduced a recursive element that branches similar to fibonacci. Looking for ways to speed up the recursive function I found comments suggesting that I take a dynamic programming approach to the problem and start memoizating the function.</p>\n\n<p>Since I couldn&rsquo;t find a good method for memoization with Haskell I switched over to <code>C++</code> at this point.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version was able to pass the first hidden test however, it failed on the second.</p>\n\n<h2 id=\"version-3\">Version 3</h2>\n\n<p>I had effectively maxxed out the speed for directly calculating the value of <code>k</code> at this point. The next speed up came when I found another equation on the oeis site for calculating specific values of <code>k</code>.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This bit of code allows me to calculate the value of the nearest <code>n&#8804; k&#8739; n = 2<sup>m</sup> &ndash; 1</code> which I could use as a jumping off point to reach k.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I still wasn&rsquo;t able to complete all of the hidden tests with this code however, it did much better than any of my previous examples.</p>\n\n<p>Overall I thought that this was a very interesting problem that required a lot more out of the box thinking than most coding challenges I come across. I have never really been given a task that requires a trade off between storage space and calculation time before and I feel that this problem nicely illustrates that concept.</p>\n\n<p>Going forward I&rsquo;m planning to take another look at the Coin Change problem from SICP to see if it can similarly benefit from memoization.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-25-mcs511-reading-assignment-2-enclaves-for-operating-system-protection.md" . unix) f post (u . "MCS521 Reading Assignment 1 - Can We Make Operating Systems Reliable and Secure?") (? . 1) 1506400717 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/mcs521-reading-assignment-1-can-we-make-operating-systems-reliable-and-secure.html" . unix) (u . "/2017/09/mcs521-reading-assignment-1-can-we-make-operating-systems-reliable-and-secure.html") (u . "2017-09-10T00:00:00") (? . 26) (? . 0) (c (u . "Reading Assignment") c (u . "Cybersecurity") c (u . "MCS511") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"reading-assignment-2\">Reading Assignment 2</h2>\n\n<p><a href=\"http://ieeexplore.ieee.org/document/7490626/\">Enclaves for Operation System Protection</a></p>") #t (u . "\n<h2 id=\"reading-assignment-2\">Reading Assignment 2</h2>\n\n<p><a href=\"http://ieeexplore.ieee.org/document/7490626/\">Enclaves for Operation System Protection</a></p>\n<!-- more-->\n\n<p>I feel that the authors were successful in presenting enclaves as an important element of a security framework. They presented the pros and cons of utilizing enclaves as part of an os security design. They also highlighted different attacks that would have been stopped or at least partially mitigated through the use of enclaving system processes.</p>\n\n<p>I first learned about this type of software in relation to web browsers. Years ago Chrome and Firefox started heavily marketing their browsers for having sandboxed tabs. At the time I was happy to have tabs that wouldn’t cause cascading crashes however, I can now see how enclaving different browser sessions could definitely improve security. Earlier this year it was shown that malicious coders could use the autocomplete function of chrome to retrieve more information through the api than the user was shown on the web page. I feel that proper enclaving of the user data and the api would have mitigated that problem.</p>\n\n<p>Concerning the operating system, I have experience running virtual machines and dual booting my own computers. I understand the benefits of having an abstraction layer to ensure that tests and processes run on one system do not damage another. I hadn’t really considered the benefits of enclaving system processes until I read this paper. Considering my experience coding for the JVM and other interpreted languages I feel like the benefits of having a secure sandbox should have been more apparent to me.</p>\n\n<p>Overall I think the authors are correct in their assessment of the use of enclaves to secure operating system processes. IEEE now suggests that most systems move towards two factor authentication and I feel like a strong argument can be made to include enclaving as another layer of system protection. While it can’t stop all attacks it definitely increases the difficulty of attacking the system and makes it easier for other defenses to identify malicious activity.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-11-20-project-project-euler-27.md" . unix) f post (u . "20% Project - ProjectEuler #27") (? . 19) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/20-project-projecteuler-27.html" . unix) (u . "/2015/04/20-project-projecteuler-27.html") (u . "2015-04-11T00:00:00") (? . 6) (? . 20) (c (u . "Teaching Credential") c (u . "20% Project") c (u . "Project Euler") c (u . "Author: Henry Brooks")) (u . "\n<p>Euler discovered the remarkable quadratic formula:</p>\n\n<p><code>n^2 + n + 41</code></p>") #t (u . "\n<p>Euler discovered the remarkable quadratic formula:</p>\n\n<p><code>n^2 + n + 41</code></p>\n<!-- more-->\n\n<p>It turns out that the formula will produce <code>40</code> primes for the consecutive values <code>n = 0</code> to <code>39</code>. However, when <code>n = 40</code>, <code>40^2 + 40 + 41 = 40(40 + 1) + 41</code> is divisible by <code>41</code>, and certainly when <code>n = 41, 41^2 + 41 + 41</code> is clearly divisible by <code>41</code>.</p>\n\n<p>The incredible formula <code>n^2 − 79n + 1601</code> was discovered, which produces <code>80</code> primes for the consecutive values <code>n = 0</code> to <code>79</code>. The product of the coefficients, <code>−79</code> and <code>1,601</code>, is <code>−126,479</code>.</p>\n\n<p>Considering quadratics of the form:</p>\n\n<p><code>n^2 + an + b</code>, where <code>|a| &lt; 1,000</code> and <code>|b| &lt; 1,000</code> where <code>|n|</code> is the modulus/absolute value of <code>n</code> e.g. <code>|11| = 11</code> and <code>|−4| = 4</code></p>\n\n<p>Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.</p>\n\n<p><a href=\"https://projecteuler.net/problem=27\">Project Euler</a></p>\n\n<p>Initially I planned to tackle this problem from a strictly brute force perspective. I have found that working on a simple solution to a problem usually gives me insights to more elegant solutions.</p>\n\n<p>Therefore I figured that the most straight forward and inelegant method was to produce a 1999 by 1999 array with individual elements of the array corresponding to the maximum number of consecutive primes generated by that combination of a and b.</p>\n\n<p>Thus the initial element of the array in position |1,1| would be the maximum number of consecutive primes generated by n2 + (&ndash;999)n + (&ndash;999), and the final position of |1999,1999| would be n2 + (999)n + (999).</p>\n\n<p>With this plan in mind I tried to think up a quick way to calculate the maximum number of consecutive primes for a given <strong>a</strong> and <strong>b</strong>.</p>\n\n<p>I started by having Mathematica generate the first 101 values from the example given in the problem by using a=1 and b=41.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27a.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n\n<p>I then used <strong>PrimeQ</strong> to test whether each value was prime.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27b.png\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<p>Then used <strong>Boole</strong> to convert these true false values to 0&rsquo;s and 1&rsquo;s.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27c.png\" alt=\"3\" />\n <p class=\"caption\">3</p></div>\n\n<p>And finally <strong>FirstPosition</strong> to find the first false in the list.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27d.png\" alt=\"4\" />\n <p class=\"caption\">4</p></div>\n\n<p>Note that the answer of 41 corresponds to the 39 primes listed in the example since this method doesn&rsquo;t count the primes from 0&ndash;39 but from 1&ndash;40 and it found a non-Prime number in position 41.</p>\n\n<p>So&hellip;</p>\n\n<p>This method is horribly inelegant, however it does work so it&rsquo;s time to see if I can use this method to generate the <code>1,999</code> by <code>1999</code> array I initially planned for.</p>\n\n<p>I begin by trying my method on a smaller array and seeing if it would work at all.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27e.png\" alt=\"5\" />\n <p class=\"caption\">5</p></div>\n\n<p>Note that this entry should be much larger as it displays a <code>51×51</code> array of values.</p>\n\n<p>To find the maximum element of this array I then use the <strong>Position</strong> and <strong>Max</strong> commands. <strong>Position</strong> gives the location in an array of a specified value, and <strong>Max</strong> gives the largest element of the array.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27f.png\" alt=\"6\" />\n <p class=\"caption\">6</p></div>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27g.png\" alt=\"7\" />\n <p class=\"caption\">7</p></div>\n\n<p>Since we are counting up from 0 we have now found that the Maximum number of consecutive primes is generated with <strong>a</strong>=1 and <strong>b</strong>=41 which matches the example.</p>\n\n<p>One area of concern going forward is that it takes <code>0.655,204</code> secs for Mathematica to create the <code>51×51</code> array I used above. Since a <code>1,999×1,999</code> array is almost <code>1,600%</code> larger than a <code>50×50</code> array, that means that generating a <code>1999×1999</code> array should take at least <code>17</code> minutes and <code>28.33</code> second. Most likely longer considering that the edges of the array will be dealing with <strong>a</strong> and <strong>b</strong> values greater than <code>900</code>.</p>\n\n<p>Still I have free time and I&rsquo;m not paying for processing time so we might as well go forward and see how long it takes.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27h.png\" alt=\"8\" />\n <p class=\"caption\">8</p></div>\n\n<p>So <code>21</code> minutes and <code>14</code> seconds later we have our array and can try to find the Maximum number of consecutive primes.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler27i.png\" alt=\"9\" />\n <p class=\"caption\">9</p></div>\n\n<p>And we have a max at <code>|939,1971|</code>, so <code>939-1000=-61</code> and <code>1971-1000=971</code> are are <strong>a</strong> and <strong>b</strong> values.</p>\n\n<p><code>a*b=-61*971=-59231</code></p>\n\n<p>And we thus have our answer for Problem 27.</p>\n\n<p>Now we can focus on improving this process.</p>\n\n<p>We could start by recognizing that <strong>b</strong> has to be a prime number. It was only after I had finished this problem that I realized that since <code>n</code> starts at <code>0</code> the first element will always be <code>0*0 + a*0 + b</code>. Since there are <code>168</code> primes less than <code>1000</code> that means I only needed <code>168</code> rows instead of <code>1999</code>.</p>\n\n<p>A <code>1999×168} array is</code>8.4%} the size of a <code>1999×1999} array and only took Mathematica</code>1} minute and <code>56} seconds to calculate.\n\n![10](/img/ProjectEuler27j.png)\n\nA larger time sink is that I am actually calculating out the first</code>100 n<code>values for every combination of **a** and **b** tested. Thus even if the second value calculated is non-Prime I still waste time evaluating the next 98 values.\n\nUsing the following code I can just check if the</code>n<code>values are prime and stop when a non-Prime is found.\n\n![11](/img/ProjectEuler27k.png)\n\nTo better understand how much time this saves, I calculated a</code>50×50<code>array using the old method and the new method and had Mathematica generate an **ArrayPlot** to save space.\n\n![12](/img/ProjectEuler27l.png)\n\nThe second method took</code>6.1%<code>of the time taken by the first method.\n\nUsing both methods together the entire process of generating the</code>1999×168<code>array takes</code>10<code>seconds.\n\n![13](/img/ProjectEuler27m.png)\n\nI haven't looked into it, but I suspect that I could similarly shave a couple of seconds off of the total running time by finding some trick for picking a values.\n\nConclusion\n---\n\nI started by creating a rather inelegant method for finding the number of consecutive primes generated on a</code>1999×1999<code>matrix. This method took</code>21<code>minutes and</code>14<code>seconds.\n\nI next examined the problem more closely and found areas that could be refined so that I found that same solution in</code>10<code>seconds.\n\nI'm confident that the majority of the improvement in performance came from optimizing the operation that found the number of consecutive primes.\n\n![14](/img/ProjectEuler27n.png)\n\nUsing the above code I found that</code>280,607<code>times the second number tested was non-Prime. Since there are only</code>336,000<code>entries in the array that means that</code>83.5%` of the time while generating the original array I could have stopped after calculating the second value.</p>\n\n<p>This was a longer write up than I originally expected, but it was a rather involved problem that benefited greatly from optimization.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-03-project-euler-with-haskell.md" . unix) f post (u . "Project Euler with Haskell") (? . 33) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/10/project-euler-with-haskell.html" . unix) (u . "/2015/10/project-euler-with-haskell.html") (u . "2015-10-03T00:00:00") (? . 25) (? . 36) (c (u . "Project Euler") c (u . "Haskell") c (u . "Author: Henry Brooks")) (u . "\n<p>Teaching Algebra A has been more of a slog then I was expecting and I&rsquo;ve been feeling like I need to stretch myself before I get bogged down in teaching this year. I enjoyed working on Project Euler problems last year and while looking over the site again I stumbled over the haskell programming language.</p>\n\n<p>Looking over the Haskell syntax I see a lot of design decisions that align with my mathematic background. I feel that the list comprehensions and mapping functions for lists have a strong mathematical foundation and I think that I will be able to pick up the language quickly.</p>\n\n<p>I&rsquo;m going to try to work through all of the Project Euler problems I completed with Mathematic last year and see if the process is easier or at least clearer this time around.</p>") #t (u . "\n<p>Teaching Algebra A has been more of a slog then I was expecting and I&rsquo;ve been feeling like I need to stretch myself before I get bogged down in teaching this year. I enjoyed working on Project Euler problems last year and while looking over the site again I stumbled over the haskell programming language.</p>\n\n<p>Looking over the Haskell syntax I see a lot of design decisions that align with my mathematic background. I feel that the list comprehensions and mapping functions for lists have a strong mathematical foundation and I think that I will be able to pick up the language quickly.</p>\n\n<p>I&rsquo;m going to try to work through all of the Project Euler problems I completed with Mathematic last year and see if the process is easier or at least clearer this time around.</p>\n<!-- more-->\n\n<h2 id=\"problem-1\">Problem 1</h2>\n\n<p>This problem, and it&rsquo;s solution, really highlight why I wanted to try my hand at learning Haskell. The list comprehension syntax I use in this solution are nearly identical to the mathematical notation I would use to discribe this problems solution mathematically. We create a set of natural numbers less than <code>1000</code> that are congruent to <code>0 mod 3</code> or <code>5</code>, then we <code>sum</code> the elements of the set. <strong>S</strong> = <code>{x | x ∈ ℕ, x &lt; 1000, x ≡ 0 mod 3 ⋁ x ≡  0 mod 5}</code>, <code>sum S</code></p>\n\n<p><code>ProjectEuler1.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem1 - Sum of the natural numbers below 1000 that are multiplies of 3 or 5\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem1</span> \n\n<span class=\"c1\">--Sum of the natural numbers below 1000 that are multiplies of 3 or 5</span>\n<span class=\"nf\">problem1</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">999</span><span class=\"p\">],</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>My solution ends up using the <code>x&lt;-[1..999]</code> instead of <code>x&lt;-[1..], x &lt; 1000</code> because Haskell&rsquo;s methodology doesn&rsquo;t align perfectly the math notation. Specifically it keep checking numbers, even after <code>1000</code>, to see if <code>x &lt; 1000, x ≡ 0 mod 3 ⋁ x ≡  0 mod 5</code>. The system doesn&rsquo;t know it should stop at <code>1000</code> naturally. I could still make use of <a href=\"https://en.wikipedia.org/wiki/Lazy_evaluation#Working_with_infinite_data_structures\">Haskell&rsquo;s infinite list</a> <code>[1..]</code> however, I would need to add <code>sum (takeWhile (&lt;1000) [x | x &lt;-[1..], ...])</code> to only take <code>x</code> values less than 1000. This is all a result of <a href=\"https://en.wikipedia.org/wiki/Lazy_evaluation\">lazy evaluation</a> and is a little more complicated than I can properly explain.</p>\n\n<p>Still the solution works well and I feel that it matches how I would approach this problem from a math perspective if I was doing this problem on paper.</p>\n\n<p><strong>Caveat</strong>: I know this problem can also be solved using <a href=\"https://www.wolframalpha.com/input/?i=(sum+3i+from+i%3D0+to+(999%2F3))+%2B+(sum+5j+from+j%3D0+to+(999%2F5))+-+(sum+15k+from+k%3D0+to+(999%2F15))\">sums</a> by modifing the equation for <a href=\"https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF#Partial_sums\">partial sums</a>.</p>\n\n<p><code>\\sum_{i=0}^{\\left\\lfloor\\frac{999}{3}\\right\\rfloor} 3i +</code> <code>\\sum_{j=0}^{\\left\\lfloor\\frac{999}{5}\\right\\rfloor} 5j -</code> <code>\\sum_{k=0}^{\\left\\lfloor\\frac{999}{15}\\right\\rfloor} 15k</code></p>\n\n<h2 id=\"problem-2\">Problem 2</h2>\n\n<p>I didn&rsquo;t use the standard Haskell version of the Fibonacci equation for this problem.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">fib</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span>\n<span class=\"nf\">fib</span> <span class=\"mi\">2</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span>\n<span class=\"nf\">fib</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version will blow up in space and time complexity for large values of <code>n</code> and is generally less efficient.</p>\n\n<p>I instead went with an <a href=\"https://www.ics.uci.edu/~eppstein/161/960109.html\">iterative version</a> of fibonacci that takes n steps to calcuate <code>fib n</code>.</p>\n\n<p>There are some other versions of Fibonacci that bring the space and time complexity down further using recurrent patterns however, I felt like this code was good enough for my purposes here.</p>\n\n<p><code>ProjectEuler2.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    \n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem2 - Sum of the even Fibonacci numbers less than 4,000,000\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem2</span>\n    \n<span class=\"c1\">--Sum of the even Fibonacci numbers less than 4,000,000</span>\n<span class=\"nf\">problem2</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"p\">[</span><span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">mod</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4000000</span><span class=\"p\">]</span>\n\n<span class=\"nf\">fib</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">fib_iter</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n\n<span class=\"nf\">fib_iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"n\">b</span>\n<span class=\"nf\">fib_iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">count</span> <span class=\"ow\">=</span> <span class=\"n\">fib_iter</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>While working on this problem I also found out that I could have had Haskell to generate an infinite list of fibonacci numbers using this code</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">{</span><span class=\"n\">fibs</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span> <span class=\"kt\">:</span> <span class=\"mi\">1</span> <span class=\"kt\">:</span> <span class=\"n\">zipWith</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"n\">fibs</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">fibs</span><span class=\"p\">)}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I&rsquo;m finding that infinite lists are one of the aspects of Haskell that are really intriguing to me. They seem to provide a bridge between mathematics and programming that I am interested in exploring further.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-16-sql-queries-in-prolog.md" . unix) f post (u . "SQL queries in Prolog") (? . 18) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/sql-queries-in-prolog.html" . unix) (u . "/2017/09/sql-queries-in-prolog.html") (u . "2017-09-16T00:00:00") (? . 2) (? . 17) (c (u . "SQL") c (u . "Prolog") c (u . "MIS522") c (u . "Author: Henry Brooks")) (u . "\n<p>This post will be looking at solving <a href=\"https://en.wikipedia.org/wiki/SQL\">SQL</a> problems with <a href=\"https://en.wikipedia.org/wiki/Prolog\">Prolog</a>.</p>\n\n<p>I have been intrigued by Prolog for a while now because of its roots in first-order logic. I have been going through tutorials and examples looking for a way to leverage logic programming as a DSL in personal projects. I feel that Prolog could be used as a substitute for a more fully featured database languages in small projects.</p>") #t (u . "\n<p>This post will be looking at solving <a href=\"https://en.wikipedia.org/wiki/SQL\">SQL</a> problems with <a href=\"https://en.wikipedia.org/wiki/Prolog\">Prolog</a>.</p>\n\n<p>I have been intrigued by Prolog for a while now because of its roots in first-order logic. I have been going through tutorials and examples looking for a way to leverage logic programming as a DSL in personal projects. I feel that Prolog could be used as a substitute for a more fully featured database languages in small projects.</p>\n<!-- more-->\n\n<p>I have found that most developers I have talked to have never really dug into Prolog as a language. More than one person has state that they consider Prolog to be a toy language only good for proving who your ancestor is. Personally I wish that my computer programming courses had touched on the language more.</p>\n\n<p>Below you will find the code needed to create a simple database in both SQL and Prolog.</p>\n\n<h4 id=\"sql\">SQL</h4>\n\n<div class=\"brush: SQL\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">CUSTOMER_t</span>\n<span class=\"p\">(</span><span class=\"n\">Customer_Id</span> <span class=\"nb\">INT</span> <span class=\"p\">,</span>\n<span class=\"n\">Customer_Name</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"n\">Customer_Address</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"n\">Customer_City</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"p\">,</span> \n<span class=\"n\">Customer_State</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"n\">Postal_Code</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">CUSTOMER_PK</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">));</span>\n\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">ORDER_t</span>\n<span class=\"p\">(</span><span class=\"n\">Order_Id</span> <span class=\"nb\">INT</span> <span class=\"p\">,</span>\n<span class=\"n\">Customer_Id</span> <span class=\"nb\">INT</span> <span class=\"p\">,</span>\n<span class=\"n\">Order_Date</span> <span class=\"nb\">DATE</span> <span class=\"p\">,</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">ORDER_PK</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">),</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">ORDER_FK1</span> <span class=\"k\">FOREIGN</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">)</span> <span class=\"k\">REFERENCES</span> <span class=\"n\">CUSTOMER_t</span><span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">));</span>\n\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">PRODUCT_t</span>\n<span class=\"p\">(</span><span class=\"n\">Product_Id</span> <span class=\"nb\">Int</span><span class=\"p\">,</span>\n<span class=\"n\">Product_Line_Id</span> <span class=\"nb\">INT</span> <span class=\"p\">,</span>\n<span class=\"n\">Product_Description</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"n\">Product_Finish</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"n\">Standard_Price</span> <span class=\"nb\">Decimal</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">PRODUCT_PK</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">));</span>\n\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">ORDER_LINE_t</span><span class=\"p\">(</span>\n<span class=\"n\">Order_Id</span> <span class=\"nb\">INT</span><span class=\"p\">,</span>\n<span class=\"n\">Product_Id</span> <span class=\"nb\">INT</span><span class=\"p\">,</span>\n<span class=\"n\">Ordered_Quantity</span> <span class=\"nb\">INT</span><span class=\"p\">,</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">Order_line_PK</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span> <span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span> <span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">Order_line_FK1</span> <span class=\"k\">FOREIGN</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span> <span class=\"n\">Order_Id</span> <span class=\"p\">)</span> <span class=\"k\">REFERENCES</span> <span class=\"n\">ORDER_t</span><span class=\"p\">(</span> <span class=\"n\">Order_Id</span> <span class=\"p\">)</span> <span class=\"p\">,</span>\n<span class=\"k\">CONSTRAINT</span> <span class=\"n\">Order_line_FK2</span> <span class=\"k\">FOREIGN</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span> <span class=\"n\">Product_Id</span> <span class=\"p\">)</span> <span class=\"k\">REFERENCES</span> <span class=\"n\">PRODUCT_t</span><span class=\"p\">(</span> <span class=\"n\">Product_Id</span> <span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Contemporary Casuals&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1355 S Hines Blvd&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gainesville&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;FL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;32601&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Value Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;15145 S.W. 17th St.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Plano&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;TX&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;75094&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Home Furnishings&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1900 Allard Ave.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Albany&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NY&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;12209&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Eastern Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1925 Beltline Rd.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Carteret&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NJ&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;07008&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Impressions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;5585 Westcott Ct.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Sacramento&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CA&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;94206&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Furniture Gallery&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;325 Flatiron Dr.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Boulder&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CO&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;80514&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Period Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;394 Rainbow Dr.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Seattle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;WA&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;97954&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Calfornia Classics&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;816 Peach Rd.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Santa Clara&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CA&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;96915&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;M and H Casual Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3709 First Street&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Clearwater&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;FL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;34620&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Seminole Interiors&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2400 Rocky Point Dr.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Seminole&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;FL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;34646&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s1\">&#39;American Euro Lifestyles&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2424 Missouri Ave N.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Prospect Park&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NJ&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;07508&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Battle Creek Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;345 Capitol Ave. SW&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Battle Creek&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;MI&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;49015&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Heritage Furnishings&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;66789 College Ave.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Carlisle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PA&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;17013&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Kaneohe Homes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;112 Kiowai St.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Kaneohe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HI&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;96744&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">CUSTOMER_t</span> <span class=\"p\">(</span><span class=\"n\">Customer_Id</span><span class=\"p\">,</span> <span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">Customer_Address</span><span class=\"p\">,</span> <span class=\"n\">Customer_City</span><span class=\"p\">,</span> <span class=\"n\">Customer_State</span><span class=\"p\">,</span> <span class=\"n\">Postal_Code</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Mountain Scenes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;4132 Main Street&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Ogden&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;UT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;84403&#39;</span><span class=\"p\">);</span>\n\n\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"s1\">&#39;21/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1002</span><span class=\"p\">,</span> <span class=\"s1\">&#39;21/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1003</span><span class=\"p\">,</span> <span class=\"s1\">&#39;22/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1004</span><span class=\"p\">,</span> <span class=\"s1\">&#39;22/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1005</span><span class=\"p\">,</span> <span class=\"s1\">&#39;24/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"s1\">&#39;24/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1007</span><span class=\"p\">,</span> <span class=\"s1\">&#39;27/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1008</span><span class=\"p\">,</span> <span class=\"s1\">&#39;30/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1009</span><span class=\"p\">,</span> <span class=\"s1\">&#39;05/Nov/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Order_Date</span><span class=\"p\">,</span> <span class=\"n\">Customer_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1010</span><span class=\"p\">,</span> <span class=\"s1\">&#39;05/Nov/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;End Table&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Cherry&#39;</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Coffe Table&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Natural Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Computer Desk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Natural Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">375</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Entertainment Center&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Natural Maple&#39;</span><span class=\"p\">,</span> <span class=\"mi\">650</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Writers Desk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Cherry&#39;</span><span class=\"p\">,</span> <span class=\"mi\">325</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;8-Drawer Desk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;White Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">750</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Dining Table&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Natural Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PRODUCT_t</span> <span class=\"p\">(</span><span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Description</span><span class=\"p\">,</span> <span class=\"n\">Product_Finish</span><span class=\"p\">,</span> <span class=\"n\">Standard_Price</span><span class=\"p\">,</span> <span class=\"n\">Product_Line_Id</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Computer Desk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Walnut&#39;</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1002</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1003</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1004</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1004</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1005</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1007</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1007</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1008</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1008</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1009</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1009</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ORDER_LINE_t</span> <span class=\"p\">(</span><span class=\"n\">Order_Id</span><span class=\"p\">,</span> <span class=\"n\">Product_Id</span><span class=\"p\">,</span> <span class=\"n\">Ordered_Quantity</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1010</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h4 id=\"prolog\">Prolog</h4>\n\n<div class=\"brush: Prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">%customer(Customer_Id, Customer_Name, Customer_Address, Customer_City, Customer_State, Postal_Code)</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Contemporary Casuals&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;1355 S Hines Blvd&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Gainesville&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;FL&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;32601&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Value Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;15145 S.W. 17th St.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Plano&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;TX&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;75094&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Home Furnishings&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;1900 Allard Ave.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Albany&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;NY&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;12209&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Eastern Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;1925 Beltline Rd.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Carteret&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;NJ&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;07008&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Impressions&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;5585 Westcott Ct.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Sacramento&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;CA&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;94206&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Furniture Gallery&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;325 Flatiron Dr.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Boulder&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;CO&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;80514&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Period Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;394 Rainbow Dr.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Seattle&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;WA&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;97954&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Calfornia Classics&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;816 Peach Rd.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Santa Clara&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;CA&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;96915&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;M and H Casual Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;3709 First Street&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Clearwater&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;FL&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;34620&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Seminole Interiors&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;2400 Rocky Point Dr.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Seminole&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;FL&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;34646&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;American Euro Lifestyles&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;2424 Missouri Ave N.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Prospect Park&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;NJ&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;07508&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Battle Creek Furniture&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;345 Capitol Ave. SW&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Battle Creek&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;MI&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;49015&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Heritage Furnishings&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;66789 College Ave.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Carlisle&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;PA&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;17013&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Kaneohe Homes&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;112 Kiowai St.&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Kaneohe&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;HI&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;96744&#39;</span><span class=\"p\">).</span>\n<span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Mountain Scenes&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;4132 Main Street&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Ogden&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;UT&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;84403&#39;</span><span class=\"p\">).</span>\n\n<span class=\"c1\">%order(Order_Id, Order_Date, Customer_Id)</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;21/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1002</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;21/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1003</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;22/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1004</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;22/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1005</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;24/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;24/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1007</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;27/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1008</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;30/Oct/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1009</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;05/Nov/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">).</span>\n<span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"mi\">1010</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;05/Nov/00&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n\n<span class=\"c1\">%product(Product_Id, Product_Description, Product_Finish, Standard_Price, Product_Line_Id)</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;End Table&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Cherry&#39;</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Coffe Table&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Natural Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Computer Desk&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Natural Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">375</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Entertainment Center&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Natural Maple&#39;</span><span class=\"p\">,</span> <span class=\"mi\">650</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Writers Desk&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Cherry&#39;</span><span class=\"p\">,</span> <span class=\"mi\">325</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;8-Drawer Desk&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;White Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">750</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Dining Table&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Natural Ash&#39;</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Computer Desk&#39;</span><span class=\"p\">,</span> <span class=\"s s-Atom\">&#39;Walnut&#39;</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n\n<span class=\"c1\">%order_line(Order_Id, Product_Id, Ordered_Quantity)</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1002</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1003</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1004</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1004</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1005</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1006</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1007</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1007</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1008</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1008</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1009</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1009</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">).</span>\n<span class=\"nf\">order_line</span><span class=\"p\">(</span><span class=\"mi\">1010</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">).</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"list-all-customers\">List all customers</h2>\n\n<h4 id=\"sql\">SQL</h4>\n\n<div class=\"brush: SQL\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">CUSTOMER_t</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>1|Contemporary Casuals|1355 S Hines Blvd|Gainesville|FL|32601\n2|Value Furniture|15145 S.W. 17th St.|Plano|TX|75094\n3|Home Furnishings|1900 Allard Ave.|Albany|NY|12209\n4|Eastern Furniture|1925 Beltline Rd.|Carteret|NJ|07008\n5|Impressions|5585 Westcott Ct.|Sacramento|CA|94206\n6|Furniture Gallery|325 Flatiron Dr.|Boulder|CO|80514\n7|Period Furniture|394 Rainbow Dr.|Seattle|WA|97954\n8|Calfornia Classics|816 Peach Rd.|Santa Clara|CA|96915\n9|M and H Casual Furniture|3709 First Street|Clearwater|FL|34620\n10|Seminole Interiors|2400 Rocky Point Dr.|Seminole|FL|34646\n11|American Euro Lifestyles|2424 Missouri Ave N.|Prospect Park|NJ|07508\n12|Battle Creek Furniture|345 Capitol Ave. SW|Battle Creek|MI|49015\n13|Heritage Furnishings|66789 College Ave.|Carlisle|PA|17013\n14|Kaneohe Homes|112 Kiowai St.|Kaneohe|HI|96744\n15|Mountain Scenes|4132 Main Street|Ogden|UT|84403</code></pre>\n\n<h4 id=\"prolog\">Prolog</h4>\n\n<div class=\"brush: Prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">listing</span><span class=\"p\">(</span><span class=\"s s-Atom\">customer</span><span class=\"p\">).</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>customer(1, 'Contemporary Casuals', '1355 S Hines Blvd', 'Gainesville', 'FL', '32601').\ncustomer(2, 'Value Furniture', '15145 S.W. 17th St.', 'Plano', 'TX', '75094').\ncustomer(3, 'Home Furnishings', '1900 Allard Ave.', 'Albany', 'NY', '12209').\ncustomer(4, 'Eastern Furniture', '1925 Beltline Rd.', 'Carteret', 'NJ', '07008').\ncustomer(5, 'Impressions', '5585 Westcott Ct.', 'Sacramento', 'CA', '94206').\ncustomer(6, 'Furniture Gallery', '325 Flatiron Dr.', 'Boulder', 'CO', '80514').\ncustomer(7, 'Period Furniture', '394 Rainbow Dr.', 'Seattle', 'WA', '97954').\ncustomer(8, 'Calfornia Classics', '816 Peach Rd.', 'Santa Clara', 'CA', '96915').\ncustomer(9, 'M and H Casual Furniture', '3709 First Street', 'Clearwater', 'FL', '34620').\ncustomer(10, 'Seminole Interiors', '2400 Rocky Point Dr.', 'Seminole', 'FL', '34646').\ncustomer(11, 'American Euro Lifestyles', '2424 Missouri Ave N.', 'Prospect Park', 'NJ', '07508').\ncustomer(12, 'Battle Creek Furniture', '345 Capitol Ave. SW', 'Battle Creek', 'MI', '49015').\ncustomer(13, 'Heritage Furnishings', '66789 College Ave.', 'Carlisle', 'PA', '17013').\ncustomer(14, 'Kaneohe Homes', '112 Kiowai St.', 'Kaneohe', 'HI', '96744').\ncustomer(15, 'Mountain Scenes', '4132 Main Street', 'Ogden', 'UT', '84403').</code></pre>\n\n<h2 id=\"list-customers-by-name\">List customers by name</h2>\n\n<h4 id=\"sql\">SQL</h4>\n\n<div class=\"brush: SQL\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">CUSTOMER_t</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">Customer_Name</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>11|American Euro Lifestyles|2424 Missouri Ave N.|Prospect Park|NJ|07508\n12|Battle Creek Furniture|345 Capitol Ave. SW|Battle Creek|MI|49015\n8|Calfornia Classics|816 Peach Rd.|Santa Clara|CA|96915\n1|Contemporary Casuals|1355 S Hines Blvd|Gainesville|FL|32601\n4|Eastern Furniture|1925 Beltline Rd.|Carteret|NJ|07008\n6|Furniture Gallery|325 Flatiron Dr.|Boulder|CO|80514\n13|Heritage Furnishings|66789 College Ave.|Carlisle|PA|17013\n3|Home Furnishings|1900 Allard Ave.|Albany|NY|12209\n5|Impressions|5585 Westcott Ct.|Sacramento|CA|94206\n14|Kaneohe Homes|112 Kiowai St.|Kaneohe|HI|96744\n9|M and H Casual Furniture|3709 First Street|Clearwater|FL|34620\n15|Mountain Scenes|4132 Main Street|Ogden|UT|84403\n7|Period Furniture|394 Rainbow Dr.|Seattle|WA|97954\n10|Seminole Interiors|2400 Rocky Point Dr.|Seminole|FL|34646\n2|Value Furniture|15145 S.W. 17th St.|Plano|TX|75094</code></pre>\n\n<h2 id=\"list-customers-based-on-location\">List customers based on location</h2>\n\n<h4 id=\"sql\">SQL</h4>\n\n<div class=\"brush: SQL\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">CUSTOMER_t</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">Customer_State</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FL&#39;</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>1|Contemporary Casuals|1355 S Hines Blvd|Gainesville|FL|32601\n9|M and H Casual Furniture|3709 First Street|Clearwater|FL|34620\n10|Seminole Interiors|2400 Rocky Point Dr.|Seminole|FL|34646</code></pre>\n\n<h4 id=\"prolog\">Prolog</h4>\n\n<div class=\"brush: Prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">customer_state</span><span class=\"p\">([</span><span class=\"nv\">Id</span><span class=\"p\">,</span><span class=\"nv\">Name</span><span class=\"p\">,</span><span class=\"nv\">Addr</span><span class=\"p\">,</span><span class=\"nv\">City</span><span class=\"p\">,</span><span class=\"nv\">State</span><span class=\"p\">,</span><span class=\"nv\">Zip</span><span class=\"p\">],</span><span class=\"nv\">State</span><span class=\"p\">):-</span>\n    <span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"nv\">Id</span><span class=\"p\">,</span><span class=\"nv\">Name</span><span class=\"p\">,</span><span class=\"nv\">Addr</span><span class=\"p\">,</span><span class=\"nv\">City</span><span class=\"p\">,</span><span class=\"nv\">State</span><span class=\"p\">,</span><span class=\"nv\">Zip</span><span class=\"p\">).</span>\n\n<span class=\"nf\">bagof</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span><span class=\"nf\">customer_state</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span><span class=\"s s-Atom\">&#39;FL&#39;</span><span class=\"p\">),</span><span class=\"nv\">List</span><span class=\"p\">).</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>List = [[1, 'Contemporary Casuals', '1355 S Hines Blvd', 'Gainesville', 'FL', '32601'], [9, 'M and H Casual Furniture', '3709 First Street', 'Clearwater', 'FL', '34620'], [10, 'Seminole Interiors', '2400 Rocky Point Dr.', 'Seminole', 'FL', '34646']]</code></pre>\n\n<h2 id=\"list-customers-who-made-purchases-in-october\">List customers who made purchases in October</h2>\n\n<h4 id=\"sql\">SQL</h4>\n\n<div class=\"brush: SQL\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">CUSTOMER_t</span><span class=\"p\">.</span><span class=\"n\">Customer_Name</span><span class=\"p\">,</span> <span class=\"n\">ORDER_t</span><span class=\"p\">.</span><span class=\"n\">Order_Date</span>\n<span class=\"k\">FROM</span> <span class=\"n\">CUSTOMER_t</span>\n<span class=\"k\">INNER</span> <span class=\"k\">JOIN</span> <span class=\"n\">ORDER_t</span> <span class=\"k\">ON</span> <span class=\"n\">CUSTOMER_t</span><span class=\"p\">.</span><span class=\"n\">Customer_Id</span> <span class=\"o\">=</span> <span class=\"n\">ORDER_t</span><span class=\"p\">.</span><span class=\"n\">Customer_Id</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">ORDER_t</span><span class=\"p\">.</span><span class=\"n\">Order_Date</span> <span class=\"k\">LIKE</span> <span class=\"s1\">&#39;%Oct%&#39;</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>Contemporary Casuals|21/Oct/00\nCalfornia Classics|21/Oct/00\nMountain Scenes|22/Oct/00\nImpressions|22/Oct/00\nHome Furnishings|24/Oct/00\nValue Furniture|24/Oct/00\nAmerican Euro Lifestyles|27/Oct/00\nBattle Creek Furniture|30/Oct/00</code></pre>\n\n<h4 id=\"prolog\">Prolog</h4>\n\n<div class=\"brush: Prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">customer_month</span><span class=\"p\">(</span><span class=\"nv\">CustomerName</span><span class=\"p\">,</span> <span class=\"nv\">Order_Date</span><span class=\"p\">,</span> <span class=\"nv\">Month</span><span class=\"p\">):-</span>\n    <span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"nv\">CustomerID</span><span class=\"p\">,</span><span class=\"nv\">CustomerName</span><span class=\"p\">,</span><span class=\"k\">_</span><span class=\"p\">,</span><span class=\"k\">_</span><span class=\"p\">,</span><span class=\"k\">_</span><span class=\"p\">,</span><span class=\"k\">_</span><span class=\"p\">),</span>\n    <span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">,</span> <span class=\"nv\">Order_Date</span><span class=\"p\">,</span> <span class=\"nv\">CustomerID</span><span class=\"p\">),</span>\n    <span class=\"nf\">split_string</span><span class=\"p\">(</span><span class=\"nv\">Order_Date</span><span class=\"p\">,</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"nv\">Date</span><span class=\"p\">),</span>\n    <span class=\"nf\">nth1</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"nv\">Date</span><span class=\"p\">,</span><span class=\"nv\">Month</span><span class=\"p\">).</span>\n\n<span class=\"nf\">bagof</span><span class=\"p\">([</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Date</span><span class=\"p\">],</span><span class=\"nf\">customer_month</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Date</span><span class=\"p\">,</span> <span class=\"s2\">\"Oct\"</span><span class=\"p\">),</span><span class=\"nv\">L</span><span class=\"p\">).</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>List = [['Contemporary Casuals', '21/Oct/00'], ['Value Furniture', '24/Oct/00'], ['Home Furnishings', '24/Oct/00'], ['Impressions', '22/Oct/00'], ['Calfornia Classics', '21/Oct/00'], ['American Euro Lifestyles', '27/Oct/00'], ['Battle Creek Furniture', '30/Oct/00'], ['Mountain Scenes', '22/Oct/00']]</code></pre>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-11-07-project-euler-with-haskell-11-12.md" . unix) f post (u . "Project Euler problem 9 and 10, with Haskell") (? . 12) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/11/project-euler-problem-9-and-10-with-haskell.html" . unix) (u . "/2015/11/project-euler-problem-9-and-10-with-haskell.html") (u . "2015-11-07T00:00:00") (? . 9) (? . 11) (c (u . "Project Euler") c (u . "Haskell")) (u . "\n<h2 id=\"problem-11\">Problem 11</h2>\n\n<p>Not the cleanest implementation of this program however, it does work.</p>") #t (u . "\n<h2 id=\"problem-11\">Problem 11</h2>\n\n<p>Not the cleanest implementation of this program however, it does work.</p>\n<!-- more-->\n\n<p><code>ProjectEuler11.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem11 - Largest product in a grid\"</span>\n    <span class=\"n\">print</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">problem11</span><span class=\"p\">)</span>\n    \n<span class=\"nf\">problem11</span> <span class=\"ow\">=</span> <span class=\"p\">[(</span><span class=\"n\">maximum</span> <span class=\"n\">horizProd</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">vertiProd</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">diagFProd</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">diagBProd</span><span class=\"p\">)]</span>\n\n\n<span class=\"nf\">horizProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">product</span> <span class=\"p\">(</span><span class=\"n\">take</span> <span class=\"mi\">4</span> <span class=\"p\">(</span><span class=\"n\">drop</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"p\">)))</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">19</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">]]</span>\n<span class=\"nf\">vertiProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">19</span><span class=\"p\">]]</span>\n<span class=\"nf\">diagFProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">]]</span>\n<span class=\"nf\">diagBProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">]]</span>\n<span class=\"nf\">grid</span> <span class=\"ow\">=</span> <span class=\"p\">[[</span><span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">09</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">09</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">]]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-12\">Problem 12</h2>\n\n<p>Another really straight forward problem using infinite lists.</p>\n\n<p><code>ProjectEuler12.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem12 - Highly divisible triangular number\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem13</span>\n    \n\n<span class=\"nf\">problem13</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"n\">nums</span>\n\n<span class=\"nf\">nums</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">37107287533902102798797998220837590246510135740250</span><span class=\"p\">,</span>\n        <span class=\"mi\">46376937677490009712648124896970078050417018260538</span><span class=\"p\">,</span>\n        <span class=\"mi\">74324986199524741059474233309513058123726617309629</span><span class=\"p\">,</span>\n        <span class=\"mi\">91942213363574161572522430563301811072406154908250</span><span class=\"p\">,</span>\n        <span class=\"mi\">23067588207539346171171980310421047513778063246676</span><span class=\"p\">,</span>\n        <span class=\"mi\">89261670696623633820136378418383684178734361726757</span><span class=\"p\">,</span>\n        <span class=\"mi\">28112879812849979408065481931592621691275889832738</span><span class=\"p\">,</span>\n        <span class=\"mi\">44274228917432520321923589422876796487670272189318</span><span class=\"p\">,</span>\n        <span class=\"mi\">47451445736001306439091167216856844588711603153276</span><span class=\"p\">,</span>\n        <span class=\"mi\">70386486105843025439939619828917593665686757934951</span><span class=\"p\">,</span>\n        <span class=\"mi\">62176457141856560629502157223196586755079324193331</span><span class=\"p\">,</span>\n        <span class=\"mi\">64906352462741904929101432445813822663347944758178</span><span class=\"p\">,</span>\n        <span class=\"mi\">92575867718337217661963751590579239728245598838407</span><span class=\"p\">,</span>\n        <span class=\"mi\">58203565325359399008402633568948830189458628227828</span><span class=\"p\">,</span>\n        <span class=\"mi\">80181199384826282014278194139940567587151170094390</span><span class=\"p\">,</span>\n        <span class=\"mi\">35398664372827112653829987240784473053190104293586</span><span class=\"p\">,</span>\n        <span class=\"mi\">86515506006295864861532075273371959191420517255829</span><span class=\"p\">,</span>\n        <span class=\"mi\">71693888707715466499115593487603532921714970056938</span><span class=\"p\">,</span>\n        <span class=\"mi\">54370070576826684624621495650076471787294438377604</span><span class=\"p\">,</span>\n        <span class=\"mi\">53282654108756828443191190634694037855217779295145</span><span class=\"p\">,</span>\n        <span class=\"mi\">36123272525000296071075082563815656710885258350721</span><span class=\"p\">,</span>\n        <span class=\"mi\">45876576172410976447339110607218265236877223636045</span><span class=\"p\">,</span>\n        <span class=\"mi\">17423706905851860660448207621209813287860733969412</span><span class=\"p\">,</span>\n        <span class=\"mi\">81142660418086830619328460811191061556940512689692</span><span class=\"p\">,</span>\n        <span class=\"mi\">51934325451728388641918047049293215058642563049483</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467221648435076201727918039944693004732956340691</span><span class=\"p\">,</span>\n        <span class=\"mi\">15732444386908125794514089057706229429197107928209</span><span class=\"p\">,</span>\n        <span class=\"mi\">55037687525678773091862540744969844508330393682126</span><span class=\"p\">,</span>\n        <span class=\"mi\">18336384825330154686196124348767681297534375946515</span><span class=\"p\">,</span>\n        <span class=\"mi\">80386287592878490201521685554828717201219257766954</span><span class=\"p\">,</span>\n        <span class=\"mi\">78182833757993103614740356856449095527097864797581</span><span class=\"p\">,</span>\n        <span class=\"mi\">16726320100436897842553539920931837441497806860984</span><span class=\"p\">,</span>\n        <span class=\"mi\">48403098129077791799088218795327364475675590848030</span><span class=\"p\">,</span>\n        <span class=\"mi\">87086987551392711854517078544161852424320693150332</span><span class=\"p\">,</span>\n        <span class=\"mi\">59959406895756536782107074926966537676326235447210</span><span class=\"p\">,</span>\n        <span class=\"mi\">69793950679652694742597709739166693763042633987085</span><span class=\"p\">,</span>\n        <span class=\"mi\">41052684708299085211399427365734116182760315001271</span><span class=\"p\">,</span>\n        <span class=\"mi\">65378607361501080857009149939512557028198746004375</span><span class=\"p\">,</span>\n        <span class=\"mi\">35829035317434717326932123578154982629742552737307</span><span class=\"p\">,</span>\n        <span class=\"mi\">94953759765105305946966067683156574377167401875275</span><span class=\"p\">,</span>\n        <span class=\"mi\">88902802571733229619176668713819931811048770190271</span><span class=\"p\">,</span>\n        <span class=\"mi\">25267680276078003013678680992525463401061632866526</span><span class=\"p\">,</span>\n        <span class=\"mi\">36270218540497705585629946580636237993140746255962</span><span class=\"p\">,</span>\n        <span class=\"mi\">24074486908231174977792365466257246923322810917141</span><span class=\"p\">,</span>\n        <span class=\"mi\">91430288197103288597806669760892938638285025333403</span><span class=\"p\">,</span>\n        <span class=\"mi\">34413065578016127815921815005561868836468420090470</span><span class=\"p\">,</span>\n        <span class=\"mi\">23053081172816430487623791969842487255036638784583</span><span class=\"p\">,</span>\n        <span class=\"mi\">11487696932154902810424020138335124462181441773470</span><span class=\"p\">,</span>\n        <span class=\"mi\">63783299490636259666498587618221225225512486764533</span><span class=\"p\">,</span>\n        <span class=\"mi\">67720186971698544312419572409913959008952310058822</span><span class=\"p\">,</span>\n        <span class=\"mi\">95548255300263520781532296796249481641953868218774</span><span class=\"p\">,</span>\n        <span class=\"mi\">76085327132285723110424803456124867697064507995236</span><span class=\"p\">,</span>\n        <span class=\"mi\">37774242535411291684276865538926205024910326572967</span><span class=\"p\">,</span>\n        <span class=\"mi\">23701913275725675285653248258265463092207058596522</span><span class=\"p\">,</span>\n        <span class=\"mi\">29798860272258331913126375147341994889534765745501</span><span class=\"p\">,</span>\n        <span class=\"mi\">18495701454879288984856827726077713721403798879715</span><span class=\"p\">,</span>\n        <span class=\"mi\">38298203783031473527721580348144513491373226651381</span><span class=\"p\">,</span>\n        <span class=\"mi\">34829543829199918180278916522431027392251122869539</span><span class=\"p\">,</span>\n        <span class=\"mi\">40957953066405232632538044100059654939159879593635</span><span class=\"p\">,</span>\n        <span class=\"mi\">29746152185502371307642255121183693803580388584903</span><span class=\"p\">,</span>\n        <span class=\"mi\">41698116222072977186158236678424689157993532961922</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467957194401269043877107275048102390895523597457</span><span class=\"p\">,</span>\n        <span class=\"mi\">23189706772547915061505504953922979530901129967519</span><span class=\"p\">,</span>\n        <span class=\"mi\">86188088225875314529584099251203829009407770775672</span><span class=\"p\">,</span>\n        <span class=\"mi\">11306739708304724483816533873502340845647058077308</span><span class=\"p\">,</span>\n        <span class=\"mi\">82959174767140363198008187129011875491310547126581</span><span class=\"p\">,</span>\n        <span class=\"mi\">97623331044818386269515456334926366572897563400500</span><span class=\"p\">,</span>\n        <span class=\"mi\">42846280183517070527831839425882145521227251250327</span><span class=\"p\">,</span>\n        <span class=\"mi\">55121603546981200581762165212827652751691296897789</span><span class=\"p\">,</span>\n        <span class=\"mi\">32238195734329339946437501907836945765883352399886</span><span class=\"p\">,</span>\n        <span class=\"mi\">75506164965184775180738168837861091527357929701337</span><span class=\"p\">,</span>\n        <span class=\"mi\">62177842752192623401942399639168044983993173312731</span><span class=\"p\">,</span>\n        <span class=\"mi\">32924185707147349566916674687634660915035914677504</span><span class=\"p\">,</span>\n        <span class=\"mi\">99518671430235219628894890102423325116913619626622</span><span class=\"p\">,</span>\n        <span class=\"mi\">73267460800591547471830798392868535206946944540724</span><span class=\"p\">,</span>\n        <span class=\"mi\">76841822524674417161514036427982273348055556214818</span><span class=\"p\">,</span>\n        <span class=\"mi\">97142617910342598647204516893989422179826088076852</span><span class=\"p\">,</span>\n        <span class=\"mi\">87783646182799346313767754307809363333018982642090</span><span class=\"p\">,</span>\n        <span class=\"mi\">10848802521674670883215120185883543223812876952786</span><span class=\"p\">,</span>\n        <span class=\"mi\">71329612474782464538636993009049310363619763878039</span><span class=\"p\">,</span>\n        <span class=\"mi\">62184073572399794223406235393808339651327408011116</span><span class=\"p\">,</span>\n        <span class=\"mi\">66627891981488087797941876876144230030984490851411</span><span class=\"p\">,</span>\n        <span class=\"mi\">60661826293682836764744779239180335110989069790714</span><span class=\"p\">,</span>\n        <span class=\"mi\">85786944089552990653640447425576083659976645795096</span><span class=\"p\">,</span>\n        <span class=\"mi\">66024396409905389607120198219976047599490197230297</span><span class=\"p\">,</span>\n        <span class=\"mi\">64913982680032973156037120041377903785566085089252</span><span class=\"p\">,</span>\n        <span class=\"mi\">16730939319872750275468906903707539413042652315011</span><span class=\"p\">,</span>\n        <span class=\"mi\">94809377245048795150954100921645863754710598436791</span><span class=\"p\">,</span>\n        <span class=\"mi\">78639167021187492431995700641917969777599028300699</span><span class=\"p\">,</span>\n        <span class=\"mi\">15368713711936614952811305876380278410754449733078</span><span class=\"p\">,</span>\n        <span class=\"mi\">40789923115535562561142322423255033685442488917353</span><span class=\"p\">,</span>\n        <span class=\"mi\">44889911501440648020369068063960672322193204149535</span><span class=\"p\">,</span>\n        <span class=\"mi\">41503128880339536053299340368006977710650566631954</span><span class=\"p\">,</span>\n        <span class=\"mi\">81234880673210146739058568557934581403627822703280</span><span class=\"p\">,</span>\n        <span class=\"mi\">82616570773948327592232845941706525094512325230608</span><span class=\"p\">,</span>\n        <span class=\"mi\">22918802058777319719839450180888072429661980811197</span><span class=\"p\">,</span>\n        <span class=\"mi\">77158542502016545090413245809786882778948721859617</span><span class=\"p\">,</span>\n        <span class=\"mi\">72107838435069186155435662884062257473692284509516</span><span class=\"p\">,</span>\n        <span class=\"mi\">20849603980134001723930671666823555245252804609722</span><span class=\"p\">,</span>\n        <span class=\"mi\">53503534226472524250874054075591789781264330331690</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-10-mcs511-reading-assignment-1-can-we-make-operation-systems-reliable-and-secure.md" . unix) f post (u . "MCS521 Reading Assignment 1 - Can We Make Operating Systems Reliable and Secure?") (? . 0) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/mcs521-reading-assignment-1-can-we-make-operating-systems-reliable-and-secure.html" . unix) (u . "/2017/09/mcs521-reading-assignment-1-can-we-make-operating-systems-reliable-and-secure.html") (u . "2017-09-10T00:00:00") (? . 1) (? . 2) (c (u . "Reading Assignment") c (u . "Cybersecurity") c (u . "MCS511") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"reading-assignment-1\">Reading Assignment 1</h2>\n\n<p><a href=\"https://pdfs.semanticscholar.org/ee0c/f2be3c502575886abe01765f2e26f0a92713.pdf\">Can We Make Operating Systems Reliable and Secure?</a></p>") #t (u . "\n<h2 id=\"reading-assignment-1\">Reading Assignment 1</h2>\n\n<p><a href=\"https://pdfs.semanticscholar.org/ee0c/f2be3c502575886abe01765f2e26f0a92713.pdf\">Can We Make Operating Systems Reliable and Secure?</a></p>\n<!-- more-->\n\n<p>I feel that the author did a very good job of explaining the issues with current OS design and highlighting how a microkernel can address those issues. I have actually seen a lot of these same issues before when I was looking into Erlang programming. A design goal for Erlang software is fault recovery and tolerance. Erlang is designed for telecommunications work so it initially had the same requirements for uptime and recovery that the author is looking for. However Erlang is a general purpose language and the author wants to bring these concepts into the kernel arena.</p>\n\n<p>I honestly think that it would be worthwhile for many companies to consider transferring to a microkernel model for their business products. While many small IoT devices run their own dedicated kernel, some are running a version of Linux or Windows 10 IoT. These OSes are overkill for many products and as the article stated, it opens up the product to many more security vulnerabilities than it should. As a specific example we know for the last black hat that many voting machines are actually run on applications running on top of Windows systems. These are the perfect example of a system where there should be clear boundaries between permissions.</p>\n\n<p>The major issue I see with most companies implementing better security through a microkernel is legacy software. Legacy systems make up a significant portion of code that is currently being run. There are countless stories of programmers being tasked with maintenance or transition of these systems. The business side of the cost benefit analysis is weighted more in favor of fixing issues in the short term. The outlay of resources required to transition a decent sized application to a microkernel isn&rsquo;t economically feasible for many companies. Related to this is that since no one is really doing this type of work finding people who can is more difficult and costly that it should be.</p>\n\n<p>Overall I agree with the desire to move more systems to a secure microkernel OS, I just recognize that there are major roadblocks that must be addressed on the business side of the equation.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab5.md" . unix) f post (u . "CS231 Lab4") (? . 31) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs231-lab4.html" . unix) (u . "/2017/02/cs231-lab4.html") (u . "2017-02-06T00:00:00") (? . 3) (? . 29) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>This asm program for the MIPS processor takes an array of numbers and returns it in reverse order.</p>") #t (u . "\n<p>This asm program for the MIPS processor takes an array of numbers and returns it in reverse order.</p>\n<!-- more-->\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">## Henry Brooks</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">arry:</span>\t\t<span class=\"na\">.word</span>\t\t<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span>\n\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: \\tThis program asks a user how many numbers they\\n\\t\\t\\tadd to an array, then returns the array in reverse order\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              \\tHenry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       \\t02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter the number of elements:\\n\"</span>\n<span class=\"nl\">query2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter number \"</span>\n<span class=\"nl\">query3:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\":\\t\"</span>\n<span class=\"nl\">badcount1:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Error array can&#39;t have more than 10 elements, try again!!\\n\"</span>\n<span class=\"nl\">badcount2:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Error array can&#39;t have less than 1 element\\n\"</span>\n<span class=\"nl\">return:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The content of array in reverse order is:\\n\"</span>\n\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print query</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query1</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"nl\">main2:</span>\n<span class=\"c\">################### Take user input</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Check that input is valid</span>\n\t\t<span class=\"nf\">ble</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">badInputLo</span>\n\t\t<span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n\t\t<span class=\"nf\">bgt</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">badInputHi</span>\t\t\t\n\n<span class=\"c\">################## If input is good set $s0 to $v0</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t<span class=\"c\"># lengthOfArray</span>\n\n<span class=\"c\">################### Initialize $s1 to 0</span>\n\t\t<span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t<span class=\"c\"># counter</span>\n\t\t<span class=\"no\">lw</span>\t\t\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">arry</span>\t\t<span class=\"c\"># pointer</span>\n\t\t\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else array[count] = input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">read_loop:</span>\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\t\t<span class=\"c\"># pointer is at end</span>\n\t\t\n\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query2</span>\t\t<span class=\"c\"># load \"enter number \" message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print intger</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load count</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># increment for printing</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query3</span>\t\t<span class=\"c\"># load \":\\t\"</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t\t<span class=\"c\"># load user input program</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># get user input, (cin)</span>\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$t7</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n\t\t\n\t\t<span class=\"nf\">sw</span>\t\t\t<span class=\"no\">$t7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t\t<span class=\"nf\">syscall</span>\t\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t\t<span class=\"nf\">j</span> \t\t\t<span class=\"no\">read_loop</span>\t\t\n\t\t\n\n<span class=\"c\">#################### Loop to read off the elements of the array</span>\n<span class=\"c\">#print_loop:</span>\n<span class=\"c\">#\t\tbeq\t\t\t$t2, $0, end\t# check array end</span>\n<span class=\"c\">#\t</span>\n<span class=\"c\">#\t\tlw\t\t\t$a0, ($t1)</span>\n<span class=\"c\">#\t\tli\t\t\t$v0, 1</span>\n<span class=\"c\">#\t\tsyscall</span>\n<span class=\"c\">#\t</span>\n<span class=\"c\">#\t\tli\t\t\t$v0, 4</span>\n<span class=\"c\">#\t\tsyscall</span>\n<span class=\"c\">#\t</span>\n<span class=\"c\">#\t\taddi\t\t\t$t2, $t2, -1</span>\n<span class=\"c\">#\t\taddi\t\t\t$t1, $t1, -4</span>\n<span class=\"c\">#\t\tj\tprint_loop\t# ret</span>\n\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badInputLo:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badInputHi:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\t\t\n<span class=\"c\">#################### exit from program</span>\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">return</span>\t\t<span class=\"c\"># load answer message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print answer message</span>\n\t\t\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load sum</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print sum</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs231-lab2.md" . unix) f post (u . "CS231 Labs") (? . 16) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs231-labs.html" . unix) (u . "/2017/02/cs231-labs.html") (u . "2017-02-03T00:00:00") (? . 14) (? . 3) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>I am currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS231</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> which covers assembly programming for the <a href=\"https://en.wikipedia.org/wiki/MIPS_instruction_set\">MIPS</a> architecture.</p>") #t (u . "\n<p>I am currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS231</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> which covers assembly programming for the <a href=\"https://en.wikipedia.org/wiki/MIPS_instruction_set\">MIPS</a> architecture.</p>\n<!-- more-->\n\n<p>We have been using <a href=\"http://courses.missouristate.edu/KenVollmar/mars/\">MARS</a> as the IDE for the class and it has been working out well so far.</p>\n\n<p>My second assignment for the class was to write a simple calculator that would calculate the sum, difference, product, quotient, and remainder of two numbers.</p>\n\n<p>One issue that I have been having with the language is that it seems to have a lot of boilerplate that needs to be repeated. I&rsquo;m thinking that I will write a helper function or macro to help with some of the repeated code.</p>\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab2 basic calculator</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"=============================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: This program is written to mimic a very basic calculator\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              Henry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       02/01/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"=============================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Please input two numbers?\\n\"</span>\n<span class=\"nl\">sum:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Sum is: \"</span>\n<span class=\"nl\">dif:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Difference is: \"</span>\n<span class=\"nl\">prod:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Product is: \"</span> \n<span class=\"no\">quot</span><span class=\"p\">:</span>\t\t<span class=\"no\">.asciiz</span> \t<span class=\"s\">\"Quotient is: \"</span>\n<span class=\"nl\">remain:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Remainder is: \"</span>\n\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\t\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print question </span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Take two inputs from the user</span>\n<span class=\"c\">################### and assign to $s0 and $s1</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t<span class=\"c\">#load take input program</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#take first input</span>\n\t\t<span class=\"no\">add</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\">#store first input in $s0</span>\n\t\t\t\t\t\n\t\t<span class=\"no\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t<span class=\"c\">#load take input program again</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#take second input</span>\n\t\t<span class=\"no\">add</span> \t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\">#store second input in $s1</span>\n\n<span class=\"c\">################## Print newline</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\n<span class=\"c\">################### Print sum</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">sum</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">add</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#add first and second input</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print difference</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">dif</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">sub</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#subtract second input from first</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print product\t</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">prod</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">mult</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#multiple first and second</span>\n\t\t<span class=\"no\">mflo</span> \t\t\t<span class=\"no\">$a0</span>\t\t<span class=\"c\">#assign the product to the argument</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print quotient</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">quot</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">div</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#divide the first by the second</span>\n\t\t<span class=\"no\">mflo</span> \t\t\t<span class=\"no\">$a0</span>\t\t<span class=\"c\">#assign the quotient to the argument</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print remainder</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">remain</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">div</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#divide first and second</span>\n\t\t<span class=\"no\">mfhi</span> \t\t\t<span class=\"no\">$a0</span>\t\t<span class=\"c\">#assign the remainder to the argument</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### EOF</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-24-daily-desmos-24apr-advanced.md" . unix) f post (u . "Daily Desmos - 24 April - Advanced Hyperbola") (? . 23) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/daily-desmos-24-april-advanced-hyperbola.html" . unix) (u . "/2015/04/daily-desmos-24-april-advanced-hyperbola.html") (u . "2015-04-24T00:00:00") (? . 21) (? . 24) (c (u . "Daily Desmos") c (u . "20% Project") c (u . "Desmos") c (u . "Author: Henry Brooks")) (u . "\n<div class=\"figure\"><img src=\"/img/dd-24apr-adv-a.gif\" alt=\"1\" />\n <p class=\"caption\">1</p></div>") #t (u . "\n<div class=\"figure\"><img src=\"/img/dd-24apr-adv-a.gif\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n<!-- more-->\n\n<div class=\"figure\"><img src=\"/img/dd-24apr-adv-b.gif\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<p><a href=\"http://http://dailydesmos.com/2015/04/24/warping-hyperbola-1-advanced/\">Daily Desmos</a> posted this challenge on the 24th of April.</p>\n\n<p>My solution is a little off however, it does hit on most of the important aspects. You can check out my version <a href=\"https://www.desmos.com/calculator/j4zcbsdwwi\">here</a>.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-02-16-20-project-csusm-credential-program.md" . unix) f post (u . "20% Project - CSUSM credential program") (? . 4) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/02/20-project-csusm-credential-program.html" . unix) (u . "/2015/02/20-project-csusm-credential-program.html") (u . "2015-02-16T00:00:00") (? . 5) (? . 6) (c (u . "Teaching Credential") c (u . "20% Project") c (u . "Author: Henry Brooks")) (u . "\n<p>For my 20% Project I am thinking about expanding my coding skills. I took a basic computer programming class with C++ during college and I want to expand that knowledge.</p>") #t (u . "\n<p>For my 20% Project I am thinking about expanding my coding skills. I took a basic computer programming class with C++ during college and I want to expand that knowledge.</p>\n<!-- more-->\n\n<p>I&rsquo;ve been able to solve around 10 of the problems on <a href=\"https://projecteuler.net/\">Project Euler</a> using the coding skills that I already know and some Combinatoric trick however, I have come to recognize that to move any further I am going to need to learn how to actually write complex computer code utilizing arrays and date structures. I haven&rsquo;t settled on a specific language to learn for this project, however I would like to finish the first 100 problems on the site by the end of the semester.</p>\n\n<p>I find that many of the problems I have already solved have a range of possilble solutions ranging from brute force to elegent mathematic proofs. I feel that going through these problems will give me a greater appreciation for the diverse methods students use to solve mathematical problems in my class. Understanding that a problem can have more than one valid solution and being able to articulate how different solution methods can arrive at the same answer is an important skill that we need as teachers. Hopefully this project will assist me in recognizing and articulating that to students.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-15-cs231-test-question.md" . unix) f post (u . "CS231 Assignment1") (? . 7) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/cs231-assignment1.html" . unix) (u . "/2017/03/cs231-assignment1.html") (u . "2017-03-15T00:00:00") (? . 10) (? . 8) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>I just took a test where I was asked to hand write the code for the following program. As soon as I got out of class I coded up my work to make sure that it worked.</p>") #t (u . "\n<p>I just took a test where I was asked to hand write the code for the following program. As soon as I got out of class I coded up my work to make sure that it worked.</p>\n<!-- more-->\n\n<p>I found that I forgot a lot of little helper functions, like printing spaces between array elements, however I feel that the overall code was correct.</p>\n\n<p>The design spec for the problem was to create a program that would ask the user to input data into two arrays. You were then supposed to create a third array that was made by adding or subtracting the values of the two initial arrays based on the index number of the element.</p>\n\n<p><code>C[i] = A[i] - B[i]</code>, if <code>i</code> is odd, else <code>C[i] = A[i] + B[i]</code></p>\n\n<p>To finish the program off you print the new array.</p>\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"na\">.data</span>\n<span class=\"nl\">A:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">B:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">C:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">space:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\" \"</span>\n<span class=\"nl\">nl:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\"\\n\"</span>\n\n<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">A</span>\t\t<span class=\"c\"># save pointers to A, B, C</span>\n\t<span class=\"no\">la</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">B</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">C</span>\n\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass pointer to Create</span>\n\t<span class=\"no\">jal</span>\t<span class=\"no\">Create</span>\n\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Create</span>\n\t\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Create_Array_C</span>\n\t\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\t\n\t\n<span class=\"nl\">exit:</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n\t<span class=\"nf\">syscall</span>\n\t\n<span class=\"c\">#-------</span>\n<span class=\"nl\">Create:</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\n\t\n<span class=\"nl\">Create_Loop:</span>\n\t<span class=\"nf\">beq</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Create_Done</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t<span class=\"nf\">syscall</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t\t\n\t<span class=\"nf\">sw</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n\t<span class=\"nf\">j</span>\t<span class=\"no\">Create_Loop</span>\n\t\n<span class=\"nl\">Create_Done:</span>\n\t<span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\t\n<span class=\"c\">#-------</span>\n<span class=\"nl\">Print:</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\n<span class=\"nl\">Print_Loop:</span>\n\t<span class=\"nf\">beq</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Print_Done</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t<span class=\"nf\">syscall</span>\n\t\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">space</span>\n\t<span class=\"nf\">syscall</span>\n\t\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n\t<span class=\"nf\">j</span>\t<span class=\"no\">Print_Loop</span>\n\t\n<span class=\"nl\">Print_Done:</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t<span class=\"nf\">syscall</span>\n\t<span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\t\n<span class=\"c\">#------</span>\n<span class=\"nl\">Create_Array_C:</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$a1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$a2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\n<span class=\"nl\">Create_Array_C_Loop:</span>\n\t<span class=\"nf\">beq</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Create_Array_C_Done</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t<span class=\"nf\">sub</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"no\">$t5</span>\n\t<span class=\"nf\">sw</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"no\">$t5</span>\n\t<span class=\"nf\">sw</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">2</span>\n\t<span class=\"nf\">j</span>\t<span class=\"no\">Create_Array_C_Loop</span>\n\t\t\n<span class=\"nl\">Create_Array_C_Done:</span>\n\t<span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-24-project-euler-with-haskell-8.md" . unix) f post (u . "Project Euler problem 8 with Haskell") (? . 34) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/10/project-euler-problem-8-with-haskell.html" . unix) (u . "/2015/10/project-euler-problem-8-with-haskell.html") (u . "2015-10-24T00:00:00") (? . 35) (? . 9) (c (u . "Project Euler") c (u . "Haskell") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"problem-8\">Problem 8</h2>\n\n<p>This problem actually wasn&rsquo;t as bad as I originally thought it would be.</p>") #t (u . "\n<h2 id=\"problem-8\">Problem 8</h2>\n\n<p>This problem actually wasn&rsquo;t as bad as I originally thought it would be.</p>\n<!-- more-->\n\n<p><code>ProjectEuler8.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem8 - Largest product in a series\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem8</span>\n    \n<span class=\"c1\">--Largest product in a series</span>\n<span class=\"nf\">problem8</span> <span class=\"ow\">=</span> <span class=\"n\">maximum</span> <span class=\"n\">listOfProducts</span>\n\n<span class=\"nf\">stringToList</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n<span class=\"nf\">stringToList</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Char</span><span class=\"p\">])</span> <span class=\"n\">n</span>\n\n<span class=\"nf\">listOfProducts</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"n\">product</span> <span class=\"n\">groupedInts</span>\n\n<span class=\"nf\">groupedInts</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">take</span> <span class=\"mi\">13</span> <span class=\"p\">(</span><span class=\"n\">drop</span> <span class=\"n\">x</span> <span class=\"n\">listOfInts</span><span class=\"p\">)))</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"p\">)]</span>\n\n<span class=\"nf\">listOfInts</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">read</span><span class=\"ow\">::</span><span class=\"kt\">String</span><span class=\"ow\">-&gt;</span><span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"n\">listOfStrings</span>\n\n<span class=\"nf\">listOfStrings</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">stringToList</span> <span class=\"n\">largeString</span><span class=\"p\">)</span>\n\n<span class=\"nf\">largeString</span> <span class=\"ow\">=</span> <span class=\"s\">\"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I&rsquo;m sure that there are better ways to go about solving this problem. I know that the <code>String</code> data type is stored as a list of <code>Char</code> type, so I should have been able to convert immediately from <code>String</code> to <code>[Int]</code> with a <code>map</code> function. Unfortunately I wasn&rsquo;t able to get this conversion to work so I had to take extra steps to convert the <code>String</code> to <code>[String]</code>.</p>\n\n<p>Once I had a list of <code>Int</code> it was rather straight forward to create groups of 13 integers and <code>map</code> <code>product</code> over them.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-11-asm-dsl.md" . unix) f post (u . "ASM-DSL") (? . 10) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/asm-dsl.html" . unix) (u . "/2017/03/asm-dsl.html") (u . "2017-03-11T00:00:00") (? . 30) (? . 7) (c (u . "CS231") c (u . "Assembly") c (u . "DSL") c (u . "Author: Henry Brooks")) (u . "\n<p>I have been thinking about all of the boilerplate code that I keep writing in my assembly class and I decide to start looking into creating a simple <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> to assist with my code writing.</p>\n\n<p>Mostly I am looking to simplify code blocks that have easy <code>c++</code> analogs. Specifically <code>cin</code>, <code>cout</code>, and assignment (<code>=</code>).</p>") #t (u . "\n<p>I have been thinking about all of the boilerplate code that I keep writing in my assembly class and I decide to start looking into creating a simple <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> to assist with my code writing.</p>\n\n<p>Mostly I am looking to simplify code blocks that have easy <code>c++</code> analogs. Specifically <code>cin</code>, <code>cout</code>, and assignment (<code>=</code>).</p>\n<!-- more-->\n\n<p>Currently I am writing code like this</p>\n\n<p><code>example.asm</code></p>\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"na\">...</span>\n<span class=\"c\">#------ cin &lt;&lt; $s0</span>\n<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t<span class=\"nf\">syscall</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">#------ $s1 = $s0</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">#------ cout &lt;&lt; $s1</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">syscall</span>\n<span class=\"na\">...</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To get results for code like this in c++</p>\n\n<p><code>example.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">...</span>\n<span class=\"kt\">int</span> <span class=\"n\">s0</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n<span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s0</span><span class=\"p\">;</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">s0</span><span class=\"p\">;</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n<span class=\"p\">...</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I recognize that there are some actions that need a full compiler to implement however, I think that I can implement this much in typed/racket with what I already know. I&rsquo;m choosing to use typed/racket because I want to experiment with using it and I think it will come in useful if I continue to expand the scope of the code.</p>\n\n<p><code>ASM-DSL.rkt</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">typed/racket</span>\n\n<span class=\"c1\">;; Save register values</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">func</span> <span class=\"s2\">\"$v0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">return</span> <span class=\"s2\">\"$v0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">input</span> <span class=\"s2\">\"$s0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">arg</span> <span class=\"s2\">\"$a0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">zero</span> <span class=\"s2\">\"$0\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Buildin MIPS instructions</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">comment</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._display))\" style=\"color: inherit\">display</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"#------ \"</span> <span class=\"n\">s</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">z</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._display))\" style=\"color: inherit\">display</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">add</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span>\n                          <span class=\"n\">x</span> <span class=\"s2\">\", \"</span>\n                          <span class=\"n\">y</span> <span class=\"s2\">\", \"</span>\n                          <span class=\"n\">z</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">li</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Integer))\" style=\"color: inherit\">Integer</a></span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._display))\" style=\"color: inherit\">display</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">li</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span>\n                          <span class=\"n\">x</span> <span class=\"s2\">\", \"</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._number-~3estring))\" style=\"color: inherit\">number-&gt;string</a></span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._display))\" style=\"color: inherit\">display</a></span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">syscall</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Macros I built</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">set-reg</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">zero</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">cout-int</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"n\">comment</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"cout &lt;&lt; \"</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">li</span> <span class=\"n\">func</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">set-reg</span> <span class=\"n\">arg</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._display))\" style=\"color: inherit\">display</a></span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">cin-int</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"n\">comment</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"cin &lt;&lt; \"</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">li</span> <span class=\"n\">func</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add</span> <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._display))\" style=\"color: inherit\">display</a></span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Mips code</span>\n<span class=\"p\">(</span><span class=\"n\">cin-int</span> <span class=\"s2\">\"$s0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">set-reg</span> <span class=\"s2\">\"$s1\"</span> <span class=\"s2\">\"$s0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">cout-int</span> <span class=\"s2\">\"$s1\"</span><span class=\"p\">)</span> \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>output.asm</code></p>\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">#------ cin &lt;&lt; $s0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t<span class=\"nf\">syscall</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n<span class=\"c\">#------ cout &lt;&lt; $s1</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">syscall</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-25-cs211-lab1-program1.md" . unix) f post (u . "CS211 Lab1 Program1 in Racket") (? . 13) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/01/cs211-lab1-program1-in-racket.html" . unix) (u . "/2017/01/cs211-lab1-program1-in-racket.html") (u . "2017-01-25T00:00:00") (? . 11) (? . 15) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<p>I&rsquo;m currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS211</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> and I thought it would be interesting to try re-writing the labs in <a href=\"https://racket-lang.org\">Racket</a> after I submit the work in class. I figure that trying to solve the same problem with two different languages might help me to better understand the material and give me another excuse to keep messing around with Racket.</p>") #t (u . "\n<p>I&rsquo;m currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS211</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> and I thought it would be interesting to try re-writing the labs in <a href=\"https://racket-lang.org\">Racket</a> after I submit the work in class. I figure that trying to solve the same problem with two different languages might help me to better understand the material and give me another excuse to keep messing around with Racket.</p>\n<!-- more-->\n\n<h2 id=\"program-1\">Program 1</h2>\n\n<p>Your favorite shoe store is having a sale – all pairs of shoes are <code>35%</code> off! Write a program that reads shoe prices in stock at the local store from an input file, shoe.txt. Each row in the file contains a shoe serial number and price. Calculate the sale price of every pair of shoes, and what the final cost of the shoes is when the sales tax is applied to the discounted price. The calculated data must be saved in an output file, shoeSale.txt.</p>\n\n<p>You MUST use a named constant for both the tax rate (<code>8.5%</code>) and discount rate (<code>35%</code>). Since the results displayed are monetary values, your output must be displayed with two decimal places of precision. Be sure decimals “line up” when you output the information.</p>\n\n<p><code>shoe.txt</code></p>\n\n<pre><code>234019 75.00\n234490 124.99\n347269 50.00\n239801 149.99\n487241 99.99\n982111 175.00}</code></pre>\n\n<p><code>shoeSale.txt</code></p>\n\n<pre><code>234019 52.89\n234490 88.15\n347269 35.26\n239801 105.78\n487241 70.51\n982111 123.41}</code></pre>\n\n<p><code>Lab1_Program1.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iomanip&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// init constants</span>\n<span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">TAX_RATE</span> <span class=\"o\">=</span> <span class=\"mf\">0.085</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">DISCOUNT_RATE</span> <span class=\"o\">=</span> <span class=\"mf\">0.35</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// initialize files</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"shoe.txt\"</span><span class=\"p\">);</span>\n  \n  <span class=\"n\">ofstream</span> <span class=\"n\">outputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">outputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"shoeSales.txt\"</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// init variables</span>\n  <span class=\"kt\">int</span> <span class=\"n\">serialNumber</span><span class=\"p\">;</span>\n  <span class=\"kt\">double</span> <span class=\"n\">price</span><span class=\"p\">,</span>\n         <span class=\"n\">discount</span><span class=\"p\">,</span>\n\t <span class=\"n\">discountedPrice</span><span class=\"p\">,</span>\n\t <span class=\"n\">saleTax</span><span class=\"p\">,</span>\n\t <span class=\"k\">final</span><span class=\"p\">;</span>\n  \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Pull info off file</span>\n      <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">serialNumber</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">price</span><span class=\"p\">;</span>\n      \n      <span class=\"c1\">// Convert price to final price</span>\n      <span class=\"n\">discount</span> <span class=\"o\">=</span> <span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"n\">DISCOUNT_RATE</span><span class=\"p\">;</span>\n      <span class=\"n\">discountedPrice</span> <span class=\"o\">=</span> <span class=\"n\">price</span> <span class=\"o\">-</span> <span class=\"n\">discount</span><span class=\"p\">;</span>\n      <span class=\"n\">saleTax</span> <span class=\"o\">=</span> <span class=\"n\">discountedPrice</span> <span class=\"o\">*</span> <span class=\"n\">TAX_RATE</span><span class=\"p\">;</span>\n      <span class=\"k\">final</span> <span class=\"o\">=</span> <span class=\"n\">discountedPrice</span> <span class=\"o\">+</span> <span class=\"n\">saleTax</span><span class=\"p\">;</span>\n      \n      <span class=\"c1\">// Output final serialNumber and price to file</span>\n      <span class=\"n\">outputFile</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">serialNumber</span>\n                 <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                 <span class=\"o\">&lt;&lt;</span> <span class=\"n\">fixed</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">showpoint</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">right</span> \n                 <span class=\"o\">&lt;&lt;</span> <span class=\"k\">final</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// Close the file</span>\n    <span class=\"n\">outputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Unable to open file\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.rkt</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">TAX_RATE</span> <span class=\"mf\">0.085</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">DISCOUNT_RATE</span> <span class=\"mf\">0.35</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">inputFile</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/file-ports.html#(def._((lib._racket/private/base..rkt)._open-input-file))\" style=\"color: inherit\">open-input-file</a></span> <span class=\"s2\">\"shoe.txt\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">outputFile</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/file-ports.html#(def._((lib._racket/private/base..rkt)._open-output-file))\" style=\"color: inherit\">open-output-file</a></span> <span class=\"s2\">\"shoeSales.txt\"</span>\n                    <span class=\"kd\">#:exists</span> <span class=\"o\">'</span><span class=\"ss\">replace</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-11-14-project-euler-with-haskell-13-14.md" . unix) f post (u . "Project Euler problem 13 and 14, with Haskell") (? . 11) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/11/project-euler-problem-13-and-14-with-haskell.html" . unix) (u . "/2015/11/project-euler-problem-13-and-14-with-haskell.html") (u . "2015-11-14T00:00:00") (? . 12) (? . 13) (c (u . "Project Euler") c (u . "Haskell") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"problem-13\">Problem 13</h2>\n\n<p>Another really straight forward problem using infinite lists.</p>") #t (u . "\n<h2 id=\"problem-13\">Problem 13</h2>\n\n<p>Another really straight forward problem using infinite lists.</p>\n<!-- more-->\n\n<p><code>ProjectEuler13.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem13 - Large sum\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem13</span>\n    \n<span class=\"nf\">problem13</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"n\">nums</span>\n\n<span class=\"nf\">nums</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">37107287533902102798797998220837590246510135740250</span><span class=\"p\">,</span>\n        <span class=\"mi\">46376937677490009712648124896970078050417018260538</span><span class=\"p\">,</span>\n        <span class=\"mi\">74324986199524741059474233309513058123726617309629</span><span class=\"p\">,</span>\n        <span class=\"mi\">91942213363574161572522430563301811072406154908250</span><span class=\"p\">,</span>\n        <span class=\"mi\">23067588207539346171171980310421047513778063246676</span><span class=\"p\">,</span>\n        <span class=\"mi\">89261670696623633820136378418383684178734361726757</span><span class=\"p\">,</span>\n        <span class=\"mi\">28112879812849979408065481931592621691275889832738</span><span class=\"p\">,</span>\n        <span class=\"mi\">44274228917432520321923589422876796487670272189318</span><span class=\"p\">,</span>\n        <span class=\"mi\">47451445736001306439091167216856844588711603153276</span><span class=\"p\">,</span>\n        <span class=\"mi\">70386486105843025439939619828917593665686757934951</span><span class=\"p\">,</span>\n        <span class=\"mi\">62176457141856560629502157223196586755079324193331</span><span class=\"p\">,</span>\n        <span class=\"mi\">64906352462741904929101432445813822663347944758178</span><span class=\"p\">,</span>\n        <span class=\"mi\">92575867718337217661963751590579239728245598838407</span><span class=\"p\">,</span>\n        <span class=\"mi\">58203565325359399008402633568948830189458628227828</span><span class=\"p\">,</span>\n        <span class=\"mi\">80181199384826282014278194139940567587151170094390</span><span class=\"p\">,</span>\n        <span class=\"mi\">35398664372827112653829987240784473053190104293586</span><span class=\"p\">,</span>\n        <span class=\"mi\">86515506006295864861532075273371959191420517255829</span><span class=\"p\">,</span>\n        <span class=\"mi\">71693888707715466499115593487603532921714970056938</span><span class=\"p\">,</span>\n        <span class=\"mi\">54370070576826684624621495650076471787294438377604</span><span class=\"p\">,</span>\n        <span class=\"mi\">53282654108756828443191190634694037855217779295145</span><span class=\"p\">,</span>\n        <span class=\"mi\">36123272525000296071075082563815656710885258350721</span><span class=\"p\">,</span>\n        <span class=\"mi\">45876576172410976447339110607218265236877223636045</span><span class=\"p\">,</span>\n        <span class=\"mi\">17423706905851860660448207621209813287860733969412</span><span class=\"p\">,</span>\n        <span class=\"mi\">81142660418086830619328460811191061556940512689692</span><span class=\"p\">,</span>\n        <span class=\"mi\">51934325451728388641918047049293215058642563049483</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467221648435076201727918039944693004732956340691</span><span class=\"p\">,</span>\n        <span class=\"mi\">15732444386908125794514089057706229429197107928209</span><span class=\"p\">,</span>\n        <span class=\"mi\">55037687525678773091862540744969844508330393682126</span><span class=\"p\">,</span>\n        <span class=\"mi\">18336384825330154686196124348767681297534375946515</span><span class=\"p\">,</span>\n        <span class=\"mi\">80386287592878490201521685554828717201219257766954</span><span class=\"p\">,</span>\n        <span class=\"mi\">78182833757993103614740356856449095527097864797581</span><span class=\"p\">,</span>\n        <span class=\"mi\">16726320100436897842553539920931837441497806860984</span><span class=\"p\">,</span>\n        <span class=\"mi\">48403098129077791799088218795327364475675590848030</span><span class=\"p\">,</span>\n        <span class=\"mi\">87086987551392711854517078544161852424320693150332</span><span class=\"p\">,</span>\n        <span class=\"mi\">59959406895756536782107074926966537676326235447210</span><span class=\"p\">,</span>\n        <span class=\"mi\">69793950679652694742597709739166693763042633987085</span><span class=\"p\">,</span>\n        <span class=\"mi\">41052684708299085211399427365734116182760315001271</span><span class=\"p\">,</span>\n        <span class=\"mi\">65378607361501080857009149939512557028198746004375</span><span class=\"p\">,</span>\n        <span class=\"mi\">35829035317434717326932123578154982629742552737307</span><span class=\"p\">,</span>\n        <span class=\"mi\">94953759765105305946966067683156574377167401875275</span><span class=\"p\">,</span>\n        <span class=\"mi\">88902802571733229619176668713819931811048770190271</span><span class=\"p\">,</span>\n        <span class=\"mi\">25267680276078003013678680992525463401061632866526</span><span class=\"p\">,</span>\n        <span class=\"mi\">36270218540497705585629946580636237993140746255962</span><span class=\"p\">,</span>\n        <span class=\"mi\">24074486908231174977792365466257246923322810917141</span><span class=\"p\">,</span>\n        <span class=\"mi\">91430288197103288597806669760892938638285025333403</span><span class=\"p\">,</span>\n        <span class=\"mi\">34413065578016127815921815005561868836468420090470</span><span class=\"p\">,</span>\n        <span class=\"mi\">23053081172816430487623791969842487255036638784583</span><span class=\"p\">,</span>\n        <span class=\"mi\">11487696932154902810424020138335124462181441773470</span><span class=\"p\">,</span>\n        <span class=\"mi\">63783299490636259666498587618221225225512486764533</span><span class=\"p\">,</span>\n        <span class=\"mi\">67720186971698544312419572409913959008952310058822</span><span class=\"p\">,</span>\n        <span class=\"mi\">95548255300263520781532296796249481641953868218774</span><span class=\"p\">,</span>\n        <span class=\"mi\">76085327132285723110424803456124867697064507995236</span><span class=\"p\">,</span>\n        <span class=\"mi\">37774242535411291684276865538926205024910326572967</span><span class=\"p\">,</span>\n        <span class=\"mi\">23701913275725675285653248258265463092207058596522</span><span class=\"p\">,</span>\n        <span class=\"mi\">29798860272258331913126375147341994889534765745501</span><span class=\"p\">,</span>\n        <span class=\"mi\">18495701454879288984856827726077713721403798879715</span><span class=\"p\">,</span>\n        <span class=\"mi\">38298203783031473527721580348144513491373226651381</span><span class=\"p\">,</span>\n        <span class=\"mi\">34829543829199918180278916522431027392251122869539</span><span class=\"p\">,</span>\n        <span class=\"mi\">40957953066405232632538044100059654939159879593635</span><span class=\"p\">,</span>\n        <span class=\"mi\">29746152185502371307642255121183693803580388584903</span><span class=\"p\">,</span>\n        <span class=\"mi\">41698116222072977186158236678424689157993532961922</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467957194401269043877107275048102390895523597457</span><span class=\"p\">,</span>\n        <span class=\"mi\">23189706772547915061505504953922979530901129967519</span><span class=\"p\">,</span>\n        <span class=\"mi\">86188088225875314529584099251203829009407770775672</span><span class=\"p\">,</span>\n        <span class=\"mi\">11306739708304724483816533873502340845647058077308</span><span class=\"p\">,</span>\n        <span class=\"mi\">82959174767140363198008187129011875491310547126581</span><span class=\"p\">,</span>\n        <span class=\"mi\">97623331044818386269515456334926366572897563400500</span><span class=\"p\">,</span>\n        <span class=\"mi\">42846280183517070527831839425882145521227251250327</span><span class=\"p\">,</span>\n        <span class=\"mi\">55121603546981200581762165212827652751691296897789</span><span class=\"p\">,</span>\n        <span class=\"mi\">32238195734329339946437501907836945765883352399886</span><span class=\"p\">,</span>\n        <span class=\"mi\">75506164965184775180738168837861091527357929701337</span><span class=\"p\">,</span>\n        <span class=\"mi\">62177842752192623401942399639168044983993173312731</span><span class=\"p\">,</span>\n        <span class=\"mi\">32924185707147349566916674687634660915035914677504</span><span class=\"p\">,</span>\n        <span class=\"mi\">99518671430235219628894890102423325116913619626622</span><span class=\"p\">,</span>\n        <span class=\"mi\">73267460800591547471830798392868535206946944540724</span><span class=\"p\">,</span>\n        <span class=\"mi\">76841822524674417161514036427982273348055556214818</span><span class=\"p\">,</span>\n        <span class=\"mi\">97142617910342598647204516893989422179826088076852</span><span class=\"p\">,</span>\n        <span class=\"mi\">87783646182799346313767754307809363333018982642090</span><span class=\"p\">,</span>\n        <span class=\"mi\">10848802521674670883215120185883543223812876952786</span><span class=\"p\">,</span>\n        <span class=\"mi\">71329612474782464538636993009049310363619763878039</span><span class=\"p\">,</span>\n        <span class=\"mi\">62184073572399794223406235393808339651327408011116</span><span class=\"p\">,</span>\n        <span class=\"mi\">66627891981488087797941876876144230030984490851411</span><span class=\"p\">,</span>\n        <span class=\"mi\">60661826293682836764744779239180335110989069790714</span><span class=\"p\">,</span>\n        <span class=\"mi\">85786944089552990653640447425576083659976645795096</span><span class=\"p\">,</span>\n        <span class=\"mi\">66024396409905389607120198219976047599490197230297</span><span class=\"p\">,</span>\n        <span class=\"mi\">64913982680032973156037120041377903785566085089252</span><span class=\"p\">,</span>\n        <span class=\"mi\">16730939319872750275468906903707539413042652315011</span><span class=\"p\">,</span>\n        <span class=\"mi\">94809377245048795150954100921645863754710598436791</span><span class=\"p\">,</span>\n        <span class=\"mi\">78639167021187492431995700641917969777599028300699</span><span class=\"p\">,</span>\n        <span class=\"mi\">15368713711936614952811305876380278410754449733078</span><span class=\"p\">,</span>\n        <span class=\"mi\">40789923115535562561142322423255033685442488917353</span><span class=\"p\">,</span>\n        <span class=\"mi\">44889911501440648020369068063960672322193204149535</span><span class=\"p\">,</span>\n        <span class=\"mi\">41503128880339536053299340368006977710650566631954</span><span class=\"p\">,</span>\n        <span class=\"mi\">81234880673210146739058568557934581403627822703280</span><span class=\"p\">,</span>\n        <span class=\"mi\">82616570773948327592232845941706525094512325230608</span><span class=\"p\">,</span>\n        <span class=\"mi\">22918802058777319719839450180888072429661980811197</span><span class=\"p\">,</span>\n        <span class=\"mi\">77158542502016545090413245809786882778948721859617</span><span class=\"p\">,</span>\n        <span class=\"mi\">72107838435069186155435662884062257473692284509516</span><span class=\"p\">,</span>\n        <span class=\"mi\">20849603980134001723930671666823555245252804609722</span><span class=\"p\">,</span>\n        <span class=\"mi\">53503534226472524250874054075591789781264330331690</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-14\">Problem 14</h2>\n\n<p>This one actually runs much quicker than I expected it to.</p>\n\n<p><code>ProjectEuler14.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem14 - Longest Collatz sequence\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem14</span>\n    \n<span class=\"nf\">problem14</span> <span class=\"ow\">=</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"p\">((</span><span class=\"n\">snd</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">snd</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"kr\">then</span> <span class=\"n\">x</span> <span class=\"kr\">else</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">collatzLengths</span>\n\n<span class=\"nf\">collatzLengths</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">length</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"n\">collatzChainList</span>\n\n<span class=\"nf\">collatzChainList</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"n\">collatzChain</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">1000000</span><span class=\"p\">]</span>\n\n<span class=\"nf\">collatzChain</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">collatzChain</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nf\">collatzChain</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">collatzIter</span> <span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n    \n<span class=\"nf\">collatzIter</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">collatzIter</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span>\n    <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">collatzIter</span> <span class=\"p\">((</span><span class=\"n\">quot</span> <span class=\"n\">x</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">collatzIter</span> <span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-30-cs211-lab1-program3.md" . unix) f post (u . "CS211 Lab1 Program3 in Racket") (? . 14) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/01/cs211-lab1-program3-in-racket.html" . unix) (u . "/2017/01/cs211-lab1-program3-in-racket.html") (u . "2017-01-30T00:00:00") (? . 15) (? . 16) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"program-3\">Program 3</h2>\n\n<p>Write a program with several functions that perform the following tasks:</p>\n\n<p>a. Read the following 10 integer numbers from the file data.txt into array A.  10 15 27 89 90 95 27 13 99 33  Call function ReadArray that reads numbers from the file data.txt into an array.</p>\n\n<p>b. Copy array A into array B in reverse order. Call function ReverseArray that copies an array into another array in reverse order</p>") #t (u . "\n<h2 id=\"program-3\">Program 3</h2>\n\n<p>Write a program with several functions that perform the following tasks:</p>\n\n<p>a. Read the following 10 integer numbers from the file data.txt into array A.  10 15 27 89 90 95 27 13 99 33  Call function ReadArray that reads numbers from the file data.txt into an array.</p>\n\n<p>b. Copy array A into array B in reverse order. Call function ReverseArray that copies an array into another array in reverse order</p>\n<!-- more-->\n\n<p>c. Print the elements of Array A and B. Call function PrintArray that prints the elements of an array of any size</p>\n\n<p>d. Find the number of elements in array A that are &gt;= 80 and &lt;=100. Call function FindRange that finds and returns the number of elements in an array of any size that are within a certain range (min, max)</p>\n\n<p>e. Find the index of the elements in array A that are divisible by 5. Call function FindDiv that finds and returns the number of the elements in array that are divisible by 5</p>\n\n<p>f. Find average in array A. Call function ArrayAvg that finds and returns the average of elements in an array of any size</p>\n\n<p>g. Find the minimum number in array A. Call function ArrayMin that finds and returns the minimum number in an array of any size</p>\n\n<p>h. Ask the user to input a key. Then search for the key in array A and inform the user about the existence (true / false) of the key in array. Call function KeySearch that searches for a key in an array of any size and returns true/false as result</p>\n\n<p>NOTES: - If a function is supposed to return a value, print that value in main not inside the function. - Any parameter that is not supposed to be changed inside a function must be declared as a constant parameter.</p>\n\n<p><code>data.txt</code></p>\n\n<pre><code>10 15 27 89 90 95 27 13 99 33</code></pre>\n\n<p><code>output</code></p>\n\n<pre><code>#:filename \"./a.out &gt; output.txt\"]{\n10 15 27 89 90 95 27 13 99 33 \n\n33 99 13 27 95 90 89 27 15 10 \n\nThere are 4 values in arrayA between 80 and 100.\n\nThere are elements divisible by 5 at positions 1, 2, 5, 6, 4\n\nThe average of the array is 49.8\n\nThe minimum element of the array is 10\n\nEnter an integer value to search for: True</code></pre>\n\n<p><code>Lab1_Program3.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Function prototypes *************************************************</span>\n<span class=\"kt\">int</span> <span class=\"nf\">fileSize</span><span class=\"p\">();</span>                        <span class=\"c1\">// aux</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ReadArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span><span class=\"p\">);</span>            <span class=\"c1\">// a</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ReverseArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span><span class=\"p\">);</span> <span class=\"c1\">// b</span>\n<span class=\"kt\">void</span> <span class=\"nf\">PrintArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span><span class=\"p\">);</span>           <span class=\"c1\">// c</span>\n<span class=\"kt\">int</span> <span class=\"nf\">FindRange</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">[]);</span>        <span class=\"c1\">// d</span>\n<span class=\"kt\">int</span> <span class=\"nf\">FindDiv</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">[]);</span>               <span class=\"c1\">// e</span>\n<span class=\"kt\">double</span> <span class=\"nf\">ArrayAvg</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[]);</span>                <span class=\"c1\">// f</span>\n<span class=\"kt\">int</span> <span class=\"nf\">ArrayMin</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[]);</span>                   <span class=\"c1\">// g</span>\n<span class=\"kt\">bool</span> <span class=\"nf\">KeySearch</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">[]);</span>            <span class=\"c1\">// h</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// find length of the input</span>\n  <span class=\"kt\">int</span> <span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"n\">fileSize</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// initialize array A and B</span>\n  <span class=\"kt\">int</span> <span class=\"n\">arrayA</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n  <span class=\"kt\">int</span> <span class=\"n\">arrayB</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// a. Read data from data2.txt to arrayA</span>\n  <span class=\"n\">ReadArray</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// b. Copy arrayA into arrayB in reverse order</span>\n  <span class=\"n\">ReverseArray</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">,</span> <span class=\"n\">arrayB</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// c. Print arrayA and arrayB</span>\n  <span class=\"n\">PrintArray</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  <span class=\"n\">PrintArray</span><span class=\"p\">(</span><span class=\"n\">arrayB</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// d. Find the number of elements in array between 80 and 100</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There are \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">FindRange</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">arrayA</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" values in arrayA between \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">80</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" and \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">100</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\".\"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// e. Find the number of elements divisible by 5</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There are elements divisible by 5 at positions \"</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">FindDiv</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">arrayA</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// f. Find the average of the array</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The average of the array is \"</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ArrayAvg</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// g. Find the minimum element of the array</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The minimum element of the array is \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ArrayMin</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">)</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// h. Search for an element in an array</span>\n  <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Enter an integer value to search for: \"</span><span class=\"p\">;</span>\n  <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">KeySearch</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">arrayA</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"s\">\"True\"</span> <span class=\"o\">:</span> <span class=\"s\">\"False\"</span><span class=\"p\">)</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Function definitions *************************************************</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">fileSize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data2.txt\"</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">temp</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ReadArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// initialize ifstream to read file</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data2.txt\"</span><span class=\"p\">);</span>\n  \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span> <span class=\"p\">{</span> <span class=\"c1\">// Only do these if file is open</span>\n    <span class=\"c1\">// Pull data off data2.txt and place in arr</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  \n  <span class=\"c1\">// Close the file</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ReverseArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arrayA</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">arrayB</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">arrayB</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arrayA</span><span class=\"p\">[</span><span class=\"mi\">9</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">PrintArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">FindRange</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">first</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">second</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">FindDiv</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\", \"</span><span class=\"p\">;</span>\n      <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">double</span> <span class=\"nf\">ArrayAvg</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"mf\">10.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">ArrayMin</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span> \n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">KeySearch</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\t\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> \n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.cpp</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-26-fibonacci-in-prolog.md" . unix) f post (u . "Fibonacci in Prolog") (? . 17) 1506455955 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/fibonacci-in-prolog.html" . unix) (u . "/2017/09/fibonacci-in-prolog.html") (u . "2017-09-26T00:00:00") (? . 18) #f (c (u . "Prolog") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>I was looking over <a href=\"http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50\">Exercise 11.3</a> at <a href=\"http://www.learnprolognow.org\">Learn Prolog Now</a> and realized that the problem actually implements memoization to calculate its result. I thought I would try modifying the problem to see if it could be used to solve the fibonacci equation.</p>") #t (u . "\n<p>I was looking over <a href=\"http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50\">Exercise 11.3</a> at <a href=\"http://www.learnprolognow.org\">Learn Prolog Now</a> and realized that the problem actually implements memoization to calculate its result. I thought I would try modifying the problem to see if it could be used to solve the fibonacci equation.</p>\n<!-- more-->\n\n<p>The sigma problem asks you to create a <code>sigmares(N,S)</code> result for every <code>sigma(N,S)</code> and <code>assert</code> this value to the database.</p>\n\n<div class=\"brush: prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">:-</span> <span class=\"s s-Atom\">dynamic</span> <span class=\"s s-Atom\">sigmares</span><span class=\"o\">/</span><span class=\"mf\">2.</span>\n\n<span class=\"nf\">sigmares</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n\n<span class=\"nf\">sigma</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nf\">sigmares</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">),</span>\n    <span class=\"p\">!.</span>\n<span class=\"nf\">sigma</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nv\">Xp</span> <span class=\"o\">is</span> <span class=\"nv\">X</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nf\">sigma</span><span class=\"p\">(</span><span class=\"nv\">Xp</span><span class=\"p\">,</span> <span class=\"nv\">R</span><span class=\"p\">),</span>\n    <span class=\"nv\">Y</span> <span class=\"o\">is</span> <span class=\"nv\">R</span> <span class=\"o\">+</span> <span class=\"nv\">X</span><span class=\"p\">,</span>\n    <span class=\"nf\">assert</span><span class=\"p\">(</span><span class=\"nf\">sigmares</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">)).</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We can quickly check that this function properly updates the database.</p>\n\n<div class=\"brush: prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">sigma</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"nv\">X</span><span class=\"p\">),</span> <span class=\"s s-Atom\">listing</span><span class=\"p\">.</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>:- dynamic sigmares/2.\n\nsigmares(1, 1).\nsigmares(2, 3).\nsigmares(3, 6).\nsigmares(4, 10).\nsigmares(5, 15).\nsigmares(6, 21).\nsigmares(7, 28).\nsigmares(8, 36).\nsigmares(9, 45).\nsigmares(10, 55).</code></pre>\n\n<p>To solve the fibonacci problem I modified the code to match the fibonacci equations structure.</p>\n\n<div class=\"brush: prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">:-</span> <span class=\"s s-Atom\">dynamic</span> <span class=\"s s-Atom\">fib</span><span class=\"o\">/</span><span class=\"mf\">2.</span>\n\n<span class=\"nf\">fibs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">fibs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">).</span>\n\n<span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">S</span><span class=\"p\">):-</span>\n    <span class=\"nf\">fibs</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">S</span><span class=\"p\">),</span>\n    <span class=\"p\">!.</span>\n\n<span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">S</span><span class=\"p\">):-</span>\n    <span class=\"nv\">N1</span> <span class=\"o\">is</span> <span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nv\">N2</span> <span class=\"o\">is</span> <span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span><span class=\"nv\">S1</span><span class=\"p\">),</span>\n    <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N2</span><span class=\"p\">,</span><span class=\"nv\">S2</span><span class=\"p\">),</span>\n    <span class=\"nv\">S</span> <span class=\"o\">is</span> <span class=\"nv\">S1</span> <span class=\"o\">+</span> <span class=\"nv\">S2</span><span class=\"p\">,</span>\n    <span class=\"nf\">assert</span><span class=\"p\">(</span><span class=\"nf\">fibs</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">S</span><span class=\"p\">)).</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I then tested to see if the results looked correct.</p>\n\n<div class=\"brush: prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"nv\">X</span><span class=\"p\">),</span> <span class=\"s s-Atom\">listing</span><span class=\"p\">.</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<pre><code>:- dynamic fibs/2.\n\nfibs(0, 1).\nfibs(1, 1).\nfibs(2, 2).\nfibs(3, 3).\nfibs(4, 5).\nfibs(5, 8).\nfibs(6, 13).\nfibs(7, 21).\nfibs(8, 34).\nfibs(9, 55).\nfibs(10, 89).\nfibs(11, 144).\nfibs(12, 233).\nfibs(13, 377).\nfibs(14, 610).\nfibs(15, 987).</code></pre>\n\n<p>I was actually really suprised at how quickly the program ran given that I never really consider <code>Prolog</code> for numerical calculations.</p>\n\n<p>I ended up timing <code>fib(10000)</code> to compare to <code>Racket</code>.</p>\n\n<div class=\"brush: prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">get_time</span><span class=\"p\">(</span><span class=\"nv\">T1</span><span class=\"p\">),</span><span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"k\">_</span><span class=\"p\">),</span><span class=\"nf\">get_time</span><span class=\"p\">(</span><span class=\"nv\">T2</span><span class=\"p\">),</span> <span class=\"nv\">T3</span> <span class=\"o\">is</span> <span class=\"nv\">T2</span> <span class=\"o\">-</span> <span class=\"nv\">T1</span><span class=\"p\">,</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nv\">T3</span><span class=\"p\">).</span>\n\n<span class=\"o\">&gt;</span> <span class=\"mf\">0.17243337631225586</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._zero~3f))\" style=\"color: inherit\">zero?</a></span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"n\">iter</span> <span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"n\">c</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"n\">iter</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"mi\">10000</span><span class=\"p\">))</span>\n\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">8</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">8</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">8</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Prolog ended up taking a little more than twice the time taken by <code>Racket</code> to calculate the same value. Considering that <code>Racket</code> wasn&rsquo;t creating a database of fib values that could be used again later I think the difference is actually remarkable.</p>\n\n<h3 id=\"note\">Note</h3>\n\n<p>I removed the <code>memoization</code> component from the <code>Prolog</code> code and ran <code>fib(40)</code> to see how much time was saved.</p>\n\n<div class=\"brush: prolog\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">:-</span> <span class=\"nf\">use_module</span><span class=\"p\">(</span><span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"s s-Atom\">clpfd</span><span class=\"p\">)).</span>\n\n<span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">S</span><span class=\"p\">):-</span>\n    <span class=\"nv\">N1</span> <span class=\"o\">is</span> <span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nv\">N2</span> <span class=\"o\">is</span> <span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span><span class=\"nv\">S1</span><span class=\"p\">),</span>\n    <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"nv\">N2</span><span class=\"p\">,</span><span class=\"nv\">S2</span><span class=\"p\">),</span>\n    <span class=\"nv\">S</span> <span class=\"o\">is</span> <span class=\"nv\">S1</span> <span class=\"o\">+</span> <span class=\"nv\">S2</span><span class=\"p\">.</span>\n    <span class=\"c1\">%assert(fibs(N,S)).</span>\n\n<span class=\"nf\">get_time</span><span class=\"p\">(</span><span class=\"nv\">T1</span><span class=\"p\">),</span><span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"k\">_</span><span class=\"p\">),</span><span class=\"nf\">get_time</span><span class=\"p\">(</span><span class=\"nv\">T2</span><span class=\"p\">),</span> <span class=\"nv\">T3</span> <span class=\"o\">is</span> <span class=\"nv\">T2</span> <span class=\"o\">-</span> <span class=\"nv\">T1</span><span class=\"p\">,</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nv\">T3</span><span class=\"p\">).</span>\n\n<span class=\"o\">&gt;</span> <span class=\"mf\">50.405715465545654</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"mi\">40</span><span class=\"p\">))</span>\n\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">6320</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">6255</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">32</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The difference without <code>memoization</code> was effectively an order of magnitude. This really highlights for me the importance of <code>memoization</code> for <code>Prolog</code> programs.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-02-20-20-project-update.md" . unix) f post (u . "20% Project Update") (? . 6) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/02/20-project-update.html" . unix) (u . "/2015/02/20-project-update.html") (u . "2015-02-20T00:00:00") (? . 4) (? . 19) (c (u . "Teaching Credential") c (u . "20% Project") c (u . "Author: Henry Brooks")) (u . "\n<p>Considering Prof. Heil&rsquo;s email I have complied a list of the criteria for my 20% Project.</p>\n\n<p>For my 20% Project I&rsquo;m going to be learning to write code in <a href=\"https://www.wolfram.com/mathematica/\">Mathematica</a> to find solutions for the problems posted on Project Euler.</p>") #t (u . "\n<p>Considering Prof. Heil&rsquo;s email I have complied a list of the criteria for my 20% Project.</p>\n\n<p>For my 20% Project I&rsquo;m going to be learning to write code in <a href=\"https://www.wolfram.com/mathematica/\">Mathematica</a> to find solutions for the problems posted on Project Euler.</p>\n<!-- more-->\n\n<h2 id=\"1-what-are-you-going-to-learn-what-is-your-learning-target\">1 What are you going to learn (what is your &ldquo;learning target&rdquo;)?</h2>\n\n<p>For my 20% Project I&rsquo;m going to be expanding my knowledge of coding by learning to write code for Mathematica. As a student at CSUSM I currently have access to Mathematica through cougarapps and I feel that I would be remiss to not give it a try while I still can. I also think that Mathematica might be a better fit for some of the mathematical problems that are in the Project Euler database.</p>\n\n<h2 id=\"2-how-are-you-planning-on-learning-it-part-of-this-learning-must-take-place-online\">2 How are you planning on learning it? (part of this learning must take place online)</h2>\n\n<p>I plan to learn this through online video instructions, tutorials, and the documentation provided inside of Mathematica.</p>\n\n<h2 id=\"3-list-your-10-authentic-questions-for-inquiryyou-only-need-the-questions-the-answers-will-come-at-the-end-of-the-project\">3 List your 10 authentic questions for inquiry&hellip;you only need the questions. The answers will come at the end of the project)</h2>\n\n<p>Does Mathematica have enough built in tools to do this task? Does my knowledge of C++ transfer to Mathematica? How long will it take to get competent with Mathematica? How difficult is it to create functional algorithms in Mathematica? Are there coding considerations I should be aware of when working with Mathematica? How difficult of a task have I set for myself? Are there classes of problems that are more difficult with Mathematica? Can these problems be adjusted for use in the classroom? What mathematical fields are covered by this project? How much does Mathematica cost if I decide to keep using it after this project?</p>\n\n<h2 id=\"4-what-will-a-successful-outcome-look-like-what-is-your-success-criteria\">4 What will a successful outcome look like (what is your &ldquo;success criteria&rdquo;)?</h2>\n\n<p>I would consider success for this project to be the completion of at least the first 50 problems on the site.</p>\n\n<h2 id=\"5-most-importantly-is-there-an-aspect-of-play-andor-making-in-your-project-is-there-an-opportunity-for-failure-it-is-important-that-you-avoid-pure-knowledge-pursuits-for-this-project\">5 (Most importantly) Is there an aspect of play and/or making in your project. Is there an opportunity for failure? It is important that you avoid pure knowledge pursuits for this project.</h2>\n\n<p>I enjoy completing logic puzzles like Sudoku and I have previously been working on some of these problems on this site for fun in my spare time. So I think that this project has an element of play for me.</p>\n\n<p>I get satisfaction out of solving problems that are difficult, also I like reading over the different methods used by other people after I have completed a problem.</p>\n\n<p>I&rsquo;m not sure how much opportunity for failure is presented by this project. I know that even if I don&rsquo;t finish 50 problems by the end of this course I will eventually finish them. However I would like to reach this goal if I could, even if it&rsquo;s just as a personal pride thing.</p>\n\n<h2 id=\"6-which-tool-are-you-going-to-be-using-for-research-i-know-there-was-a-request-for-more-clarification-on-tools-we-can-do-this-monday\">6 Which tool are you going to be using for research? (I know there was a request for more clarification on tools. We can do this Monday)</h2>\n\n<p>I&rsquo;m going to be using the internet for most of my research on this project.</p>\n\n<p>While I know some Professors and Computer Science majors at the University who I could talk to about coding these types of problems, I&rsquo;m rarely on campus this semester so it would be difficult to stop by and ask them for assistance.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-11-20-project-project-euler-29.md" . unix) f post (u . "20% Project - ProjectEuler #29") (? . 20) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/20-project-projecteuler-29.html" . unix) (u . "/2015/04/20-project-projecteuler-29.html") (u . "2015-04-11T00:00:00") (? . 19) (? . 22) (c (u . "Teaching Credential") c (u . "20% Project") c (u . "Project Euler") c (u . "Author: Henry Brooks")) (u . "\n<div class=\"figure\"><img src=\"/img/ProjectEuler29a.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>") #t (u . "\n<div class=\"figure\"><img src=\"/img/ProjectEuler29a.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n<!-- more-->\n\n<p><a href=\"https://projecteuler.net/problem=29\">Project Euler</a></p>\n\n<p>Like the last problem I find it&rsquo;s informative to start out with an inelegant solution and try to find an elegant one at the end.</p>\n\n<p>We start by generating an array of the form <code>a^b</code> from <code>a = 2</code> to <code>100</code> and <code>b = 2</code> to <code>100</code>.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29b.png\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<p>As expected that got gigantic quickly, however we don&rsquo;t need to look at all of the data to work with it.</p>\n\n<p>We can use <strong>Flatten</strong> to compress the <code>99×99</code> array into a single vector <code>9,801</code> elements long. We then use <strong>DeleteDuplicates</strong> to remove all of the duplicated elements from the vector. And finish with <strong>Length</strong> to find the total number of elements left over.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29c.png\" alt=\"3\" />\n <p class=\"caption\">3</p></div>\n\n<p>And technically we are done. <strong>The answer to this ProjectEular problem is <code>9,183</code>.</strong></p>\n\n<p>However I think that it&rsquo;s worth our time to consider why their are only <code>618</code> repeated numbers in this list.</p>\n\n<p>First lets try to account for all of the numbers that are unique.</p>\n\n<p>There are <code>25</code> prime numbers less than <code>100</code> and each of these numbers will generate <code>99</code> non-duplicated numbers since they will have only one number as their factor. So we have to have at least <code>25×99=2,475</code> unique numbers just from the primes under <code>100</code>.</p>\n\n<p>However thinking about it we can also remove the numbers that are composed of primes like <code>6</code> and <code>15</code>. Observe that since <code>6=2×3</code> that <code>6^2=(2×3)^2=2^2×3^3</code>, and so on.</p>\n\n<p>We could try to find the possible permutations of the <code>25</code> primes however, there are <code>2^25</code> ways that we can combine two pairs of primes and calculating which combinations have values less than <code>100</code> is rather time consuming.</p>\n\n<p>Instead lets consider what numbers we know are going to show up more than once in the table?</p>\n\n<p>Any number that is a power of a lower number of the list will definitely be a repeated.</p>\n\n<p>The higher powers of <code>2</code> will show up in the powers of <code>4, 8, 16, 32,</code> and <code>64</code>.</p>\n\n<p>Below I have generated a truncated list for the <code>2,4,</code> and <code>8</code> table. We can see that the <code>4</code> table repeats every second value on the <code>2</code> table and that the <code>8</code> table repeats the 3rd value. This corresponds to <code>4=2^2</code> and <code>8=2^3</code>.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29d.png\" alt=\"4\" />\n <p class=\"caption\">4</p></div>\n\n<p>I created the following two tables in <a href=\"https://en.wikipedia.org/wiki/LaTeX\">Latex</a> to highlight how the powers of <code>2</code> repeat at specific intervals in the <code>4</code> and <code>8</code> power tables. A similar pattern will occur for the powers of <code>3, 5,</code> and <code>7</code>.</p>\n\n<p>Similarly the power table for <code>6</code> will be repeated in the power table for <code>36</code> and <code>10</code> in the power table for <code>100</code>.</p>\n\n<p>The following Matrix and ArrayPlot were generated in Mathematica to show the repeated numbers in the table given above. Observe that <code>2^6</code> occurs the most often in this table and is represented in black in the <strong>ArrayPlot</strong> to signify that it is a larger value.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29e.png\" alt=\"5\" />\n <p class=\"caption\">5</p></div>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29f.png\" alt=\"6\" />\n <p class=\"caption\">6</p></div>\n\n<p>Expanding the array to include all of the numbers we originally calculated we get the following <strong>ArrayPlot</strong>. Here we see that most of the values that will have repeats are clustered around the top of the array corresponding to a values between <code>2</code> and <code>10</code>.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29g.png\" alt=\"7\" />\n <p class=\"caption\">7</p></div>\n\n<p>The dark band that shows up around the <code>2/3</code> mark on the array corresponds to the powers of <code>2^6</code>. As you can see by the following table the values in the <code>2^6</code> power table show up repeatedly throughout the array.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29h.png\" alt=\"8\" />\n <p class=\"caption\">8</p></div>\n\n<p>For reference the number that shows up the most often in the table is <code>1,152,921,504,606,846,976</code> or <code>2^60</code>. Which makes sense when you remember that <code>60</code> has <code>12</code> divisors and would thus it will show up in the power table of <code>2^1, 2^2, 2^3, 2^4, 2^5, 2^6</code>.</p>\n\n<p>Also you should notice that in a number of rows the values are high for half of the row and then drop down to 1 for the rest of the array. As an example the power table for <code>100</code> is at the bottom of the array window. Note that the first <code>50</code> values of this table occur in the <code>10</code> power table.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29i.png\" alt=\"9\" />\n <p class=\"caption\">9</p></div>\n\n<p>It&rsquo;s not until <code>100^51</code> that we get the first value that doesn&rsquo;t show up in <code>10</code> power table.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This problem is mechanically simple to calculate with a computer but is calculable by hand given time and planning. I wouldn&rsquo;t ask students to do the full table by hand but I feel that you could probably have an interesting discussion with students concerning this material.</p>\n\n<p>Using the above code I found that <code>280,607</code> times the second number tested was non-Prime. Since there are only <code>336,000</code> entries in the array that means that <code>83.5%</code> of the time while generating the original array I could have stopped after calculating the second value.</p>\n\n<p>This was a longer write up than I originally expected, but it was a rather involved problem that benefited greatly from optimization.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-15-20-project-project-euler-40-44-and-47.md" . unix) f post (u . "20% Project - ProjectEuler #40, 44, and 47") (? . 21) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/20-project-projecteuler-40-44-and-47.html" . unix) (u . "/2015/04/20-project-projecteuler-40-44-and-47.html") (u . "2015-04-15T00:00:00") (? . 22) (? . 23) (c (u . "Teaching Credential") c (u . "20% Project") c (u . "Project Euler") c (u . "Author: Henry Brooks")) (u . "\n<div class=\"figure\"><img src=\"/img/ProjectEuler29a.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>") #t (u . "\n<div class=\"figure\"><img src=\"/img/ProjectEuler29a.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n<!-- more-->\n\n<p><a href=\"https://projecteuler.net/problem=29\">Project Euler</a></p>\n\n<p>Like the last problem I find it&rsquo;s informative to start out with an inelegant solution and try to find an elegant one at the end.</p>\n\n<p>We start by generating an array of the form <code>a^b</code> from <code>a = 2</code> to <code>100</code> and <code>b = 2</code> to <code>100</code>.</p>\n\n<div class=\"figure\"><img src=\"/img/ProjectEuler29b.png\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<h2 id=\"problem-47\">Problem 47</h2>\n\n<p>The first two consective numbers to have two distince prime factors are:</p>\n\n<p><code>14=2×7</code></p>\n\n<p><code>15=3×5</code></p>\n\n<p>The first three consective numbers to have three distinct prime factors are:</p>\n\n<p><code>644=2^2×7×23</code> <code>644=2^2×7×23</code> <code>644=2^2×7×23</code></p>\n\n<p>Find the first four consective numbers to have four distinct prime factors. What is the first of these numbers?</p>\n\n<div class=\"brush: Mathematica\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">prob47</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Flatten</span><span class=\"p\">[</span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">FactorInteger</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]],</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">200000</span><span class=\"p\">}]];</span><span class=\"w\"></span>\n<span class=\"n\">prob47b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">[</span><span class=\"n\">prob47</span><span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">]],</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">199997</span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"n\">Position</span><span class=\"p\">[</span><span class=\"n\">prob47b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-44\">Problem 44</h2>\n\n<p>Pentagonal numbers are generated by the formula, <code>P_n=n(3n-1)/2</code>. The first ten pentagonal numbers are:</p>\n\n<p><code>1, 5, 12, 22, 35, 51, 70, 92, 117, 145,</code> &hellip;</p>\n\n<p>It can be seen that <code>P_4 + P_7 = 22 + 70 = 92 = P_8</code>. However, their difference, 70 &ndash; 22 = 48, is not pentagonal.</p>\n\n<p>Find the pair of pentagonal numbers, <code>P_j</code> and <code>P_k</code>, for which their sum and difference are pentagonal and <code>D = |P_k - P_j|</code> is minimised; what is the value of D?</p>\n\n<div class=\"brush: Mathematica\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">prob44a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100000</span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"n\">prob44b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"mi\">-1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100000</span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"n\">prob44c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">o</span><span class=\"mi\">-1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100000</span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"n\">Intersection</span><span class=\"p\">[</span><span class=\"n\">prob44a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prob44b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prob44c</span><span class=\"p\">]</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-40\">Problem 40</h2>\n\n<p>An irrational decimal fraction is created by concatenating the positive integers:</p>\n\n<p><code>0.123456789101</code><strong>1</strong><code>12131415161718192021...</code></p>\n\n<p>It can be seen that the <code>12^th</code> digit of the fractional part is 1.</p>\n\n<p>If <code>d_n</code> represents the <code>n^th</code> digit of the fractional part, find the value of the following expression.</p>\n\n<p><code>d_1 × d_{10} × d_{100} × d_{1000} × d_{10000} × d_{100000} × d_{1000000}</code></p>\n\n<div class=\"brush: Mathematica\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">prob40</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Flatten</span><span class=\"p\">[</span><span class=\"n\">IntegerDigits</span><span class=\"p\">[</span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">200000</span><span class=\"p\">}]]];</span><span class=\"w\"></span>\n<span class=\"n\">Product</span><span class=\"p\">[</span><span class=\"n\">prob40</span><span class=\"p\">[[</span><span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"n\">a</span><span class=\"p\">]],</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">}]</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-24-daily-desmos-24apr-exploration.md" . unix) f post (u . "Daily Desmos - 24 April - Exploration") (? . 24) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/daily-desmos-24-april-exploration.html" . unix) (u . "/2015/04/daily-desmos-24-april-exploration.html") (u . "2015-04-24T00:00:00") (? . 23) (? . 25) (c (u . "Daily Desmos") c (u . "20% Project") c (u . "Desmos") c (u . "Author: Henry Brooks")) (u . "\n<p><a href=\"http://http://dailydesmos.com/\">Daily Desmos</a> posted two different examples of warping graphs on April 24. As an experiment I combined both graphs into one to see what they would look like.</p>\n\n<div class=\"figure\"><img src=\"/img/warping-hyperbola-e.gif\" alt=\"1\" />\n <p class=\"caption\">1</p></div>") #t (u . "\n<p><a href=\"http://http://dailydesmos.com/\">Daily Desmos</a> posted two different examples of warping graphs on April 24. As an experiment I combined both graphs into one to see what they would look like.</p>\n\n<div class=\"figure\"><img src=\"/img/warping-hyperbola-e.gif\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n<!-- more-->\n\n<p>You can check out my version <a href=\"https://www.desmos.com/calculator/j4zcbsdwwi\">here</a>.</p>\n\n<p>After watching the rings move around for awhile I got to wondering what this image would look like in 3d. I knew that the current graph could be thought of as a 2d slice of a larger 3d image. It took awhile to remember the Mathematica codes to generate 3d animated plots. However I feel that the end results are decent.</p>\n\n<p>The first two graphs show the interaction of <code>x^2+y^2</code> and <code>cos(x+t)</code>. These images relate to the warping circles.</p>\n\n<div class=\"figure\"><img src=\"/img/warping-hyperbola-a.gif\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<div class=\"figure\"><img src=\"/img/warping-hyperbola-b.gif\" alt=\"3\" />\n <p class=\"caption\">3</p></div>\n\n<p>The second two graphs show the interaction of <code>x^2-y^2</code> and <code>cos(x+t)</code>. These images relate to the warping hyperbola.</p>\n\n<div class=\"figure\"><img src=\"/img/warping-hyperbola-c.gif\" alt=\"4\" />\n <p class=\"caption\">4</p></div>\n\n<div class=\"figure\"><img src=\"/img/warping-hyperbola-d.gif\" alt=\"5\" />\n <p class=\"caption\">5</p></div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-09-mis522-case-study-1-with-big-data-comes-big-responsibility.md" . unix) f post (u . "MIS522 Case Study 1 - With Big Data Comes Big Responsibility") (? . 26) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/mis522-case-study-1-with-big-data-comes-big-responsibility.html" . unix) (u . "/2017/09/mis522-case-study-1-with-big-data-comes-big-responsibility.html") (u . "2017-09-09T00:00:00") (? . 28) (? . 1) (c (u . "Case Study") c (u . "Cybersecurity") c (u . "MIS522") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"week-2-case-study\">Week 2 Case Study</h2>\n\n<p><a href=\"https://hbr.org/2014/11/with-big-data-comes-big-responsibility\">With Big Data Comes Big Responsibility</a></p>\n\n<p>This weeks case study examines an article from the Harvard Business Review concerning the current and future usage of smart devices and the collection of personal data. I will be using <a href=\"https://en.wikipedia.org/wiki/Self-determination_theory\">Self-determination theory</a> (SDT) as a lens to view this topic.</p>") #t (u . "\n<h2 id=\"week-2-case-study\">Week 2 Case Study</h2>\n\n<p><a href=\"https://hbr.org/2014/11/with-big-data-comes-big-responsibility\">With Big Data Comes Big Responsibility</a></p>\n\n<p>This weeks case study examines an article from the Harvard Business Review concerning the current and future usage of smart devices and the collection of personal data. I will be using <a href=\"https://en.wikipedia.org/wiki/Self-determination_theory\">Self-determination theory</a> (SDT) as a lens to view this topic.</p>\n<!-- more-->\n\n<p>In the article Professor Alex Pentland from MIT shares some of his observations and concerning about the sharing habits individuals and views concerning the collection of personal data. Reading this article we can see areas where individual desires to collect and share personal data aligns with the motivating factors of SDT. This theory can also help to explain why individuals are reluctant to over share data.</p>\n\n<p>The use of smart devices to collect and store personal data can be closely linked to the SDT desire for competence. Graphs and data give users clear metrics by which to gauge growth and mastery of activities. Having a smart device monitor and track performance during physical activities allows individuals to quantify performance quickly and accurately. Personal data collection can directly lead to reinforced views and behaviors in regards to personal heath and training.</p>\n\n<p>The sharing of personal data and accomplishments can be linked to the SDT desire for relatedness. Smart devices allow people to easily collect and share information with others. Being able to view and compare personal performance and accomplishments with peers increases the perceived connection to the group. Smart devices also assist with the need for inclusion as individuals receive notifications and updates concerning the activities of others.</p>\n\n<p>Data collection also relates to the SDT desire for autonomy. While having the ability to view and analyze data is important for competence, the belief that these activities are being influenced by others decreases autonomy. If the perception develops that the activity is being done for the benefit of others the motivation to allow for the collection of data decreases. Specifically, if an individual feels that their data is being used for marketing or statistical analysis they could feel that they are being used as a product and quit the service. Individuals regularly quit and boycott services that they feel are unfairly leveraging they data or time in relation to their perceived gains.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-04-01-racket-memorized-function.md" . unix) f post (u . "Memoization in Racket") (? . 27) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/04/memoization-in-racket.html" . unix) (u . "/2017/04/memoization-in-racket.html") (u . "2017-04-01T00:00:00") (? . 8) (? . 28) (c (u . "Racket") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">totalOnes</a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p>") #t (u . "\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">totalOnes</a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">c</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"n\">c</span><span class=\"p\">))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></span> <span class=\"mi\">1000</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;(time (fib 40))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>While the standard Fibonacci formula performed as bad as it always does for large values, I was quite suprised by the speed up generated by the memoization method. Memoization uses almost the exact formula for calculating Fibonacci yet it has a speed up that is even with the iterative version into the 10&rsquo;s of thousands.</p>\n\n<p>Unfortunately I was never able to find an iterative version of <code>totalOnes</code> code however, there is still a significant increase in speed associated with converting the equation to use memoization.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">n2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient))\" style=\"color: inherit\">quotient</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"n\">n2</span> <span class=\"mi\">1</span><span class=\"p\">))))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">78</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">63</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">0</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"mi\">9884999</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">i2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient))\" style=\"color: inherit\">quotient</a></span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                               <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"n\">i2</span> <span class=\"mi\">1</span><span class=\"p\">)))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">19</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"mi\">9884999</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-02-cs231-assignment1.md" . unix) f post (u . "CS231 Assignment1") (? . 32) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/cs231-assignment1.html" . unix) (u . "/2017/03/cs231-assignment1.html") (u . "2017-03-02T00:00:00") (? . 29) (? . 30) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>This was a rather complicated problem that mostly tested our ability to think through the procedure clearly and cover edge cases.</p>\n\n<p>This was a rather long assignment to type up however, the instructions made the requirements rather clear. I wasn&rsquo;t required to do any outside the box thinking here, just put the peices together correctly.</p>") #t (u . "\n<p>This was a rather complicated problem that mostly tested our ability to think through the procedure clearly and cover edge cases.</p>\n\n<p>This was a rather long assignment to type up however, the instructions made the requirements rather clear. I wasn&rsquo;t required to do any outside the box thinking here, just put the peices together correctly.</p>\n<!-- more-->\n\n<p>◊filebox-highlight[&ldquo;Lab5.asm&rdquo; &rsquo;asm]{ #Henry Brooks #CS231 Assignment1 .data array: .word 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 str0: .asciiz &ldquo;Please enter the array length: &rdquo; goodMsg: .asciiz \" is a good value in checkNumPositive\\n\" badMsg: .asciiz \" is a bad value in checkNumPositive\\n\" errorMsg: .asciiz &ldquo;Invalid array length\\n&rdquo; invalidMsg: .asciiz &ldquo;Invalid array value\\n&rdquo; space: .asciiz \" \" newline: .asciiz \"\\n\"</p>\n\n<p>.text begin:  la $a0, str0  li $v0, 4  syscall</p>\n\n<pre><code>jal\treadNum\t\t# input passed back in $v1\nadd\t$s0, $v1, $0\t# $s0 = arraySize\n\nadd\t$a0, $s0, $0\t# pass arraySize in $a0 to veriftySize\njal\tverifySize\nadd\t$t0, $v1, $0\t# get 1 or 0 back from verifySize\n\nbeq\t$t0, $0, begin\n\nadd\t$a0, $s0, $0\t# pass arraySize to createArray in $a0\njal\tcreateArray\n\nadd\t$a0, $s0, $0\t# pass arraySize to printArray in $a0\njal\tprintArray\n\n\nadd\t$a0, $s0, $0\t# pass arraySize to reverseArray in $a0\njal\treverseArray\n\n\nadd\t$a0, $s0, $0\t# pass arraySize to printArray in $a0\njal\tprintArray\n</code></pre>\n\n<p>exit:  li $v0, 10  syscall</p>\n\n<h1 id=\"-int-readnum-returns-and-int\">&mdash;&mdash;&mdash;&mdash; int readNum(), returns and int</h1>\n\n<p>readNum:  li $v0, 5  syscall  add $v1, $v0, $0 # pass input back in $v1  jr $ra</p>\n\n<h1 id=\"-int-verifysizeint-arraysize-returns-0-or-1\">&mdash;&mdash;&mdash;&mdash; int verifySize(int arraySize), returns 0 or 1</h1>\n\n<p>verifySize:  add $t0, $a0, $0 # save passed arg (arraySize) to $t0</p>\n\n<pre><code>li\t$t1, 20\nbgt\t$t0, $t1, verifySizeBad\nble\t$t0, $0, verifySizeBad\n\nli\t$v1, 1\t\t\t# pass 1 back to main in $v1\njr\t$ra\n</code></pre>\n\n<p>verifySizeBad:  la $a0, errorMsg  li $v0, 4  syscall</p>\n\n<pre><code>li\t$v1, 0\t\t\t# pass 0 back to main in $v1\njr\t$ra</code></pre>\n\n<h1 id=\"-void-createarrayint-arraysize-returns-nothing\">&mdash;&mdash;&mdash;&mdash; void createArray(int arraySize), returns nothing</h1>\n\n<p>createArray:  add $s1, $a0, $0 # save passed arg (arraySize) to $s1  sw $ra, 0($sp) # save current $ra to stack</p>\n\n<pre><code>li\t$s2, 0\t\t\t# counter\nla\t$s3, array\t\t# create pointer to array[0]\n</code></pre>\n\n<p>createArrayLoop: # arraySize &lt; counter  beq $s1, $s2, createArrayDone</p>\n\n<pre><code>jal\treadNum\t\t\t# int readNum(), returns int in $v1\nadd\t$s4, $v1, $0\t# save arrayEntry to $s4</code></pre>\n\n<h1 id=\"--int-checknumpositivearrayentry-returns-0-or-1\">&mdash;&mdash;- int checkNumPositive(arrayEntry), returns 0 or 1</h1>\n\n<p>add $a0, $s4, $0 # pass arrayEntry to checkNumPositive  jal checkNumPositive  add $t0, $v1, $0 # save return value to $t4, either 0 or 1</p>\n\n<pre><code>beq\t$t0, $0, createArrayBad</code></pre>\n\n<h1 id=\"--int-divisibleby3arrayentry-returns-0-or-1\">&mdash;&mdash;- int divisibleBy3(arrayEntry), returns 0 or 1</h1>\n\n<p>add $a0, $s4, $0 # pass arrayEntry to divisibleBy3  jal divisibleBy3  add $t0, $v1, $0 # save return value to $t4, either 0 or 1</p>\n\n<pre><code>beq\t$t0, $0, createArrayBad</code></pre>\n\n<h1 id=\"--if-both-tests-pass-then-save-to-the-array-and-increment-the-counters\">&mdash;&mdash;- if both tests pass then save to the array and increment the counters</h1>\n\n<p>sw $s4, 0($s3)</p>\n\n<pre><code>addi\t$s3, $s3, 4\t# pointer++\naddi\t$s2, $s2, 1\t# counter--\nj\tcreateArrayLoop\n</code></pre>\n\n<p>createArrayDone:   lw $ra, 0($sp) # load old $ra from stack  jr $ra</p>\n\n<p>createArrayBad:  la $a0, invalidMsg  li $v0, 4  syscall</p>\n\n<pre><code>j\tcreateArrayLoop</code></pre>\n\n<h1 id=\"-void-reversearrayint-arraysize-returns-nothing\">&mdash;&mdash;&mdash;&mdash; void reverseArray(int arraySize), returns nothing</h1>\n\n<p>reverseArray:  add $t0, $a0, $0 # save passed arg (arraySize) to $t0</p>\n\n<pre><code>li\t\t$t1, 4\t\t# set $t1 = 4\nmult\t$t0, $t1\t# length * 4\nmflo\t$t1\t\t\t# set $t1 = length * 4\n\nla\t$t2, array\t# set pointer to start of the array\nla\t$t3, array\nadd\t$t3, $t3, $t1\naddi\t$t3, $t3, -4\t# set pointer to end of the array</code></pre>\n\n<p>reverseArraySwap:  bgt $t2, $t3, reverseArrayDone  lw $t4, 0($t2)  lw $t5, 0($t3)  sw $t5, 0($t2)  sw $t4, 0($t3)</p>\n\n<pre><code>addi\t$t2, $t2, 4\naddi\t$t3, $t3, -4\nj\treverseArraySwap</code></pre>\n\n<p>reverseArrayDone:  jr $ra</p>\n\n<h1 id=\"-void-printarrayint-arraysize-returns-nothing\">&mdash;&mdash;&mdash;&mdash; void printArray(int arraySize), returns nothing</h1>\n\n<p>printArray:  add $t0, $a0, $0 # save passed arg (arraySize) to $t0  la $t1, array</p>\n\n<p>printArrayLoop:  beq $t0, $0, printArrayDone  lw $a0, 0($t1)  li $v0, 1  syscall</p>\n\n<pre><code>li\t$v0, 4\nla\t$a0, space\nsyscall\n\naddi\t$t1, $t1, 4\naddi\t$t0, $t0, -1\nj\tprintArrayLoop\n</code></pre>\n\n<p>printArrayDone:  li $v0, 4  la $a0, newline  syscall  jr $ra</p>\n\n<h1 id=\"-int-divisibleby3int-arrayentry--returns-0-or-1\">&mdash;&mdash;&mdash;&mdash; int divisibleBy3(int arrayEntry) , returns 0 or 1</h1>\n\n<p>divisibleBy3:  add $t0, $a0, $0 # save passed arg (arrayEntry) to $t0</p>\n\n<pre><code>li\t$t1, 3\ndiv\t$t0, $t1\nmfhi\t$t3\n\nbne\t$t3, $0, divisibleBy3Bad\n\nli\t$v1, 1\t\t\t# pass 1 back to main in $v1\njr\t$ra</code></pre>\n\n<p>divisibleBy3Bad:  li $v1, 0 # pass 0 back to main in $v1  jr $ra</p>\n\n<h1 id=\"-int-checknumpositiveint-arrayentry--return-0-or-1\">&mdash;&mdash;&mdash;&mdash; int checkNumPositive(int arrayEntry) , return 0 or 1</h1>\n\n<p>checkNumPositive:  add $t0, $a0, $0 # save passed arg (arrayEntry) to $t0</p>\n\n<pre><code>blt\t$t0, $0, checkNumPositiveBad\n\nli\t$v1, 1\t\t\t# pass 1 back to main in $v1\njr\t$ra</code></pre>\n\n<p>checkNumPositiveBad:  li $v1, 0 # pass 0 back to main in $v1  jr $ra }</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-08-17-codefights-teamFinder-Python.md" . unix) f post (u . "CodeFights - teamFinder") (? . 28) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/08/codefights-teamfinder.html" . unix) (u . "/2017/08/codefights-teamfinder.html") (u . "2017-08-17T00:00:00") (? . 27) (? . 26) (c (u . "CodeFights") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Python") c (u . "Author: Henry Brooks")) (u . "\n<p>I have been working through problems from <a href=\"https://codefights.com\">codefights</a> and I found another problem that required <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to complete so I thought I would write up my process solving this problem.</p>") #t (u . "\n<p>I have been working through problems from <a href=\"https://codefights.com\">codefights</a> and I found another problem that required <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to complete so I thought I would write up my process solving this problem.</p>\n<!-- more-->\n\n<p><a href=\"https://codefights.com/challenge/af2y4DBXqibqmHyAN\">Description</a> You just heard about a new Pokemon tournament. In order to compete in the tournament, you must follow these rules:</p>\n\n<ul>\n <li>You must use <code>2</code> Pokemon;</li>\n <li>Their combined attack power must be equal to <code>maxPower</code>.</li></ul>\n\n<p>You and your friends would like to compete, but there is limited time to enter! You need to pick the first <code>2</code> Pokemon in your list whose combined attack power is equal to maxPower and return their indices (<code>0</code>-based). If there are no such pairs, return an empty array.</p>\n\n<p>Some of your friends are true Pokemon masters, and have hundreds of thousands of Pokemon. Make sure to help them find their Pokemon fast too!</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>For <code>pokemonList = [4, 3, 2, 3, 4]</code> and <code>maxPower = 6</code>, the output should be <code>teamFinder(pokemonList, maxPower) = [0, 2]</code>.</p>\n\n<p>The pairs that add up to <code>maxPower</code> are: <code>(4, 2), (3, 3), (2, 4)</code>.</p>\n\n<p>The pair that gets completed first is <code>(4, 2)</code> whose indices are <code>[0, 2]</code>.</p>\n\n<h2 id=\"version-1\">Version 1</h2>\n\n<p>I initially worked through the problem with racket to get an idea of how it should work and to check the test cases. Initially I wrote the program to recursively check all pairs starting with the first.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">headIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"mi\">2</span> <span class=\"n\">headIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">nextIndex</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [1, 5]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Unfortunately this ended up failing on test 3 and after reading the comments I found that the test actually checks based on the second element of the pair. Specifically, before you check a new pokemon in the list you must have checked all pairs of pokemon made with pokemon before it in the list.</p>\n\n<h2 id=\"version-2\">Version 2</h2>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">nextIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]))</span>\n <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [3, 4]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>It took me a couple minutes to rewrite the program to use <code>nextIndex</code> as the pivot but that was mostly due to some trial and error problems.</p>\n\n<h2 id=\"version-3\">Version 3</h2>\n\n<p>Currently my solution is running in <strong>O(n^2)</strong> however, looking over the comments I know that the solution needs to be close to <strong>O(n)</strong>.</p>\n\n<p>We can achieve this speed up by memorizing the values as we work through the <code>pokemonList</code>. Since we are basing our search off of the second value in the pair we only need to keep a list of the differences between the previous values and the <code>maxPower</code> value.</p>\n\n<p>If we were checking <code>(teamFinder '(10 5 2 3 7 5) 10)</code> we wouldn&rsquo;t want to check <code>maxPower = first + second</code> for every pair on each pass. Instead we want to build a list of <code>maxPower - first</code> and check if the <code>second</code> value is in the list.</p>\n\n<pre><code>(teamFinder '(10 5 2 3 7 5) 10)\ndifList = '(0),       value = 5\ndifList = '(0 5),     value = 2\ndifList = '(0 5 8),   value = 3\ndifList = '(0 5 8 7), value = 7</code></pre>\n\n<p>This leads us to the following code</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">ht</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._make-hash))\" style=\"color: inherit\">make-hash</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">flag</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">)]</span>\n        <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"n\">pokemonList</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">diff</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">maxPower</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n    <span class=\"kd\">#:break</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">ht</span> <span class=\"n\">v</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">ht</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">flag</span> <span class=\"no\">#f</span><span class=\"p\">))</span>    \n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/more-scheme..rkt)._hash-ref!))\" style=\"color: inherit\">hash-ref!</a></span> <span class=\"n\">ht</span> <span class=\"n\">diff</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">flag</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The only further improvements would be checking that the values v are less than <code>maxPower</code>. I finally converted the code to Python as codefights doesn&rsquo;t support racket code submissions.</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">teamFinder</span><span class=\"p\">(</span><span class=\"n\">pokemonList</span><span class=\"p\">,</span> <span class=\"n\">maxPower</span><span class=\"p\">):</span>\n    <span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pokemonList</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxPower</span><span class=\"p\">):</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">maxPower</span> <span class=\"o\">-</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">maxPower</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs211-lab2.md" . unix) f post (u . "CS211 Lab2 in Racket") (? . 3) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs211-lab2-in-racket.html" . unix) (u . "/2017/02/cs211-lab2-in-racket.html") (u . "2017-02-03T00:00:00") (? . 16) (? . 31) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<p>The purpose of this lab is to practice working with vectors.</p>\n\n<p>Write a program that reads an unknown number of integers from a data file called &ldquo;data.txt&rdquo; into a vector of integers named V. V is initially empty and grows as the user reads data from file.</p>\n\n<p>Once done copying data into vector V, you need to print the contents of V and perform some other tasks on the vector as described below.</p>") #t (u . "\n<p>The purpose of this lab is to practice working with vectors.</p>\n\n<p>Write a program that reads an unknown number of integers from a data file called &ldquo;data.txt&rdquo; into a vector of integers named V. V is initially empty and grows as the user reads data from file.</p>\n\n<p>Once done copying data into vector V, you need to print the contents of V and perform some other tasks on the vector as described below.</p>\n<!-- more-->\n\n<p>Your program should do the following:</p>\n\n<p>Create an empty vector of integers V.  Read the integers from data.txt into V. Ask the user to input a key. Then search for the key in vector V and inform the user about the existence (true / false) of the key in V. Print the contents of V.</p>\n\n<p><code>data.txt</code></p>\n\n<pre><code>5 6 12 87 100 28 35 66 77 29</code></pre>\n\n<p><code>output</code></p>\n\n<pre><code>#:filename \"./a.out &gt; output.txt input=&gt;12\"\n\nPlease enter a key to search for in data3.txt: 5\n6\n12 &lt;--\n87\n100\n28\n35\n66\n77\n29\n\nThe key was found</code></pre>\n\n<p><code>Lab1_Program3.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Initialized empty vector</span>\n  <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">V</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Initialized holding variable</span>\n  <span class=\"kt\">int</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Initialized inputFile</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data.txt\"</span><span class=\"p\">);</span>\n\t\n  <span class=\"c1\">// Load first element of inputFile into holding</span>\n  <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// While inputFile is sending results</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">V</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">holding</span><span class=\"p\">);</span>\n    <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\t\n  <span class=\"c1\">// Close inputfile</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\t\n\t\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> \n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please enter a key to search for in data3.txt: \"</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Initialize key and search flag</span>\n  <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Get user input</span>\n  <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Check all values in vector</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"nl\">val</span> <span class=\"p\">:</span> <span class=\"n\">V</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" &lt;--\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n      <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\t\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t\n  <span class=\"c1\">// If the found flag is true output positive result</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">found</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The key was found\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The key was not found\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\t\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.cpp</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-27-cs211-lab1-program2.md" . unix) f post (u . "CS211 Lab1 Program2 in Racket") (? . 15) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/01/cs211-lab1-program2-in-racket.html" . unix) (u . "/2017/01/cs211-lab1-program2-in-racket.html") (u . "2017-01-27T00:00:00") (? . 13) (? . 14) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"program-2\">Program 2</h2>\n\n<p>Write a program that reads test scores of students in a programming class from an input file, data.txt, and calculates the minimum, maximum, average test score for each student as well as the overall average score for the class. Each row of the file contains student name (no spaces), and 3 scores for test 1, test 2, and test 3, respectively.</p>") #t (u . "\n<h2 id=\"program-2\">Program 2</h2>\n\n<p>Write a program that reads test scores of students in a programming class from an input file, data.txt, and calculates the minimum, maximum, average test score for each student as well as the overall average score for the class. Each row of the file contains student name (no spaces), and 3 scores for test 1, test 2, and test 3, respectively.</p>\n<!-- more-->\n\n<p>Your main program should: - open the file and check for successful open, - then start reading one line at a time until EOF. For each line read, pass the grades for the three tests to a function called ProcessARow that calculates the minimum, maximum and average of the three grades. The results (minimum, maximum, and average) should be returned to the main program and the main program prints them on the screen in a table format. NOTE: minimum, maximum, average need to be sent by reference - Call the function, ProcessOverall, that calculates the overall average of all grades. NOTE: parameters must be sent by value</p>\n\n<p><code>data.txt</code></p>\n\n<pre><code>Bob     78   92   88\nSue     89   94   78\nFred   100   80   92\nGeorge  90   90   85\nMary    95   70   99\nJane   100   92   87}</code></pre>\n\n<p><code>output</code></p>\n\n<pre><code>Name           Average Score\n------------------------------\nBob                86.00\nSue                87.00\nFred               90.66\nGeorge             90.00\nMary               88.33\nJane               93.00\n------------------------------\nOverall Average:   89.16}</code></pre>\n\n<p><code>Lab1_Program1.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iomanip&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ProcessARow</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span><span class=\"p\">);</span>\n<span class=\"kt\">double</span> <span class=\"nf\">ProcessOverall</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">);</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// initialize file</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data.txt\"</span><span class=\"p\">);</span>\n    \n  <span class=\"c1\">// init variables</span>\n  <span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">third</span><span class=\"p\">,</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">maximum</span><span class=\"p\">;</span>\n  <span class=\"kt\">double</span> <span class=\"n\">average</span><span class=\"p\">,</span>\n         <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n  \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Name                Avg    Min    Max\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"-------------------------------------\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t  \n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\t\t  \n      <span class=\"c1\">// Pull info off file</span>\n      <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">name</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">first</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">second</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">third</span><span class=\"p\">;</span>\n\t\t  \n      <span class=\"c1\">// Send values to ProcessARow</span>\n      <span class=\"n\">ProcessARow</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">third</span><span class=\"p\">,</span> <span class=\"n\">average</span><span class=\"p\">,</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">maximum</span><span class=\"p\">);</span>\n\t\t  \n      <span class=\"c1\">// Add average to total</span>\n      <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">average</span><span class=\"p\">;</span>\n\t\t  \t\t  \n      <span class=\"c1\">// Output average for student</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name</span>\n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">fixed</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">showpoint</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">right</span> \n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">average</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"     \"</span> \n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">minimum</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"    \"</span>\n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">right</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">maximum</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t  \n    <span class=\"p\">}</span>\n\t  \n    <span class=\"c1\">// Close the file</span>\n    <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\t  \n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"-------------------------------------\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Overall Average:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ProcessOverall</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t  \n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Unable to open file\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ProcessARow</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">third</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">&amp;</span> <span class=\"n\">avg</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">maximum</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n  <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"n\">third</span><span class=\"p\">;</span>\n  <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"mf\">3.0</span><span class=\"p\">;</span>\n  <span class=\"n\">maximum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">),</span> <span class=\"n\">third</span><span class=\"p\">);</span>\n  <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">),</span> <span class=\"n\">third</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">double</span> <span class=\"nf\">ProcessOverall</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">avgs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">avgs</span> <span class=\"o\">/</span> <span class=\"mf\">6.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.cpp</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab4.md" . unix) f post (u . "CS231 Lab4") (? . 29) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs231-lab4.html" . unix) (u . "/2017/02/cs231-lab4.html") (u . "2017-02-06T00:00:00") (? . 31) (? . 32) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>This asm program takes a list of numbers from the user and returns the sum of those numbers.</p>") #t (u . "\n<p>This asm program takes a list of numbers from the user and returns the sum of those numbers.</p>\n<!-- more-->\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab4 sum numbers</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"===============================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: This program asks a user how many numbers they want to sum\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              Henry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"===============================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"How many numbers would you like to add together? \"</span>\n<span class=\"nl\">answer:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The sum of the numbers is \"</span>\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n<span class=\"c\">################### Print query</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n<span class=\"c\">################### Take number of values the user wants to sum</span>\n<span class=\"c\">################### and save it to $s0</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">add</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Initialize $s2 to 0 , sum = 0</span>\n\t\t<span class=\"nf\">add</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else sum += input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">loop:</span>\t\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$v0</span>\t\t<span class=\"c\"># $s2 += $v0 , sum += input</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># $s1++ , count++</span>\n\t\t<span class=\"no\">j</span> <span class=\"no\">loop</span>\n\n\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">answer</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"err\">}</span>\n\n<span class=\"err\">◊</span><span class=\"nf\">filebox-highlight</span><span class=\"p\">[</span><span class=\"err\">\"</span><span class=\"no\">Lab4b.asm</span><span class=\"err\">\"</span> <span class=\"err\">&#39;</span><span class=\"no\">asm</span><span class=\"p\">]</span><span class=\"err\">{</span>\n<span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab4 divisiblity</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: \\tThis program asks a user how many numbers they\\n\\t\\t\\twant to find that are divisible by 6\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              \\tHenry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       \\t02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"How many positive numbers that are divisable by 6 do you want to add?\\n\"</span>\n<span class=\"nl\">query2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter a number: \"</span>\n<span class=\"nl\">badcount:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Invalid number\\nPlease enter a number greater than zero\\n\"</span>\n<span class=\"nl\">arrow:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"==&gt; \"</span>\n<span class=\"nl\">good:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is divisible by 6\\n\"</span>\n<span class=\"nl\">bad:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not divisible by 6. Enter another number.\\n\"</span>\n<span class=\"nl\">error1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"**** ERROR: \"</span>\n<span class=\"nl\">error2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not in the range of 1 to 100. Enter another number.\\n\"</span>\n<span class=\"nl\">error3:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not a positive number. Enter another number.\\n\"</span>\n<span class=\"nl\">answer:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The sum of the positive numbers between 1 and 100 that are divisible by 6, is: \"</span>\n\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"nl\">main2:</span>\n<span class=\"c\">################### Print query</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n<span class=\"c\">################### Take user input</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Check that input is valid</span>\n\t\t<span class=\"nf\">ble</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">badinput</span>\t\t\t\n\n<span class=\"c\">################## If input is good set $s0 to $v0\t</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Initialize $s2 to 0 and $s1 to 0, sum = 0, count = 0</span>\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else sum += input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">loop:</span>\t\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\t\t<span class=\"c\"># s0 = total, s1 = count</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query2</span>\t\t<span class=\"c\"># load \"enter number:\" message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t\t<span class=\"c\"># load user input program</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># get user input, (cin)</span>\n\t\t\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># save input to save3 register</span>\n\t\t\n\t\t<span class=\"no\">beq</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">gt100</span>\t\t<span class=\"c\"># run if input is zero</span>\n\t\t\n\t\t<span class=\"no\">blt</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">ltzero</span>\t\t<span class=\"c\"># run if input is less than 0</span>\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">100</span>\t\t<span class=\"c\"># make t0 = 100</span>\n\t\t<span class=\"no\">blt</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">gt100</span>\t\t<span class=\"c\"># run if input is greater than 100</span>\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">6</span>\t\t<span class=\"c\"># make t0 = 6 </span>\n\t\t<span class=\"no\">div</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$t0</span>\t\t<span class=\"c\"># divide input by 6</span>\n\t\t<span class=\"no\">mfhi</span>\t\t\t<span class=\"no\">$t0</span>\t\t\t<span class=\"c\"># move remainder of input/6 to t0</span>\n\t\t<span class=\"no\">bne</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">notdiv</span>\t\t<span class=\"c\"># run if not divisible by 6</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load user input into arg0</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">good</span>\t\t<span class=\"c\"># load divisiblity good message</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s3</span>\t\t<span class=\"c\"># $s2 += $v0 , sum += input</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># $s1++ , count++</span>\n\t\t<span class=\"no\">j</span> <span class=\"no\">loop</span>\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badinput:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">##################### input is less than 0</span>\n<span class=\"nl\">ltzero:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print string</span>\n\t\t\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error3</span>\t\t<span class=\"c\"># load less than zero message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">j</span>\t\t\t<span class=\"no\">loop</span>\t\t\t<span class=\"c\"># return to loop</span>\n\n<span class=\"c\">#################### input is greater than 100</span>\n<span class=\"nl\">gt100:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print string</span>\n\t\t\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error2</span>\t\t<span class=\"c\"># load less than zero message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">j</span>\t\t\t<span class=\"no\">loop</span>\t\t\t<span class=\"c\"># return to loop</span>\n\n<span class=\"c\">#################### input is not divisible by 6</span>\n<span class=\"nl\">notdiv:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">bad</span>\t\t<span class=\"c\"># load not divisible message</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">loop</span>\n\n<span class=\"c\">#################### exit from program</span>\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">answer</span>\t\t<span class=\"c\"># load answer message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print answer message</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load sum</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print sum</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-24-daily-desmos-24apr.md" . unix) f post (u . "Daily Desmos - 24 April") (? . 25) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/daily-desmos-24-april.html" . unix) (u . "/2015/04/daily-desmos-24-april.html") (u . "2015-04-24T00:00:00") (? . 24) (? . 33) (c (u . "Daily Desmos") c (u . "20% Project") c (u . "Desmos") c (u . "Author: Henry Brooks")) (u . "\n<div class=\"figure\"><img src=\"/img/dd-24apr-a.gif\" alt=\"1\" />\n <p class=\"caption\">1</p></div>") #t (u . "\n<div class=\"figure\"><img src=\"/img/dd-24apr-a.gif\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n<!-- more-->\n\n<div class=\"figure\"><img src=\"/img/dd-24apr-b.gif\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<p><a href=\"http://dailydesmos.com/2015/04/24/warping-ellipse-1-advanced/\">Daily Desmos</a> posted this challenge on the 24th of April.</p>\n\n<p>Not an exact copy, but I feel that I touched on the important requirements. I&rsquo;m still trying to figure out a good way to replicate the repeating nature of the example.</p>\n\n<p>You can see my solution <a href=\"https://www.desmos.com/calculator/g3njuaox3d\">here</a></p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-05-cs211-lab7.md" . unix) f post (u . "CS211 Lab7") (? . 30) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/cs211-lab7.html" . unix) (u . "/2017/03/cs211-lab7.html") (u . "2017-03-05T00:00:00") (? . 32) (? . 10) (c (u . "CS211") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<p>I thought I would try a different approach to completing the assignment this week. Usually I modify the example problems and templates to fit the needs of the program.</p>\n\n<p>This week I thought figured I would try giving a testing based methodology a try. Specifically I wanted to incrementally build the program up by compiling and testing as I built it from scratch.</p>") #t (u . "\n<p>I thought I would try a different approach to completing the assignment this week. Usually I modify the example problems and templates to fit the needs of the program.</p>\n\n<p>This week I thought figured I would try giving a testing based methodology a try. Specifically I wanted to incrementally build the program up by compiling and testing as I built it from scratch.</p>\n<!-- more-->\n\n<h2 id=\"lab-7\">Lab 7</h2>\n\n<p>The purpose of this lab is to practice working with constants, static attributes, and friend functions.</p>\n\n<p>In this lab, you will design a <code>Student</code> class which has the following private attributes: * string name; * const long studentID;</p>\n\n<h2 id=\"version-1\">Version 1</h2>\n\n<p>I start with a constructor, setter, and getter for the required class. I test to make sure that all three are being called properly in main.</p>\n\n<p><code>main.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Student.h</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n <span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Student.cpp</code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\nStudent::Student() {\n    name = \"Unknown\";\n}\n\nstring Student::getName() const {\n    return name;\n}\n\nvoid Student::setName(string n) {\n    name = n;\n}</code><code>Version 2\n---\n\nSince the basic skeleton of the program was running I expanded the class to include studentID, major, classification, units, and tuition. My main.cpp is also expanded to test all of the variables added to the class.\n\nNote: I had some issues with this step. You need to remember to declare constant member values outside of the {} brackets of the constructor.</code>main.cpp<code></code><code>c++\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    Student student1;\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; endl;\n\n    student1.setName(\"steve\");\n    student1.setMajor(\"MATH\");\n    student1.setClassification(\"graduate\");\n    student1.setUnits(8);\n    student1.setTuition(1000.50);\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; endl;\n\n    Student student2 = Student(\"Julia Robertson\", \"MATH\", \"undergraduate\", 15);\n\n    cout &lt;&lt; student2.getName() &lt;&lt; \" \" \n\t &lt;&lt; student2.getID() &lt;&lt; \" \"\n\t &lt;&lt; student2.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student2.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student2.getUnits() &lt;&lt; endl;\n\n    return 0;\n}</code><code></code>Student.h<code></code><code>c++\n#ifndef STDUENT_H\n#define STUDENT_H\n#include &lt;string&gt;\nusing namespace std;\n\nclast Student {\n    private:\n        string name;\n        const long studentID;\n        string major;\n        string classification;\n        int units;\n        float tuition;\n    public:\n        Student();\n        Student(string, string, string, int);\n        \n        string getName() const;\n        long getId() const;\n        string getMajor() const;\n        string getClassification() const;\n\tint getUnits() const;\n\tfloat getTuition() const;\n\n        void setName();\n        void setMajor(string);\n\tvoid setClassification(string);\n\tvoid setUnits(int);\n\tvoid setTuition(float);\n };\n#endif</code><code></code>Student.cpp<code></code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\n// Constructor functions\nStudent::Student() {\n    name = \"Unknown\";\n    major = \"CS\";\n    classification = \"undergraduate\";\n    units = 12;\n    tuition = 0;\n}\nStudent::Student(string theName, string theMajor, string theClassification, int theUnits) : studentID(0) {\n \tname = theName;\n \tmajor = theMajor;\n \tclassification = theClassification;\n \tunits = theUnits;\n \ttuition = 0;\n}\n\n// Getter functions\nstring Student::getName() const {\n\treturn name;\n}\nlong Student::getID() const {\n\treturn studentID;\n}\nstring Student::getMajor() const {\n\treturn major;\n}\nstring Student::getClassification() const {\n\treturn classification;\n}\nint Student::getUnits() const {\n\treturn units;\n}\nfloat Student::getTuition() const {\n\treturn tuition;\n}\n\n// Setter functions\nvoid Student::setName(string n) {\n\tname = n;\n}\nvoid Student::setMajor(string m) {\n\tmajor = m;\n}\nvoid Student::setClassification(string c) {\n\tclassification = c;\n}\nvoid Student::setUnits(int u) {\n\tunits = u;\n}\nvoid Student::setTuition(float t) {\n\ttuition = t;\n}</code><code>Version 3\n---\n\nI now add the totalNumofStudents and nextStudentID values to the class. I also add the destructor to the class sense the value it deals with has been added.</code>main.cpp<code></code><code>c++\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    Student student1;\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    student1.setName(\"steve\");\n    student1.setMajor(\"MATH\");\n    student1.setClassification(\"graduate\");\n    student1.setUnits(8);\n    student1.setTuition(1000.50);\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    Student student2 = Student(\"Julia Robertson\", \"MATH\", \"undergraduate\", 15);\n\n    cout &lt;&lt; student2.getName() &lt;&lt; \" \" \n\t &lt;&lt; student2.getID() &lt;&lt; \" \"\n\t &lt;&lt; student2.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student2.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student2.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    student1.~Student();\n        \n    cout &lt;&lt; student2.getName() &lt;&lt; \" \" \n\t &lt;&lt; student2.getID() &lt;&lt; \" \"\n\t &lt;&lt; student2.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student2.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student2.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    return 0;\n}</code><code></code>Student.h<code></code><code>c++\n#ifndef STDUENT_H\n#define STUDENT_H\n#include &lt;string&gt;\nusing namespace std;\n\nclast Student {\n    static int totalNumofStudents;\n    static long nextStudentID;\n    \n    private:\n        string name;\n        const long studentID;\n        string major;\n        string classification;\n        int units;\n        float tuition;\n    public:\n        Student();\n        Student(string, string, string, int);\n        ~Student();\n        \n        string getName() const;\n        long getId() const;\n        string getMajor() const;\n        string getClassification() const;\n\tint getUnits() const;\n\tfloat getTuition() const;\n        int getTotalNumofStudents() const;\n        long getNextStudentID() const;\n\n        void setName();\n        void setMajor(string);\n\tvoid setClassification(string);\n\tvoid setUnits(int);\n\tvoid setTuition(float);\n};\n#endif</code><code></code>Student.cpp<code></code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\nint Student::totalNumofStudents = 0;\nlong Student::nextStudentID = 10000;\n\n// Constructor functions\nStudent::Student() : studentID(nextStudentID) {\n    name = \"Unknown\";\n    major = \"CS\";\n    classification = \"undergraduate\";\n    units = 12;\n    tuition = 0;\n}\nStudent::Student(string theName, string theMajor, string theClassification, int theUnits) : studentID(nextStudentID) {\n \tname = theName;\n \tmajor = theMajor;\n \tclassification = theClassification;\n \tunits = theUnits;\n \ttuition = 0;\n}\nStudent::~Student() {\n    totalNumofStudents--;\n}\n\n// Getter functions\nstring Student::getName() const {\n\treturn name;\n}\nlong Student::getID() const {\n\treturn studentID;\n}\nstring Student::getMajor() const {\n\treturn major;\n}\nstring Student::getClassification() const {\n\treturn classification;\n}\nint Student::getUnits() const {\n\treturn units;\n}\nfloat Student::getTuition() const {\n\treturn tuition;\n}\nint Student::getTotalNumofStudents() const {\n    return totalNumofStudents;\n}\nlong Student::getNextStudentID() const {\n    return nextStudentID;\n}\n\n// Setter functions\nvoid Student::setName(string n) {\n\tname = n;\n}\nvoid Student::setMajor(string m) {\n\tmajor = m;\n}\nvoid Student::setClassification(string c) {\n\tclassification = c;\n}\nvoid Student::setUnits(int u) {\n\tunits = u;\n}\nvoid Student::setTuition(float t) {\n\ttuition = t;\n}</code><code>Version 4\n---\n\nNext I add the printStudent, setData, and setTuition functions to finish off the assignment.  I also clean up the files to align with the specs given in the written assignment.</code>main.cpp<code></code><code>c++\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid setTuition(Student &amp;stu) {\n    if (stu.classification == \"graduate\")\n        stu.tuition = stu.units * 1000;\n    else\n        stu.tuition = stu.units * 700;\n}\n\nint main() {\n    Student student1;\n    student1.printStudent();    \n\n    Student student2 = Student(\"unknown\", \"PHYS\", \"graduate\", 0);\n    student2.setData(); // \"Julia Robertson\", \"MATH\", \"undergraduate\", 15\n\n    setTuition(student2);\n    student2.printStudent();\n\n    return 0;\n}</code><code></code>Student.h<code></code><code>c++\n#ifndef STDUENT_H\n#define STUDENT_H\n#include &lt;string&gt;\nusing namespace std;\n\nclast Student {\n    static int totalNumofStudents;\n    static long nextStudentID;\n\n    friend void setTuition(Students&amp;);\n    \n    private:\n        string name;\n        const long studentID;\n        string major;\n        string classification;\n        int units;\n        float tuition;\n    public:\n        Student();\n        Student(string, string, string, int);\n        ~Student();\n        \n        string getName() const;\n        long getId() const;\n        string getMajor() const;\n        string getClassification() const;\n\tint getUnits() const;\n\tfloat getTuition() const;\n        int getTotalNumofStudents() const;\n        long getNextStudentID() const;\n\n        void setName();\n        void setMajor(string);\n\tvoid setClassification(string);\n\tvoid setUnits(int);\n\tvoid setTuition(float);\n};\n#endif</code><code></code>Student.cpp<code></code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\nint Student::totalNumofStudents = 0;\nlong Student::nextStudentID = 10000;\n\n// Constructor functions\nStudent::Student() {\n    name = \"Unknown\";\n    major = \"CS\";\n    classification = \"undergraduate\";\n    units = 12;\n    tuition = 0;\n}\nStudent::Student(string theName, string theMajor, string theClassification, int theUnits) : studentID(0) {\n \tname = theName;\n \tmajor = theMajor;\n \tclassification = theClassification;\n \tunits = theUnits;\n \ttuition = 0;\n}\nStudent::~Student() {\n    totalNumofStudents--;\n}\n\n// Getter functions\nstring Student::getName() const {\n\treturn name;\n}\nlong Student::getID() const {\n\treturn studentID;\n}\nstring Student::getMajor() const {\n\treturn major;\n}\nstring Student::getClassification() const {\n\treturn classification;\n}\nint Student::getUnits() const {\n\treturn units;\n}\nfloat Student::getTuition() const {\n\treturn tuition;\n}\nint Student::getTotalNumofStudents() const {\n    return totalNumofStudents;\n}\nlong Student::getNextStudentID() const {\n    return nextStudentID;\n}\n\nvoid Student:printStudent() const {\n    cout &lt;&lt; \"Student name:   \" &lt;&lt; name &lt;&lt; endl\n\t &lt;&lt; \"Student id:     \" &lt;&lt; studentID &lt;&lt; endl\n\t &lt;&lt; \"Student major:  \" &lt;&lt; major &lt;&lt; endl\n\t &lt;&lt; \"Student class:  \" &lt;&lt; classification &lt;&lt; endl\n\t &lt;&lt; \"Student units:  \" &lt;&lt; units &lt;&lt; endl\n\t &lt;&lt; \"Tuition:        \" &lt;&lt; tuition &lt;&lt; endl;\n}\n\n// Setter functions\nvoid Student::setName(string n) {\n\tname = n;\n}\nvoid Student::setMajor(string m) {\n\tmajor = m;\n}\nvoid Student::setClassification(string c) {\n\tclassification = c;\n}\nvoid Student::setUnits(int u) {\n\tunits = u;\n}\nvoid Student::setTuition(float t) {\n\ttuition = t;\n}\n\nvoid Student::setData() {\n    string n, m, c; \t\t// Name, Major, and Classification\n    int u;\t\t\t// Units\n    cout &lt;&lt; \"Please enter the students name: \";\n    getline(cin, n);\n    name = n;\n    cout &lt;&lt; \"Please enter the students major: \";\n    cin &gt;&gt; m;\n    major = m;\n    cout &lt;&lt; \"Please enter the students classification: \";\n    cin &gt;&gt; c;\n    classification = c;\n    cout &lt;&lt; \"Please enter the students units: \";\n    cin &gt;&gt; u;\n    units = u;\t\n}</code>`</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-31-project-euler-with-haskell-9-10.md" . unix) f post (u . "Project Euler problem 9 and 10, with Haskell") (? . 9) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/10/project-euler-problem-9-and-10-with-haskell.html" . unix) (u . "/2015/10/project-euler-problem-9-and-10-with-haskell.html") (u . "2015-10-31T00:00:00") (? . 34) (? . 12) (c (u . "Project Euler") c (u . "Haskell") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"problem-9\">Problem 9</h2>\n\n<p>I went through a number of different versions of this program before I was happy with the answer.</p>") #t (u . "\n<h2 id=\"problem-9\">Problem 9</h2>\n\n<p>I went through a number of different versions of this program before I was happy with the answer.</p>\n<!-- more-->\n\n<p><code>ProjectEuler9.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem9 - Special Pythogorean triplet\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem9</span>\n    \n<span class=\"nf\">problem9</span> <span class=\"ow\">=</span> <span class=\"n\">head</span> <span class=\"n\">triplet</span>\n\n<span class=\"nf\">triplet</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"p\">],</span> <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">)],</span> <span class=\"n\">a</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-10\">Problem 10</h2>\n\n<p>Another really straight forward problem using infinite lists.</p>\n\n<p><code>ProjectEuler10.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem9 - Summation of primes\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem10</span>\n    \n<span class=\"nf\">problem10</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"p\">(</span><span class=\"n\">takeWhile</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"mi\">2000000</span><span class=\"p\">)</span> <span class=\"n\">primes</span><span class=\"p\">)</span>\n\n<span class=\"nf\">primes</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"kt\">:</span> <span class=\"n\">primes&#39;</span>\n    <span class=\"kr\">where</span> <span class=\"n\">isPrime</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"kt\">:</span><span class=\"n\">ps</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">rem</span><span class=\"p\">`</span> <span class=\"n\">p</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isPrime</span> <span class=\"n\">ps</span> <span class=\"n\">n</span>\n          <span class=\"n\">primes&#39;</span> <span class=\"ow\">=</span> <span class=\"mi\">3</span> <span class=\"kt\">:</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isPrime</span> <span class=\"n\">primes&#39;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"o\">..</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-04-12-20-project-witch-of-agnesi.md" . unix) f post (u . "20% Project - Witch of Agnesi") (? . 22) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/04/20-project-witch-of-agnesi.html" . unix) (u . "/2015/04/20-project-witch-of-agnesi.html") (u . "2015-04-12T00:00:00") (? . 20) (? . 21) (c (u . "20% Project") c (u . "Desmos") c (u . "Author: Henry Brooks")) (u . "\n<p>I was helping a student in AVID with calculus homework when I confronted with the following problem.</p>\n\n<div class=\"figure\"><img src=\"/img/witcha.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>") #t (u . "\n<p>I was helping a student in AVID with calculus homework when I confronted with the following problem.</p>\n\n<div class=\"figure\"><img src=\"/img/witcha.png\" alt=\"1\" />\n <p class=\"caption\">1</p></div>\n<!-- more-->\n\n<p>I worked on it for probably 3 minutes before I called it and asked WolframAlpha for help. The response</p>\n\n<div class=\"figure\"><img src=\"/img/witchb.png\" alt=\"2\" />\n <p class=\"caption\">2</p></div>\n\n<p>Once I saw the arctan I remembered that this was a trig identity listed in the back of the book and that you needed to be memorize it. In the 2 years since Calc 3 I haven&rsquo;t used it so I forgot this one.</p>\n\n<p>Since I have more mathematical knowledge at my disposile now than I did in during Calc 3 I thought I would dig around for a bit and try to remember why this specific identity related to the unit circle.</p>\n\n<p>What I found was the <a href=\"https://en.wikipedia.org/wiki/Witch_of_Agnesi\">Witch of Angensi</a>. Having seen the curve and animation on the wiki page, I decided to try and recreate the model shown on wikipedia with Desmos.</p>\n\n<p>In the end I was able to create a decent model of the Witch of Angensi and I thought I would share the process.</p>\n\n<div class=\"figure\"><img src=\"/img/witchc.png\" alt=\"3\" />\n <p class=\"caption\">3</p></div>\n\n<p>To start with I created the fixed lines and curves.</p>\n\n<div class=\"figure\"><img src=\"/img/witchd.png\" alt=\"4\" />\n <p class=\"caption\">4</p></div>\n\n<p>Next I created a variable t that would trace the function as it went from negative infinity to positive infinity. I also created a dashed vertical bar that would go along with the move.</p>\n\n<div class=\"figure\"><img src=\"/img/witche.png\" alt=\"5\" />\n <p class=\"caption\">5</p></div>\n\n<p>Next I had to create a line from the origin to the boundary of y=1. I used the point-slope formula for this equation.</p>\n\n<div class=\"figure\"><img src=\"/img/witchf.png\" alt=\"6\" />\n <p class=\"caption\">6</p></div>\n\n<p>To have the line only extend from the origin to the point (t,1) I have to add bounds to the equation using { } brackets.</p>\n\n<div class=\"figure\"><img src=\"/img/witchg.png\" alt=\"7\" />\n <p class=\"caption\">7</p></div>\n\n<p>Next I had to write an equation for the point of intersection between the circle and the line.</p>\n\n<p>This was actually harder than I thought it would be so I decided to start with a point on the circle and then fill in the rest.</p>\n\n<p><strong>So Starting over again</strong>.</p>\n\n<p>We begin by creating an equation for the point on the circle as it moves from -pi to pi.</p>\n\n<div class=\"figure\"><img src=\"/img/witchh.png\" alt=\"8\" />\n <p class=\"caption\">8</p></div>\n\n<p>Next we again use the point slope formula to create an equation from the origin to the point on the circle and we create second equation for the line that extends from the circle to the boundary at y=1.</p>\n\n<div class=\"figure\"><img src=\"/img/witchi.png\" alt=\"9\" />\n <p class=\"caption\">9</p></div>\n\n<p>Using the x_2 we found in the last step we can create the other lines for the triangle.</p>\n\n<div class=\"figure\"><img src=\"/img/witchj.png\" alt=\"10\" />\n <p class=\"caption\">10</p></div>\n\n<p>You can now hit play on t and have a nicely animated version of the Witch of Agnesi.</p>\n\n<p>If you want to expand your knowledge you can extend this model to include different values for the radius like I did in my example at the beginning of this post.</p>\n\n<div class=\"figure\"><img src=\"/img/witchk.gif\" alt=\"11\" />\n <p class=\"caption\">11</p></div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-17-project-euler-with-haskell-5-6-7.md" . unix) f post (u . "Project Euler problem 5, 6 and 7, with Haskell") (? . 35) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/10/project-euler-problem-5-6-and-7-with-haskell.html" . unix) (u . "/2015/10/project-euler-problem-5-6-and-7-with-haskell.html") (u . "2015-10-17T00:00:00") (? . 36) (? . 34) (c (u . "Project Euler") c (u . "Haskell") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"problem-5\">Problem 5</h2>\n\n<p>I have solved similar questions during math test so I went with a purely brute force solution to this problem as I wanted to test how long it would take to complete.</p>") #t (u . "\n<h2 id=\"problem-5\">Problem 5</h2>\n\n<p>I have solved similar questions during math test so I went with a purely brute force solution to this problem as I wanted to test how long it would take to complete.</p>\n<!-- more-->\n\n<p><code>ProjectEuler5.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    \n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem5 - Smallest multiple of the numbers 1-20\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem5</span>\n\n<span class=\"c1\">--Smallest multiple of the numbers 1-20</span>\n<span class=\"nf\">problem5</span> <span class=\"ow\">=</span> <span class=\"n\">head</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">],</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">7</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">9</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">11</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">13</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">16</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">17</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">19</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I was a little suprised that the program didn&rsquo;t crash considering how large a number it had to count up to. I&rsquo;m not sure if this says more about the Haskell langauge or modern computers. I do know that Haskell supports Integers that can be as large as the memory space of the computer, so I feel like this might be a win for Haskell.</p>\n\n<p>Solving this without programming is mostly an exercise in taking the prime factorization of the numbers from <code>1</code> to <code>20</code> and <a href=\"http://www.wolframalpha.com/input/?i=232792560\">combining them</a>.</p>\n\n<h2 id=\"problem-6\">Problem 6</h2>\n\n<p>Rather straight foward solution to this problem. I am still suprised by how clean the code looks in <code>haskell</code> compared to <code>c++</code>. There is much less <a href=\"link://https.en.wikipedia/org/wiki_Boilerplate\">boilerplate</a> code required to get a solution printed on screen.</p>\n\n<p><code>ProjectEuler6.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>    \n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem6 - Sum sqaure difference for the first 100 natural numbers\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem6</span>\n\n<span class=\"c1\">--Sum square difference</span>\n<span class=\"nf\">problem6</span> <span class=\"ow\">=</span> <span class=\"n\">sqSum</span> <span class=\"o\">-</span> <span class=\"n\">sumSq</span>\n\n<span class=\"nf\">sq</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n\n<span class=\"nf\">sqSum</span> <span class=\"ow\">=</span> <span class=\"n\">sq</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n<span class=\"nf\">sumSq</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">sq</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">])</span> \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-7\">Problem 7</h2>\n\n<p>Another really clean solution using infinite lists.</p>\n\n<p><code>ProjectEuler7.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>    \n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem7 - 10,001th Prime\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem7</span>\n\n<span class=\"c1\">--10001th Prime</span>\n<span class=\"nf\">problem7</span> <span class=\"ow\">=</span> <span class=\"n\">primes</span><span class=\"o\">!!</span><span class=\"mi\">10000</span> <span class=\"c1\">-- index starts at 0</span>\n\n<span class=\"nf\">primes</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"kt\">:</span> <span class=\"n\">primes&#39;</span>\n    <span class=\"kr\">where</span> <span class=\"n\">isPrime</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"kt\">:</span><span class=\"n\">ps</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">rem</span><span class=\"p\">`</span> <span class=\"n\">p</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isPrime</span> <span class=\"n\">ps</span> <span class=\"n\">n</span>\n          <span class=\"n\">primes&#39;</span> <span class=\"ow\">=</span> <span class=\"mi\">3</span> <span class=\"kt\">:</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isPrime</span> <span class=\"n\">primes&#39;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"o\">..</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><a href=\"https://projecteuler.net/problem=8\">Problem 8</a> from Project Euler is looking like a much more involved problem however, I&rsquo;m hopeful that I will be able to get it finished this week.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-12-hackerrank-climbing-the-leaderboard.md" . unix) f post (u . "hackerrank - Climbing the Leaderboard") (? . 2) 1505758767 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/hackerrank-climbing-the-leaderboard.html" . unix) (u . "/2017/09/hackerrank-climbing-the-leaderboard.html") (u . "2017-09-12T00:00:00") (? . 0) (? . 18) (c (u . "hackerrank") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Racket") c (u . "Author: Henry Brooks")) (u . "\n<p>While working through the algorithm problem sets available at <a href=\"https://www.hackerrank.com\">hackerrank</a> I found another problem that required Dynamic Programming technics to solve completely. <a href=\"https://www.hackerrank.com/challenges/climbing-the-leaderboard/problem\">Climbing the Leaderboard</a> requires an <code>O(n)</code> solution to complete the activity before it times out.</p>") #t (u . "\n<p>While working through the algorithm problem sets available at <a href=\"https://www.hackerrank.com\">hackerrank</a> I found another problem that required Dynamic Programming technics to solve completely. <a href=\"https://www.hackerrank.com/challenges/climbing-the-leaderboard/problem\">Climbing the Leaderboard</a> requires an <code>O(n)</code> solution to complete the activity before it times out.</p>\n<!-- more-->\n\n<h2 id=\"description\">Description</h2>\n\n<p>Alice is playing an arcade game and wants to climb to the top of the leaderboard. Can you help her track her ranking as she beats each level? The game uses <a href=\"https://en.wikipedia.org/wiki/Ranking#Dense_ranking_.28.221223.22_ranking.29\">Dense Ranking</a>, so its leaderboard works like this:</p>\n\n<ul>\n <li>\n  <p>The player with the highest score is ranked number 1 on the leaderboard.</p></li>\n <li>\n  <p>Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.</p></li></ul>\n\n<p>For example, four players have the scores <code>100</code>, <code>90</code>, <code>90</code>, and <code>80</code>. Those players will have ranks <code>1</code>, <code>2</code>, <code>2</code>, and <code>3</code>, respectively.</p>\n\n<p>When Alice starts playing, there are already <code>n</code> people on the leaderboard. The score of each player <code>i</code> is denoted by <code>s_i</code>. Alice plays for <code>m</code> levels, and we denote her total score after passing each level <code>j</code> as <code>alice_j</code>. After completing each level, Alice wants to know her current rank.</p>\n\n<p>You are given an array, <code>scores</code>, of monotonically decreasing leaderboard scores, and another array, <code>alice</code>, of Alice&rsquo;s cumulative scores for each level of the game. You must print <code>m</code> integers. The <code>j^th</code> integer should indicate the current rank of alice after passing the <code>j^th</code> level.</p>\n\n<h2 id=\"version-1\">Version 1</h2>\n\n<p>I began by creating functions that would read the list and determine location where we should place the new score.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">([</span><span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">))]</span>\n       <span class=\"p\">[</span><span class=\"n\">N*</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._sort))\" style=\"color: inherit\">sort</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._remove-duplicates))\" style=\"color: inherit\">remove-duplicates</a></span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">N**</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">N*</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">N*</span><span class=\"p\">)])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">j</span><span class=\"p\">)))]</span>\n       <span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">M</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">))])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/places.html#(form._((lib._racket/place..rkt)._place))\" style=\"color: inherit\">place</a></span> <span class=\"n\">i</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._caar))\" style=\"color: inherit\">caar</a></span> <span class=\"n\">L</span><span class=\"p\">))</span>\n                <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))\" style=\"color: inherit\">empty?</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span> <span class=\"n\">L</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdar))\" style=\"color: inherit\">cdar</a></span> <span class=\"n\">L</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._caar))\" style=\"color: inherit\">caar</a></span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdar))\" style=\"color: inherit\">cdar</a></span> <span class=\"n\">L</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._caar))\" style=\"color: inherit\">caar</a></span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdar))\" style=\"color: inherit\">cdar</a></span> <span class=\"n\">L</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/places.html#(form._((lib._racket/place..rkt)._place))\" style=\"color: inherit\">place</a></span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span> <span class=\"n\">L</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((lib._racket/private/misc..rkt)._displayln))\" style=\"color: inherit\">displayln</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/places.html#(form._((lib._racket/place..rkt)._place))\" style=\"color: inherit\">place</a></span> <span class=\"n\">i</span> <span class=\"n\">N**</span><span class=\"p\">))))</span>\n\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">10740</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">10756</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">12</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">11304</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">11100</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">10700</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">10701</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">4</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"version-2\">Version 2</h2>\n\n<p>My initial attempt at increasing the speed of the funtion was to cleaning up the <code>place</code> funtion, specifically the conditional statement with it&rsquo;s 4 branches. While I was able to remove a clause from the condition and increased the execution speed by a factor of 2, the <code>place</code> function was still taking <code>O(n^2)</code> time.</p>\n\n<p>I also recieved a small improvement in the speed of the program by rereading the discription and realizing that I didn&rsquo;t need to sort the list of scores as they are given in descreasing order. However this improvement wasn&rsquo;t significant and my testing showed that it only increased the performance by approximately <code>3%</code>.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">([</span><span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">))]</span>\n       <span class=\"p\">[</span><span class=\"n\">N*</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._remove-duplicates))\" style=\"color: inherit\">remove-duplicates</a></span> <span class=\"n\">N</span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">N**</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">y</span><span class=\"p\">)))</span>\n                 <span class=\"n\">N*</span>\n                 <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._range))\" style=\"color: inherit\">range</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">N*</span><span class=\"p\">)))]</span>\n       <span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">M</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">))])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/places.html#(form._((lib._racket/place..rkt)._place))\" style=\"color: inherit\">place</a></span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n      <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span> <span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._caar))\" style=\"color: inherit\">caar</a></span> <span class=\"n\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdar))\" style=\"color: inherit\">cdar</a></span> <span class=\"n\">l</span><span class=\"p\">)]</span>\n      <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))\" style=\"color: inherit\">empty?</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span> <span class=\"n\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdar))\" style=\"color: inherit\">cdar</a></span> <span class=\"n\">l</span><span class=\"p\">))]</span>\n      <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/places.html#(form._((lib._racket/place..rkt)._place))\" style=\"color: inherit\">place</a></span> <span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span> <span class=\"n\">l</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((lib._racket/private/misc..rkt)._displayln))\" style=\"color: inherit\">displayln</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/places.html#(form._((lib._racket/place..rkt)._place))\" style=\"color: inherit\">place</a></span> <span class=\"n\">i</span> <span class=\"n\">N**</span><span class=\"p\">))))</span>\n\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">5588</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">5589</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">0</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">5676</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">5673</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">8</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">5808</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">5815</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">12</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"version-3\">Version 3</h2>\n\n<p>After reading some of the comments on the problem I decided to refactor the <code>place</code> function to take advantage of <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a> concepts. Specifically, to cache intermediate results so that the program would run in <code>O(n)</code> time.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">([</span><span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">))]</span>\n       <span class=\"p\">[</span><span class=\"n\">N*</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._remove-duplicates))\" style=\"color: inherit\">remove-duplicates</a></span> <span class=\"n\">N</span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">len</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">N*</span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">M</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span><span class=\"p\">))])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">index</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/places.html#(def._((lib._racket/place..rkt)._dynamic-place))\" style=\"color: inherit\">dynamic-place</a></span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">update-call</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">index</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/places.html#(def._((lib._racket/place..rkt)._dynamic-place))\" style=\"color: inherit\">dynamic-place</a></span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">index</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n      <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">len</span> <span class=\"n\">i</span> <span class=\"mi\">-1</span><span class=\"p\">)]</span>\n      <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">len</span> <span class=\"n\">i</span> <span class=\"mi\">-1</span><span class=\"p\">)]</span>\n      <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"n\">update-call</span><span class=\"p\">)]))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((lib._racket/private/misc..rkt)._displayln))\" style=\"color: inherit\">displayln</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/places.html#(def._((lib._racket/place..rkt)._dynamic-place))\" style=\"color: inherit\">dynamic-place</a></span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._reverse))\" style=\"color: inherit\">reverse</a></span> <span class=\"n\">N*</span><span class=\"p\">)</span> <span class=\"n\">index</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"version-4\">Version 4</h2>\n\n<p>I could never get my racket version to run in <code>O(n)</code> time. Writing imprerative code has always been dificult for me in racket.</p>\n\n<p>I was able to create some python code that was able to run in <code>O(n)</code> time though. It uses a simple while condition inside of a for loop. In a worse case senerio this code runs in <code>O(n+m)</code> time.</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"ch\">#!/bin/python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())</span>\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">scores_temp</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">scores_temp</span> <span class=\"ow\">in</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)]</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())</span>\n<span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">alice_temp</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">alice_temp</span> <span class=\"ow\">in</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)]</span>\n<span class=\"c1\"># your code goes here</span>\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)))</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">alice</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"ow\">and</span> <span class=\"n\">a</span> <span class=\"o\">&gt;=</span> <span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]):</span>\n        <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2015-10-10-project-euler-with-haskell-3-4.md" . unix) f post (u . "Project Euler problem 3 and 4, with Haskell") (? . 36) 1505758600 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2015/10/project-euler-problem-3-and-4-with-haskell.html" . unix) (u . "/2015/10/project-euler-problem-3-and-4-with-haskell.html") (u . "2015-10-10T00:00:00") (? . 33) (? . 35) (c (u . "Project Euler") c (u . "Haskell") c (u . "Author: Henry Brooks")) (u . "\n<p>I have been looking into Haskell more this week and I thought I would continue on with this project for the time being.</p>\n\n<h2 id=\"problem-3\">Problem 3</h2>\n\n<p>I was finally able to use an infinite list in one of my programs. I&rsquo;m honestly suprised that the code for this problem comes together this cleanly. Thinking about how I would complete this problem with an eager language and a non-infinite list I can only image the complexity of the code would increase considerably.</p>") #t (u . "\n<p>I have been looking into Haskell more this week and I thought I would continue on with this project for the time being.</p>\n\n<h2 id=\"problem-3\">Problem 3</h2>\n\n<p>I was finally able to use an infinite list in one of my programs. I&rsquo;m honestly suprised that the code for this problem comes together this cleanly. Thinking about how I would complete this problem with an eager language and a non-infinite list I can only image the complexity of the code would increase considerably.</p>\n<!-- more-->\n\n<p>The code I have right now is nearly identical to the mathematical notation I would use to express this idea.</p>\n\n<p><strong>S</strong> = <code>[x | x ∈ Primes, x &lt; √(600,851,475,143), 600,851,475,143 ≡ 0 mod x ]</code></p>\n\n<p><code>max S</code></p>\n\n<p><code>ProjectEuler3.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    \n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem3 - Largest prime factor of 600851475143\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem3</span>\n\n<span class=\"c1\">--Largest prime factor of 600851475143</span>\n<span class=\"nf\">problem3</span> <span class=\"ow\">=</span> <span class=\"n\">last</span> <span class=\"p\">(</span><span class=\"n\">factors</span> <span class=\"mi\">600851475143</span><span class=\"p\">)</span>\n\n<span class=\"nf\">primes</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"kt\">:</span> <span class=\"n\">primes&#39;</span>\n    <span class=\"kr\">where</span> <span class=\"n\">isPrime</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"kt\">:</span><span class=\"n\">ps</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">rem</span><span class=\"p\">`</span> <span class=\"n\">p</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isPrime</span> <span class=\"n\">ps</span> <span class=\"n\">n</span>\n          <span class=\"n\">primes&#39;</span> <span class=\"ow\">=</span> <span class=\"mi\">3</span> <span class=\"kt\">:</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isPrime</span> <span class=\"n\">primes&#39;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"o\">..</span><span class=\"p\">]</span>\n\n<span class=\"nf\">floor_sqrt_int</span> <span class=\"ow\">=</span> <span class=\"n\">floor</span> <span class=\"o\">.</span> <span class=\"n\">sqrt</span> <span class=\"o\">.</span> <span class=\"n\">fromIntegral</span>\n\n<span class=\"nf\">factors</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">factors</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">(</span><span class=\"n\">takeWhile</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">floor_sqrt_int</span> <span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"n\">primes</span><span class=\"p\">),</span> <span class=\"n\">mod</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"problem-4\">Problem 4</h2>\n\n<p>Unfortunately Haskell doesn&rsquo;t seem to have a builtin function <a href=\"https://reference.wolfram.com/language/ref/IntegerDigits.html\">IntegerDigits</a> like <a href=\"http://www.wolfram.com/mathematica/\">Mathematica</a> does.</p>\n\n<p>Luckily I was able to find a decent solution for breaking an integer up into its component digits. From there the actual functions are rather straight forward.</p>\n\n<p><code>ProjectEuler4.hs</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>    \n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem4 - Largest palindrome made from the product of two 3-digit numbers\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem4</span>\n\n<span class=\"c1\">--Largest palindrome made from the product of two 3-digit numbers</span>\n<span class=\"nf\">problem4</span> <span class=\"ow\">=</span> <span class=\"n\">maximum</span> <span class=\"n\">productList</span>\n\n<span class=\"nf\">palindromeCheck</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">palindromeCheck</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">palindrome</span> <span class=\"p\">(</span><span class=\"n\">digits</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"nf\">palindrome</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">palindrome</span> <span class=\"n\">n</span>\n    <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"kt\">[]</span> <span class=\"ow\">=</span> <span class=\"kt\">True</span>\n    <span class=\"o\">|</span> <span class=\"n\">length</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"kt\">True</span>\n    <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">head</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">/=</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">False</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">palindrome</span> <span class=\"p\">(</span><span class=\"n\">init</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">n</span><span class=\"p\">)))</span>\n\n<span class=\"nf\">digits</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">digits</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">read</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">show</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"nf\">productList</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"mi\">998</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"mi\">998</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">palindromeCheck</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">))]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Thinking about how I would solve a problem in Haskell is turning out to be a welcome break from teaching. Having problems that have workable solutions is a nice change.</p>"))))