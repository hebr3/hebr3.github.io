((3) 0 () 14 ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-08-17-codefights-teamFinder-Python.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab5.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-04-01-racket-memorized-function.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-09-case-study-with-big-data-comes-big-responsibility.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs231-lab2.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab4.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-02-cs231-assignment1.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-30-codefights-memorized-function.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-30-cs211-lab1-program3.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-27-cs211-lab1-program2.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs211-lab2.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-15-cs231-test-question.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-05-cs211-lab7.md" . unix) (p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-25-cs211-lab1-program1.md" . unix)) () (h ! (equal) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-09-09-case-study-with-big-data-comes-big-responsibility.md" . unix) f post (u . "Case Study - With Big Data Comes Big Responsibility") (? . 3) 1505086808 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/09/case-study-with-big-data-comes-big-responsibility.html" . unix) (u . "/2017/09/case-study-with-big-data-comes-big-responsibility.html") (u . "2017-09-09T00:00:00") (? . 0) #f (c (u . "Case Study") c (u . "Cybersecurity") c (u . "MIS522") c (u . "Author: Henry Brooks")) (u . "\n<h2 id=\"week-2-case-study\">Week 2 Case Study</h2>\n\n<p><a href=\"https://hbr.org/2014/11/with-big-data-comes-big-responsibility\">With Big Data Comes Big Responsibility</a></p>\n\n<p>This weeks case study examines an article from the Harvard Business Review concerning the current and future usage of smart devices and the collection of personal data.</p>") #t (u . "\n<h2 id=\"week-2-case-study\">Week 2 Case Study</h2>\n\n<p><a href=\"https://hbr.org/2014/11/with-big-data-comes-big-responsibility\">With Big Data Comes Big Responsibility</a></p>\n\n<p>This weeks case study examines an article from the Harvard Business Review concerning the current and future usage of smart devices and the collection of personal data.</p>\n<!-- more-->\n\n<p>In the article Professor Alex Pentland from MIT shares some of his observations and concerning about the sharing habits individuals and views concerning the collection of personal data. Reading this article with an eye towards cybersecurity issues I found that the Professor touched on two topics that should be examined more closely.</p>\n\n<p>First is the issue of business ethics as it relates to the collection and storage of personal data, especially biometric data. While sales teams and designers are constantly thinking of new ways to monetize user data, care has to be taken to consider the long term costs of storing personal user data. It isn&rsquo;t a stretch to consider that the biometric and locational data being collected by smart devices is nearly equivalent to medical data. While the laws might not be in place currently, I expect that eventually this data will be classified with medical data and require similar protections and regulations. A company jumping that decides to start collecting personal data from IoT devices has to consider that this data might have strong regulations place on it one day. If a company is trying to market specialty device they need to consider exactly how much data they really need to collect and store.</p>\n\n<p>The second issue I see with the collection of personal data is related to its long term storage. There have been a number of security breaches related to personal data. These breach are a result of there being different entities that are willing to purchase user data for use in targeted marketing and analytics. Having a collection of user data on your service increases the risk of being targeted for this user data. A company needs to consider the cost of securing and storing personal user data when creating their business plans. Does that data being stored represent more potential profit to the company that liability.</p>\n\n<p>Many people enjoy having analytic data for their activities. Being able to present users with detailed breakdowns of data they are interested in and being able to share that data represents a real business opportunity. Companies just need to properly account for the costs related to these projects before they start making long term investments.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab4.md" . unix) f post (u . "CS231 Lab4") (? . 5) 1505087699 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs231-lab4.html" . unix) (u . "/2017/02/cs231-lab4.html") (u . "2017-02-06T00:00:00") (? . 4) (? . 1) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>This asm program takes a list of numbers from the user and returns the sum of those numbers.</p>") #t (u . "\n<p>This asm program takes a list of numbers from the user and returns the sum of those numbers.</p>\n<!-- more-->\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab4 sum numbers</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"===============================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: This program asks a user how many numbers they want to sum\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              Henry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"===============================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"How many numbers would you like to add together? \"</span>\n<span class=\"nl\">answer:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The sum of the numbers is \"</span>\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n<span class=\"c\">################### Print query</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n<span class=\"c\">################### Take number of values the user wants to sum</span>\n<span class=\"c\">################### and save it to $s0</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">add</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Initialize $s2 to 0 , sum = 0</span>\n\t\t<span class=\"nf\">add</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else sum += input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">loop:</span>\t\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$v0</span>\t\t<span class=\"c\"># $s2 += $v0 , sum += input</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># $s1++ , count++</span>\n\t\t<span class=\"no\">j</span> <span class=\"no\">loop</span>\n\n\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">answer</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"err\">}</span>\n\n<span class=\"err\">◊</span><span class=\"nf\">filebox-highlight</span><span class=\"p\">[</span><span class=\"err\">\"</span><span class=\"no\">Lab4b.asm</span><span class=\"err\">\"</span> <span class=\"err\">&#39;</span><span class=\"no\">asm</span><span class=\"p\">]</span><span class=\"err\">{</span>\n<span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab4 divisiblity</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: \\tThis program asks a user how many numbers they\\n\\t\\t\\twant to find that are divisible by 6\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              \\tHenry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       \\t02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"How many positive numbers that are divisable by 6 do you want to add?\\n\"</span>\n<span class=\"nl\">query2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter a number: \"</span>\n<span class=\"nl\">badcount:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Invalid number\\nPlease enter a number greater than zero\\n\"</span>\n<span class=\"nl\">arrow:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"==&gt; \"</span>\n<span class=\"nl\">good:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is divisible by 6\\n\"</span>\n<span class=\"nl\">bad:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not divisible by 6. Enter another number.\\n\"</span>\n<span class=\"nl\">error1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"**** ERROR: \"</span>\n<span class=\"nl\">error2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not in the range of 1 to 100. Enter another number.\\n\"</span>\n<span class=\"nl\">error3:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not a positive number. Enter another number.\\n\"</span>\n<span class=\"nl\">answer:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The sum of the positive numbers between 1 and 100 that are divisible by 6, is: \"</span>\n\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"nl\">main2:</span>\n<span class=\"c\">################### Print query</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n<span class=\"c\">################### Take user input</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Check that input is valid</span>\n\t\t<span class=\"nf\">ble</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">badinput</span>\t\t\t\n\n<span class=\"c\">################## If input is good set $s0 to $v0\t</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Initialize $s2 to 0 and $s1 to 0, sum = 0, count = 0</span>\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else sum += input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">loop:</span>\t\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\t\t<span class=\"c\"># s0 = total, s1 = count</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query2</span>\t\t<span class=\"c\"># load \"enter number:\" message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t\t<span class=\"c\"># load user input program</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># get user input, (cin)</span>\n\t\t\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># save input to save3 register</span>\n\t\t\n\t\t<span class=\"no\">beq</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">gt100</span>\t\t<span class=\"c\"># run if input is zero</span>\n\t\t\n\t\t<span class=\"no\">blt</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">ltzero</span>\t\t<span class=\"c\"># run if input is less than 0</span>\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">100</span>\t\t<span class=\"c\"># make t0 = 100</span>\n\t\t<span class=\"no\">blt</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">gt100</span>\t\t<span class=\"c\"># run if input is greater than 100</span>\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">6</span>\t\t<span class=\"c\"># make t0 = 6 </span>\n\t\t<span class=\"no\">div</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$t0</span>\t\t<span class=\"c\"># divide input by 6</span>\n\t\t<span class=\"no\">mfhi</span>\t\t\t<span class=\"no\">$t0</span>\t\t\t<span class=\"c\"># move remainder of input/6 to t0</span>\n\t\t<span class=\"no\">bne</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">notdiv</span>\t\t<span class=\"c\"># run if not divisible by 6</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load user input into arg0</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">good</span>\t\t<span class=\"c\"># load divisiblity good message</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s3</span>\t\t<span class=\"c\"># $s2 += $v0 , sum += input</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># $s1++ , count++</span>\n\t\t<span class=\"no\">j</span> <span class=\"no\">loop</span>\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badinput:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">##################### input is less than 0</span>\n<span class=\"nl\">ltzero:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print string</span>\n\t\t\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error3</span>\t\t<span class=\"c\"># load less than zero message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">j</span>\t\t\t<span class=\"no\">loop</span>\t\t\t<span class=\"c\"># return to loop</span>\n\n<span class=\"c\">#################### input is greater than 100</span>\n<span class=\"nl\">gt100:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print string</span>\n\t\t\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error2</span>\t\t<span class=\"c\"># load less than zero message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">j</span>\t\t\t<span class=\"no\">loop</span>\t\t\t<span class=\"c\"># return to loop</span>\n\n<span class=\"c\">#################### input is not divisible by 6</span>\n<span class=\"nl\">notdiv:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">bad</span>\t\t<span class=\"c\"># load not divisible message</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">loop</span>\n\n<span class=\"c\">#################### exit from program</span>\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">answer</span>\t\t<span class=\"c\"># load answer message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print answer message</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load sum</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print sum</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-25-cs211-lab1-program1.md" . unix) f post (u . "CS211 Lab1 Program1 in Racket") (? . 13) 1505089222 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/01/cs211-lab1-program1-in-racket.html" . unix) (u . "/2017/01/cs211-lab1-program1-in-racket.html") (u . "2017-01-25T00:00:00") #f (? . 9) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<p>I&rsquo;m currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS211</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> and I thought it would be interesting to try re-writing the labs in <a href=\"https://racket-lang.org\">Racket</a> after I submit the work in class. I figure that trying to solve the same problem with two different languages might help me to better understand the material and give me another excuse to keep messing around with Racket.</p>") #t (u . "\n<p>I&rsquo;m currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS211</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> and I thought it would be interesting to try re-writing the labs in <a href=\"https://racket-lang.org\">Racket</a> after I submit the work in class. I figure that trying to solve the same problem with two different languages might help me to better understand the material and give me another excuse to keep messing around with Racket.</p>\n<!-- more-->\n\n<h4 id=\"program-1\">Program 1</h4>\n\n<p>Your favorite shoe store is having a sale – all pairs of shoes are <code>35%</code> off! Write a program that reads shoe prices in stock at the local store from an input file, shoe.txt. Each row in the file contains a shoe serial number and price. Calculate the sale price of every pair of shoes, and what the final cost of the shoes is when the sales tax is applied to the discounted price. The calculated data must be saved in an output file, shoeSale.txt.</p>\n\n<p>You MUST use a named constant for both the tax rate (<code>8.5%</code>) and discount rate (<code>35%</code>). Since the results displayed are monetary values, your output must be displayed with two decimal places of precision. Be sure decimals “line up” when you output the information.</p>\n\n<p><code>shoe.txt</code></p>\n\n<pre><code>234019 75.00\n234490 124.99\n347269 50.00\n239801 149.99\n487241 99.99\n982111 175.00}</code></pre>\n\n<p><code>shoeSale.txt</code></p>\n\n<pre><code>234019 52.89\n234490 88.15\n347269 35.26\n239801 105.78\n487241 70.51\n982111 123.41}</code></pre>\n\n<p><code>Lab1_Program1.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iomanip&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// init constants</span>\n<span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">TAX_RATE</span> <span class=\"o\">=</span> <span class=\"mf\">0.085</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">DISCOUNT_RATE</span> <span class=\"o\">=</span> <span class=\"mf\">0.35</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// initialize files</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"shoe.txt\"</span><span class=\"p\">);</span>\n  \n  <span class=\"n\">ofstream</span> <span class=\"n\">outputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">outputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"shoeSales.txt\"</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// init variables</span>\n  <span class=\"kt\">int</span> <span class=\"n\">serialNumber</span><span class=\"p\">;</span>\n  <span class=\"kt\">double</span> <span class=\"n\">price</span><span class=\"p\">,</span>\n         <span class=\"n\">discount</span><span class=\"p\">,</span>\n\t <span class=\"n\">discountedPrice</span><span class=\"p\">,</span>\n\t <span class=\"n\">saleTax</span><span class=\"p\">,</span>\n\t <span class=\"k\">final</span><span class=\"p\">;</span>\n  \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Pull info off file</span>\n      <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">serialNumber</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">price</span><span class=\"p\">;</span>\n      \n      <span class=\"c1\">// Convert price to final price</span>\n      <span class=\"n\">discount</span> <span class=\"o\">=</span> <span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"n\">DISCOUNT_RATE</span><span class=\"p\">;</span>\n      <span class=\"n\">discountedPrice</span> <span class=\"o\">=</span> <span class=\"n\">price</span> <span class=\"o\">-</span> <span class=\"n\">discount</span><span class=\"p\">;</span>\n      <span class=\"n\">saleTax</span> <span class=\"o\">=</span> <span class=\"n\">discountedPrice</span> <span class=\"o\">*</span> <span class=\"n\">TAX_RATE</span><span class=\"p\">;</span>\n      <span class=\"k\">final</span> <span class=\"o\">=</span> <span class=\"n\">discountedPrice</span> <span class=\"o\">+</span> <span class=\"n\">saleTax</span><span class=\"p\">;</span>\n      \n      <span class=\"c1\">// Output final serialNumber and price to file</span>\n      <span class=\"n\">outputFile</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">serialNumber</span>\n                 <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                 <span class=\"o\">&lt;&lt;</span> <span class=\"n\">fixed</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">showpoint</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">right</span> \n                 <span class=\"o\">&lt;&lt;</span> <span class=\"k\">final</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// Close the file</span>\n    <span class=\"n\">outputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Unable to open file\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.rkt</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">TAX_RATE</span> <span class=\"mf\">0.085</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">DISCOUNT_RATE</span> <span class=\"mf\">0.35</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">inputFile</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/file-ports.html#(def._((lib._racket/private/base..rkt)._open-input-file))\" style=\"color: inherit\">open-input-file</a></span> <span class=\"s2\">\"shoe.txt\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">outputFile</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/file-ports.html#(def._((lib._racket/private/base..rkt)._open-output-file))\" style=\"color: inherit\">open-output-file</a></span> <span class=\"s2\">\"shoeSales.txt\"</span>\n                    <span class=\"kd\">#:exists</span> <span class=\"o\">'</span><span class=\"ss\">replace</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-04-01-racket-memorized-function.md" . unix) f post (u . "Memoization in Racket") (? . 2) 1505086797 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/04/memoization-in-racket.html" . unix) (u . "/2017/04/memoization-in-racket.html") (u . "2017-04-01T00:00:00") (? . 7) (? . 0) (c (u . "Racket") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">totalOnes</a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p>") #t (u . "\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">totalOnes</a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">c</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"n\">c</span><span class=\"p\">))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></span> <span class=\"mi\">1000</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;(time (fib 40))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>While the standard Fibonacci formula performed as bad as it always does for large values, I was quite suprised by the speed up generated by the memoization method. Memoization uses almost the exact formula for calculating Fibonacci yet it has a speed up that is even with the iterative version into the 10&rsquo;s of thousands.</p>\n\n<p>Unfortunately I was never able to find an iterative version of <code>totalOnes</code> code however, there is still a significant increase in speed associated with converting the equation to use memoization.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">n2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient))\" style=\"color: inherit\">quotient</a></span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">n</span> <span class=\"n\">n2</span> <span class=\"mi\">1</span><span class=\"p\">))))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">78</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">63</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">0</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"mi\">9884999</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-set!))\" style=\"color: inherit\">vector-set!</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">i2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient))\" style=\"color: inherit\">quotient</a></span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                               <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">i</span> <span class=\"n\">i2</span> <span class=\"mi\">1</span><span class=\"p\">)))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">19</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"mi\">9884999</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-02-cs231-assignment1.md" . unix) f post (u . "CS231 Assignment1") (? . 6) 1505087930 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/cs231-assignment1.html" . unix) (u . "/2017/03/cs231-assignment1.html") (u . "2017-03-02T00:00:00") (? . 1) (? . 12) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>This was a rather complicated problem that mostly tested our ability to think through the procedure clearly and cover edge cases.</p>\n\n<p>This was a rather long assignment to type up however, the instructions made the requirements rather clear. I wasn&rsquo;t required to do any outside the box thinking here, just put the peices together correctly.</p>") #t (u . "\n<p>This was a rather complicated problem that mostly tested our ability to think through the procedure clearly and cover edge cases.</p>\n\n<p>This was a rather long assignment to type up however, the instructions made the requirements rather clear. I wasn&rsquo;t required to do any outside the box thinking here, just put the peices together correctly.</p>\n<!-- more-->\n\n<p>◊filebox-highlight[&ldquo;Lab5.asm&rdquo; &rsquo;asm]{ #Henry Brooks #CS231 Assignment1 .data array: .word 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 str0: .asciiz &ldquo;Please enter the array length: &rdquo; goodMsg: .asciiz \" is a good value in checkNumPositive\\n\" badMsg: .asciiz \" is a bad value in checkNumPositive\\n\" errorMsg: .asciiz &ldquo;Invalid array length\\n&rdquo; invalidMsg: .asciiz &ldquo;Invalid array value\\n&rdquo; space: .asciiz \" \" newline: .asciiz \"\\n\"</p>\n\n<p>.text begin:  la $a0, str0  li $v0, 4  syscall</p>\n\n<pre><code>jal\treadNum\t\t# input passed back in $v1\nadd\t$s0, $v1, $0\t# $s0 = arraySize\n\nadd\t$a0, $s0, $0\t# pass arraySize in $a0 to veriftySize\njal\tverifySize\nadd\t$t0, $v1, $0\t# get 1 or 0 back from verifySize\n\nbeq\t$t0, $0, begin\n\nadd\t$a0, $s0, $0\t# pass arraySize to createArray in $a0\njal\tcreateArray\n\nadd\t$a0, $s0, $0\t# pass arraySize to printArray in $a0\njal\tprintArray\n\n\nadd\t$a0, $s0, $0\t# pass arraySize to reverseArray in $a0\njal\treverseArray\n\n\nadd\t$a0, $s0, $0\t# pass arraySize to printArray in $a0\njal\tprintArray\n</code></pre>\n\n<p>exit:  li $v0, 10  syscall</p>\n\n<h1 id=\"-int-readnum-returns-and-int\">&mdash;&mdash;&mdash;&mdash; int readNum(), returns and int</h1>\n\n<p>readNum:  li $v0, 5  syscall  add $v1, $v0, $0 # pass input back in $v1  jr $ra</p>\n\n<h1 id=\"-int-verifysizeint-arraysize-returns-0-or-1\">&mdash;&mdash;&mdash;&mdash; int verifySize(int arraySize), returns 0 or 1</h1>\n\n<p>verifySize:  add $t0, $a0, $0 # save passed arg (arraySize) to $t0</p>\n\n<pre><code>li\t$t1, 20\nbgt\t$t0, $t1, verifySizeBad\nble\t$t0, $0, verifySizeBad\n\nli\t$v1, 1\t\t\t# pass 1 back to main in $v1\njr\t$ra\n</code></pre>\n\n<p>verifySizeBad:  la $a0, errorMsg  li $v0, 4  syscall</p>\n\n<pre><code>li\t$v1, 0\t\t\t# pass 0 back to main in $v1\njr\t$ra</code></pre>\n\n<h1 id=\"-void-createarrayint-arraysize-returns-nothing\">&mdash;&mdash;&mdash;&mdash; void createArray(int arraySize), returns nothing</h1>\n\n<p>createArray:  add $s1, $a0, $0 # save passed arg (arraySize) to $s1  sw $ra, 0($sp) # save current $ra to stack</p>\n\n<pre><code>li\t$s2, 0\t\t\t# counter\nla\t$s3, array\t\t# create pointer to array[0]\n</code></pre>\n\n<p>createArrayLoop: # arraySize &lt; counter  beq $s1, $s2, createArrayDone</p>\n\n<pre><code>jal\treadNum\t\t\t# int readNum(), returns int in $v1\nadd\t$s4, $v1, $0\t# save arrayEntry to $s4</code></pre>\n\n<h1 id=\"--int-checknumpositivearrayentry-returns-0-or-1\">&mdash;&mdash;- int checkNumPositive(arrayEntry), returns 0 or 1</h1>\n\n<p>add $a0, $s4, $0 # pass arrayEntry to checkNumPositive  jal checkNumPositive  add $t0, $v1, $0 # save return value to $t4, either 0 or 1</p>\n\n<pre><code>beq\t$t0, $0, createArrayBad</code></pre>\n\n<h1 id=\"--int-divisibleby3arrayentry-returns-0-or-1\">&mdash;&mdash;- int divisibleBy3(arrayEntry), returns 0 or 1</h1>\n\n<p>add $a0, $s4, $0 # pass arrayEntry to divisibleBy3  jal divisibleBy3  add $t0, $v1, $0 # save return value to $t4, either 0 or 1</p>\n\n<pre><code>beq\t$t0, $0, createArrayBad</code></pre>\n\n<h1 id=\"--if-both-tests-pass-then-save-to-the-array-and-increment-the-counters\">&mdash;&mdash;- if both tests pass then save to the array and increment the counters</h1>\n\n<p>sw $s4, 0($s3)</p>\n\n<pre><code>addi\t$s3, $s3, 4\t# pointer++\naddi\t$s2, $s2, 1\t# counter--\nj\tcreateArrayLoop\n</code></pre>\n\n<p>createArrayDone:   lw $ra, 0($sp) # load old $ra from stack  jr $ra</p>\n\n<p>createArrayBad:  la $a0, invalidMsg  li $v0, 4  syscall</p>\n\n<pre><code>j\tcreateArrayLoop</code></pre>\n\n<h1 id=\"-void-reversearrayint-arraysize-returns-nothing\">&mdash;&mdash;&mdash;&mdash; void reverseArray(int arraySize), returns nothing</h1>\n\n<p>reverseArray:  add $t0, $a0, $0 # save passed arg (arraySize) to $t0</p>\n\n<pre><code>li\t\t$t1, 4\t\t# set $t1 = 4\nmult\t$t0, $t1\t# length * 4\nmflo\t$t1\t\t\t# set $t1 = length * 4\n\nla\t$t2, array\t# set pointer to start of the array\nla\t$t3, array\nadd\t$t3, $t3, $t1\naddi\t$t3, $t3, -4\t# set pointer to end of the array</code></pre>\n\n<p>reverseArraySwap:  bgt $t2, $t3, reverseArrayDone  lw $t4, 0($t2)  lw $t5, 0($t3)  sw $t5, 0($t2)  sw $t4, 0($t3)</p>\n\n<pre><code>addi\t$t2, $t2, 4\naddi\t$t3, $t3, -4\nj\treverseArraySwap</code></pre>\n\n<p>reverseArrayDone:  jr $ra</p>\n\n<h1 id=\"-void-printarrayint-arraysize-returns-nothing\">&mdash;&mdash;&mdash;&mdash; void printArray(int arraySize), returns nothing</h1>\n\n<p>printArray:  add $t0, $a0, $0 # save passed arg (arraySize) to $t0  la $t1, array</p>\n\n<p>printArrayLoop:  beq $t0, $0, printArrayDone  lw $a0, 0($t1)  li $v0, 1  syscall</p>\n\n<pre><code>li\t$v0, 4\nla\t$a0, space\nsyscall\n\naddi\t$t1, $t1, 4\naddi\t$t0, $t0, -1\nj\tprintArrayLoop\n</code></pre>\n\n<p>printArrayDone:  li $v0, 4  la $a0, newline  syscall  jr $ra</p>\n\n<h1 id=\"-int-divisibleby3int-arrayentry--returns-0-or-1\">&mdash;&mdash;&mdash;&mdash; int divisibleBy3(int arrayEntry) , returns 0 or 1</h1>\n\n<p>divisibleBy3:  add $t0, $a0, $0 # save passed arg (arrayEntry) to $t0</p>\n\n<pre><code>li\t$t1, 3\ndiv\t$t0, $t1\nmfhi\t$t3\n\nbne\t$t3, $0, divisibleBy3Bad\n\nli\t$v1, 1\t\t\t# pass 1 back to main in $v1\njr\t$ra</code></pre>\n\n<p>divisibleBy3Bad:  li $v1, 0 # pass 0 back to main in $v1  jr $ra</p>\n\n<h1 id=\"-int-checknumpositiveint-arrayentry--return-0-or-1\">&mdash;&mdash;&mdash;&mdash; int checkNumPositive(int arrayEntry) , return 0 or 1</h1>\n\n<p>checkNumPositive:  add $t0, $a0, $0 # save passed arg (arrayEntry) to $t0</p>\n\n<pre><code>blt\t$t0, $0, checkNumPositiveBad\n\nli\t$v1, 1\t\t\t# pass 1 back to main in $v1\njr\t$ra</code></pre>\n\n<p>checkNumPositiveBad:  li $v1, 0 # pass 0 back to main in $v1  jr $ra }</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-08-17-codefights-teamFinder-Python.md" . unix) f post (u . "CodeFights - teamFinder") (? . 0) 1505086803 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/08/codefights-teamfinder.html" . unix) (u . "/2017/08/codefights-teamfinder.html") (u . "2017-08-17T00:00:00") (? . 2) (? . 3) (c (u . "CodeFights") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Python") c (u . "Author: Henry Brooks")) (u . "\n<p>I have been working through problems from <a href=\"https://codefights.com\">codefights</a> and I found another problem that required <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to complete so I thought I would write up my process solving this problem.</p>") #t (u . "\n<p>I have been working through problems from <a href=\"https://codefights.com\">codefights</a> and I found another problem that required <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to complete so I thought I would write up my process solving this problem.</p>\n<!-- more-->\n\n<p><a href=\"https://codefights.com/challenge/af2y4DBXqibqmHyAN\">Description</a> You just heard about a new Pokemon tournament. In order to compete in the tournament, you must follow these rules:</p>\n\n<ul>\n <li>You must use <code>2</code> Pokemon;</li>\n <li>Their combined attack power must be equal to <code>maxPower</code>.</li></ul>\n\n<p>You and your friends would like to compete, but there is limited time to enter! You need to pick the first <code>2</code> Pokemon in your list whose combined attack power is equal to maxPower and return their indices (<code>0</code>-based). If there are no such pairs, return an empty array.</p>\n\n<p>Some of your friends are true Pokemon masters, and have hundreds of thousands of Pokemon. Make sure to help them find their Pokemon fast too!</p>\n\n<p>Example For <code>pokemonList = [4, 3, 2, 3, 4]</code> and <code>maxPower = 6</code>, the output should be <code>teamFinder(pokemonList, maxPower) = [0, 2]</code>. The pairs that add up to <code>maxPower</code> are: <code>(4, 2), (3, 3), (2, 4)</code>. The pair that gets completed first is <code>(4, 2)</code> whose indices are <code>[0, 2]</code>.</p>\n\n<h3 id=\"version-1\">Version 1</h3>\n\n<p>I initially worked through the problem with racket to get an idea of how it should work and to check the test cases. Initially I wrote the program to recursively check all pairs starting with the first.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">headIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"mi\">2</span> <span class=\"n\">headIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">nextIndex</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [1, 5]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Unfortunately this ended up failing on test 3 and after reading the comments I found that the test actually checks based on the second element of the pair. Specifically, before you check a new pokemon in the list you must have checked all pairs of pokemon made with pokemon before it in the list.</p>\n\n<h3 id=\"version-2\">Version 2</h3>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">nextIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]))</span>\n <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [3, 4]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>It took me a couple minutes to rewrite the program to use <code>nextIndex</code> as the pivot but that was mostly due to some trial and error problems.</p>\n\n<h3 id=\"version-3\">Version 3</h3>\n\n<p>Currently my solution is running in <strong>O(n^2)</strong> however, looking over the comments I know that the solution needs to be close to <strong>O(n)</strong>.</p>\n\n<p>We can achieve this speed up by memorizing the values as we work through the <code>pokemonList</code>. Since we are basing our search off of the second value in the pair we only need to keep a list of the differences between the previous values and the <code>maxPower</code> value.</p>\n\n<p>If we were checking <code>(teamFinder '(10 5 2 3 7 5) 10)</code> we wouldn&rsquo;t want to check <code>maxPower = first + second</code> for every pair on each pass. Instead we want to build a list of <code>maxPower - first</code> and check if the <code>second</code> value is in the list.</p>\n\n<pre><code>(teamFinder '(10 5 2 3 7 5) 10)\ndifList = '(0),       value = 5\ndifList = '(0 5),     value = 2\ndifList = '(0 5 8),   value = 3\ndifList = '(0 5 8 7), value = 7</code></pre>\n\n<p>This leads us to the following code</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">ht</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._make-hash))\" style=\"color: inherit\">make-hash</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">flag</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span> <span class=\"n\">pokemonList</span><span class=\"p\">)]</span>\n        <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"n\">pokemonList</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">diff</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">maxPower</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n    <span class=\"kd\">#:break</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">ht</span> <span class=\"n\">v</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">ht</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">flag</span> <span class=\"no\">#f</span><span class=\"p\">))</span>    \n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/more-scheme..rkt)._hash-ref!))\" style=\"color: inherit\">hash-ref!</a></span> <span class=\"n\">ht</span> <span class=\"n\">diff</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">flag</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The only further improvements would be checking that the values v are less than <code>maxPower</code>. I finally converted the code to Python as codefights doesn&rsquo;t support racket code submissions.</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">teamFinder</span><span class=\"p\">(</span><span class=\"n\">pokemonList</span><span class=\"p\">,</span> <span class=\"n\">maxPower</span><span class=\"p\">):</span>\n    <span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pokemonList</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxPower</span><span class=\"p\">):</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">maxPower</span> <span class=\"o\">-</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">maxPower</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs211-lab2.md" . unix) f post (u . "CS211 Lab2 in Racket") (? . 10) 1505089386 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs211-lab2-in-racket.html" . unix) (u . "/2017/02/cs211-lab2-in-racket.html") (u . "2017-02-03T00:00:00") (? . 8) (? . 4) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<p>The purpose of this lab is to practice working with vectors.</p>\n\n<p>Write a program that reads an unknown number of integers from a data file called &ldquo;data.txt&rdquo; into a vector of integers named V. V is initially empty and grows as the user reads data from file.</p>\n\n<p>Once done copying data into vector V, you need to print the contents of V and perform some other tasks on the vector as described below.</p>") #t (u . "\n<p>The purpose of this lab is to practice working with vectors.</p>\n\n<p>Write a program that reads an unknown number of integers from a data file called &ldquo;data.txt&rdquo; into a vector of integers named V. V is initially empty and grows as the user reads data from file.</p>\n\n<p>Once done copying data into vector V, you need to print the contents of V and perform some other tasks on the vector as described below.</p>\n<!-- more-->\n\n<p>Your program should do the following:</p>\n\n<p>Create an empty vector of integers V.  Read the integers from data.txt into V. Ask the user to input a key. Then search for the key in vector V and inform the user about the existence (true / false) of the key in V. Print the contents of V.</p>\n\n<p><code>data.txt</code></p>\n\n<pre><code>5 6 12 87 100 28 35 66 77 29</code></pre>\n\n<p><code>output</code></p>\n\n<pre><code>#:filename \"./a.out &gt; output.txt input=&gt;12\"\n\nPlease enter a key to search for in data3.txt: 5\n6\n12 &lt;--\n87\n100\n28\n35\n66\n77\n29\n\nThe key was found</code></pre>\n\n<p><code>Lab1_Program3.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Initialized empty vector</span>\n  <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">V</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Initialized holding variable</span>\n  <span class=\"kt\">int</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Initialized inputFile</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data.txt\"</span><span class=\"p\">);</span>\n\t\n  <span class=\"c1\">// Load first element of inputFile into holding</span>\n  <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// While inputFile is sending results</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">V</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">holding</span><span class=\"p\">);</span>\n    <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\t\n  <span class=\"c1\">// Close inputfile</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\t\n\t\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> \n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please enter a key to search for in data3.txt: \"</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Initialize key and search flag</span>\n  <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Get user input</span>\n  <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n\t\n  <span class=\"c1\">// Check all values in vector</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"nl\">val</span> <span class=\"p\">:</span> <span class=\"n\">V</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" &lt;--\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n      <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\t\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t\n  <span class=\"c1\">// If the found flag is true output positive result</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">found</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The key was found\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The key was not found\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\t\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.cpp</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-06-cs231-lab5.md" . unix) f post (u . "CS231 Lab4") (? . 1) 1505087645 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs231-lab4.html" . unix) (u . "/2017/02/cs231-lab4.html") (u . "2017-02-06T00:00:00") (? . 5) (? . 6) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>This asm program for the MIPS processor takes an array of numbers and returns it in reverse order.</p>") #t (u . "\n<p>This asm program for the MIPS processor takes an array of numbers and returns it in reverse order.</p>\n<!-- more-->\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">## Henry Brooks</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">arry:</span>\t\t<span class=\"na\">.word</span>\t\t<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span>\n\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: \\tThis program asks a user how many numbers they\\n\\t\\t\\tadd to an array, then returns the array in reverse order\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              \\tHenry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       \\t02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter the number of elements:\\n\"</span>\n<span class=\"nl\">query2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter number \"</span>\n<span class=\"nl\">query3:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\":\\t\"</span>\n<span class=\"nl\">badcount1:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Error array can&#39;t have more than 10 elements, try again!!\\n\"</span>\n<span class=\"nl\">badcount2:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Error array can&#39;t have less than 1 element\\n\"</span>\n<span class=\"nl\">return:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The content of array in reverse order is:\\n\"</span>\n\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print query</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query1</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"nl\">main2:</span>\n<span class=\"c\">################### Take user input</span>\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Check that input is valid</span>\n\t\t<span class=\"nf\">ble</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">badInputLo</span>\n\t\t<span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n\t\t<span class=\"nf\">bgt</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">badInputHi</span>\t\t\t\n\n<span class=\"c\">################## If input is good set $s0 to $v0</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t<span class=\"c\"># lengthOfArray</span>\n\n<span class=\"c\">################### Initialize $s1 to 0</span>\n\t\t<span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t<span class=\"c\"># counter</span>\n\t\t<span class=\"no\">lw</span>\t\t\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">arry</span>\t\t<span class=\"c\"># pointer</span>\n\t\t\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else array[count] = input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">read_loop:</span>\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\t\t<span class=\"c\"># pointer is at end</span>\n\t\t\n\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query2</span>\t\t<span class=\"c\"># load \"enter number \" message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\t\t\n\t\t<span class=\"no\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print intger</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load count</span>\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># increment for printing</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query3</span>\t\t<span class=\"c\"># load \":\\t\"</span>\n\t\t<span class=\"no\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t\t<span class=\"c\"># load user input program</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># get user input, (cin)</span>\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$t7</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n\t\t\n\t\t<span class=\"nf\">sw</span>\t\t\t<span class=\"no\">$t7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t\t<span class=\"nf\">syscall</span>\t\n\t\t\n\t\t<span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t\t<span class=\"nf\">j</span> \t\t\t<span class=\"no\">read_loop</span>\t\t\n\t\t\n\n<span class=\"c\">#################### Loop to read off the elements of the array</span>\n<span class=\"c\">#print_loop:</span>\n<span class=\"c\">#\t\tbeq\t\t\t$t2, $0, end\t# check array end</span>\n<span class=\"c\">#\t</span>\n<span class=\"c\">#\t\tlw\t\t\t$a0, ($t1)</span>\n<span class=\"c\">#\t\tli\t\t\t$v0, 1</span>\n<span class=\"c\">#\t\tsyscall</span>\n<span class=\"c\">#\t</span>\n<span class=\"c\">#\t\tli\t\t\t$v0, 4</span>\n<span class=\"c\">#\t\tsyscall</span>\n<span class=\"c\">#\t</span>\n<span class=\"c\">#\t\taddi\t\t\t$t2, $t2, -1</span>\n<span class=\"c\">#\t\taddi\t\t\t$t1, $t1, -4</span>\n<span class=\"c\">#\t\tj\tprint_loop\t# ret</span>\n\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badInputLo:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badInputHi:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\t\t\n<span class=\"c\">#################### exit from program</span>\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">return</span>\t\t<span class=\"c\"># load answer message</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print answer message</span>\n\t\t\n\t\t<span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t\n\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n\t\t<span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load sum</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print sum</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-30-codefights-memorized-function.md" . unix) f post (u . "CodeFights - totalOnes") (? . 7) 1505086457 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/codefights-totalones.html" . unix) (u . "/2017/03/codefights-totalones.html") (u . "2017-03-30T00:00:00") (? . 11) (? . 2) (c (u . "CodeFights") c (u . "Haskell") c (u . "C++") c (u . "Dynamic Programming") c (u . "Memoization") c (u . "Author: Henry Brooks")) (u . "\n<p>I&rsquo;ve been working through algorithm challenges on [&ldquo;https://codefights.com/&rdquo;](&ldquo;Code Fights&rdquo;) and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"&quot;memoization&quot;\">&ldquo;https://en.wikipedia.org/wiki/Memoization&rdquo;</a> to speed up a [&ldquo;https://en.wikipedia.org/wiki/Dynamic_programming&rdquo;](&ldquo;dynamic programming&rdquo;) problem. I have included the description of the challenge below.</p>\n\n<h3 id=\"httpscodefightscomchallengedgh5cqegpfu82obqsdescription\"><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description</a></h3>\n\n<p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p>") #t (u . "\n<p>I&rsquo;ve been working through algorithm challenges on [&ldquo;https://codefights.com/&rdquo;](&ldquo;Code Fights&rdquo;) and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"&quot;memoization&quot;\">&ldquo;https://en.wikipedia.org/wiki/Memoization&rdquo;</a> to speed up a [&ldquo;https://en.wikipedia.org/wiki/Dynamic_programming&rdquo;](&ldquo;dynamic programming&rdquo;) problem. I have included the description of the challenge below.</p>\n\n<h3 id=\"httpscodefightscomchallengedgh5cqegpfu82obqsdescription\"><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description</a></h3>\n\n<p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p>\n<!-- more-->\n\n<h3 id=\"example\">Example</h3>\n\n<p>For <code>k = 5</code>, the output should be <code>totalOnes(k) = 7</code>.</p>\n\n<p><code>1\n  <sub>10</sub> = 1\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>2\n  <sub>10</sub> = 10\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>3\n  <sub>10</sub> = 11\n  <sub>2</sub>&nbsp;&#8594; 2</code></p>\n\n<p><code>4\n  <sub>10</sub> = 100\n  <sub>2</sub>&nbsp;&#8594; 1</code></p>\n\n<p><code>5\n  <sub>10</sub> = 101\n  <sub>2</sub>&nbsp;&#8594; 2</code></p>\n\n<p>Thus, the answer is <code>1 + 1 + 2 + 1 + 2 = 7</code>.</p>\n\n<h2 id=\"version-1\">Version 1</h2>\n\n<p>Initially I came at this problem utilizing a strictly brute force approach. I generated a list from <code>1 to n</code> and then mapped a function that converted <code>Integer -&gt; Binary -&gt; String</code>. Then I used concat to flatten the list <code>[String] -&gt; String</code>. Finally I filtered the <code>0</code>s out of the <code>String</code> and took the <code>length</code> of the list.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Numeric</span> <span class=\"p\">(</span><span class=\"nf\">showIntAtBase</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span> <span class=\"p\">(</span><span class=\"nf\">intToDigit</span><span class=\"p\">)</span>\n\n<span class=\"nf\">totalOnes</span> <span class=\"n\">k</span> <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"p\">(</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"sc\">&#39;1&#39;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">intToBin</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">k</span><span class=\"p\">])))</span>\n\n<span class=\"nf\">intToBin</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">intToBin</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">showIntAtBase</span> <span class=\"mi\">2</span> <span class=\"n\">intToDigit</span> <span class=\"n\">n</span> <span class=\"s\">\"\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version worked on all of the sample tests however, it wasn&rsquo;t fast enough to pass the hidden tests. For this challenge we are given a time limit of <code>4000ms</code> and <code>k</code> is constrained <code>0&#8804; k&#8804; 2<sup>31</sup></code>.</p>\n\n<p>If I was given <code>k = 2^31 - 1</code> I would have to compute each <code>Int -&gt; String</code> in <code>1.863ns</code> just to have the list ready in less than <code>4000ms</code>.</p>\n\n<p>At this point it was obvious that I needed to look for an equation that would either compute the value of <code>k</code> directly or that would generate a value near <code>k</code>.</p>\n\n<h2 id=\"version-2\">Version 2</h2>\n\n<p>To get a clue for where I needed to go next I generated the values for <code>totalOnes</code> for <code>k &lt;- [1..10]</code>. This gave me <code>1,2,4,5,7,9,12,13,15,17</code> which I was able to plug into the <a href=\"https://oeis.org/A000788\">oeis sequence encyclopedia</a>. I was first shown this site while working on my B.S. and I have found it useful working on a number of algorithm problems.</p>\n\n<p>They have a recursive formula for calculating the <code>totalOnes</code></p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Which can be converted into Haskell as</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"n\">n2</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"kr\">where</span> <span class=\"n\">n2</span> <span class=\"ow\">=</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This formula is faster than the <code>Int -&gt; Binary -&gt; String</code> code I was using before however, it introduced a recursive element that branches similar to fibonacci. Looking for ways to speed up the recursive function I found comments suggesting that I take a dynamic programming approach to the problem and start memoizating the function.</p>\n\n<p>Since I couldn&rsquo;t find a good method for memoization with Haskell I switched over to <code>C++</code> at this point.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This version was able to pass the first hidden test however, it failed on the second.</p>\n\n<h2 id=\"version-3\">Version 3</h2>\n\n<p>I had effectively maxxed out the speed for directly calculating the value of <code>k</code> at this point. The next speed up came when I found another equation on the oeis site for calculating specific values of <code>k</code>.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This bit of code allows me to calculate the value of the nearest <code>n&#8804; k&#8739; n = 2<sup>m</sup> &ndash; 1</code> which I could use as a jumping off point to reach k.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I still wasn&rsquo;t able to complete all of the hidden tests with this code however, it did much better than any of my previous examples.</p>\n\n<p>Overall I thought that this was a very interesting problem that required a lot more out of the box thinking than most coding challenges I come across. I have never really been given a task that requires a trade off between storage space and calculation time before and I feel that this problem nicely illustrates that concept.</p>\n\n<p>Going forward I&rsquo;m planning to take another look at the Coin Change problem from SICP to see if it can similarly benefit from memoization.</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-30-cs211-lab1-program3.md" . unix) f post (u . "CS211 Lab1 Program3 in Racket") (? . 8) 1505089359 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/01/cs211-lab1-program3-in-racket.html" . unix) (u . "/2017/01/cs211-lab1-program3-in-racket.html") (u . "2017-01-30T00:00:00") (? . 9) (? . 10) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<h4 id=\"program-3\">Program 3</h4>\n\n<p>Write a program with several functions that perform the following tasks:</p>\n\n<p>a. Read the following 10 integer numbers from the file data.txt into array A.  10 15 27 89 90 95 27 13 99 33  Call function ReadArray that reads numbers from the file data.txt into an array.</p>\n\n<p>b. Copy array A into array B in reverse order. Call function ReverseArray that copies an array into another array in reverse order</p>") #t (u . "\n<h4 id=\"program-3\">Program 3</h4>\n\n<p>Write a program with several functions that perform the following tasks:</p>\n\n<p>a. Read the following 10 integer numbers from the file data.txt into array A.  10 15 27 89 90 95 27 13 99 33  Call function ReadArray that reads numbers from the file data.txt into an array.</p>\n\n<p>b. Copy array A into array B in reverse order. Call function ReverseArray that copies an array into another array in reverse order</p>\n<!-- more-->\n\n<p>c. Print the elements of Array A and B. Call function PrintArray that prints the elements of an array of any size</p>\n\n<p>d. Find the number of elements in array A that are &gt;= 80 and &lt;=100. Call function FindRange that finds and returns the number of elements in an array of any size that are within a certain range (min, max)</p>\n\n<p>e. Find the index of the elements in array A that are divisible by 5. Call function FindDiv that finds and returns the number of the elements in array that are divisible by 5</p>\n\n<p>f. Find average in array A. Call function ArrayAvg that finds and returns the average of elements in an array of any size</p>\n\n<p>g. Find the minimum number in array A. Call function ArrayMin that finds and returns the minimum number in an array of any size</p>\n\n<p>h. Ask the user to input a key. Then search for the key in array A and inform the user about the existence (true / false) of the key in array. Call function KeySearch that searches for a key in an array of any size and returns true/false as result</p>\n\n<p>NOTES: - If a function is supposed to return a value, print that value in main not inside the function. - Any parameter that is not supposed to be changed inside a function must be declared as a constant parameter.</p>\n\n<p><code>data.txt</code></p>\n\n<pre><code>10 15 27 89 90 95 27 13 99 33</code></pre>\n\n<p><code>output</code></p>\n\n<pre><code>#:filename \"./a.out &gt; output.txt\"]{\n10 15 27 89 90 95 27 13 99 33 \n\n33 99 13 27 95 90 89 27 15 10 \n\nThere are 4 values in arrayA between 80 and 100.\n\nThere are elements divisible by 5 at positions 1, 2, 5, 6, 4\n\nThe average of the array is 49.8\n\nThe minimum element of the array is 10\n\nEnter an integer value to search for: True</code></pre>\n\n<p><code>Lab1_Program3.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Function prototypes *************************************************</span>\n<span class=\"kt\">int</span> <span class=\"nf\">fileSize</span><span class=\"p\">();</span>                        <span class=\"c1\">// aux</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ReadArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span><span class=\"p\">);</span>            <span class=\"c1\">// a</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ReverseArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span><span class=\"p\">);</span> <span class=\"c1\">// b</span>\n<span class=\"kt\">void</span> <span class=\"nf\">PrintArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[],</span> <span class=\"kt\">int</span><span class=\"p\">);</span>           <span class=\"c1\">// c</span>\n<span class=\"kt\">int</span> <span class=\"nf\">FindRange</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">[]);</span>        <span class=\"c1\">// d</span>\n<span class=\"kt\">int</span> <span class=\"nf\">FindDiv</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">[]);</span>               <span class=\"c1\">// e</span>\n<span class=\"kt\">double</span> <span class=\"nf\">ArrayAvg</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[]);</span>                <span class=\"c1\">// f</span>\n<span class=\"kt\">int</span> <span class=\"nf\">ArrayMin</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"p\">[]);</span>                   <span class=\"c1\">// g</span>\n<span class=\"kt\">bool</span> <span class=\"nf\">KeySearch</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">[]);</span>            <span class=\"c1\">// h</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// find length of the input</span>\n  <span class=\"kt\">int</span> <span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"n\">fileSize</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// initialize array A and B</span>\n  <span class=\"kt\">int</span> <span class=\"n\">arrayA</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n  <span class=\"kt\">int</span> <span class=\"n\">arrayB</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// a. Read data from data2.txt to arrayA</span>\n  <span class=\"n\">ReadArray</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// b. Copy arrayA into arrayB in reverse order</span>\n  <span class=\"n\">ReverseArray</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">,</span> <span class=\"n\">arrayB</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// c. Print arrayA and arrayB</span>\n  <span class=\"n\">PrintArray</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  <span class=\"n\">PrintArray</span><span class=\"p\">(</span><span class=\"n\">arrayB</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n  \n  <span class=\"c1\">// d. Find the number of elements in array between 80 and 100</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There are \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">FindRange</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">arrayA</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" values in arrayA between \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">80</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" and \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">100</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\".\"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// e. Find the number of elements divisible by 5</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There are elements divisible by 5 at positions \"</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">FindDiv</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">arrayA</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// f. Find the average of the array</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The average of the array is \"</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ArrayAvg</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// g. Find the minimum element of the array</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The minimum element of the array is \"</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ArrayMin</span><span class=\"p\">(</span><span class=\"n\">arrayA</span><span class=\"p\">)</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"c1\">// h. Search for an element in an array</span>\n  <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Enter an integer value to search for: \"</span><span class=\"p\">;</span>\n  <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">KeySearch</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">arrayA</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"s\">\"True\"</span> <span class=\"o\">:</span> <span class=\"s\">\"False\"</span><span class=\"p\">)</span> \n       <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  \n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Function definitions *************************************************</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">fileSize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data2.txt\"</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">temp</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ReadArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// initialize ifstream to read file</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data2.txt\"</span><span class=\"p\">);</span>\n  \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span> <span class=\"p\">{</span> <span class=\"c1\">// Only do these if file is open</span>\n    <span class=\"c1\">// Pull data off data2.txt and place in arr</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  \n  <span class=\"c1\">// Close the file</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ReverseArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arrayA</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">arrayB</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">arrayB</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arrayA</span><span class=\"p\">[</span><span class=\"mi\">9</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">PrintArray</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">FindRange</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">first</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">second</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">FindDiv</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\", \"</span><span class=\"p\">;</span>\n      <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">double</span> <span class=\"nf\">ArrayAvg</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"mf\">10.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">ArrayMin</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span> \n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">KeySearch</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span> <span class=\"p\">{</span>\t\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> \n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.cpp</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-15-cs231-test-question.md" . unix) f post (u . "CS231 Assignment1") (? . 11) 1505087547 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/cs231-assignment1.html" . unix) (u . "/2017/03/cs231-assignment1.html") (u . "2017-03-15T00:00:00") (? . 12) (? . 7) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>I just took a test where I was asked to hand write the code for the following program. As soon as I got out of class I coded up my work to make sure that it worked.</p>") #t (u . "\n<p>I just took a test where I was asked to hand write the code for the following program. As soon as I got out of class I coded up my work to make sure that it worked.</p>\n<!-- more-->\n\n<p>I found that I forgot a lot of little helper functions, like printing spaces between array elements, however I feel that the overall code was correct.</p>\n\n<p>The design spec for the problem was to create a program that would ask the user to input data into two arrays. You were then supposed to create a third array that was made by adding or subtracting the values of the two initial arrays based on the index number of the element.</p>\n\n<p><code>C[i] = A[i] - B[i]</code>, if <code>i</code> is odd, else <code>C[i] = A[i] + B[i]</code></p>\n\n<p>To finish the program off you print the new array.</p>\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"na\">.data</span>\n<span class=\"nl\">A:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">B:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">C:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">space:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\" \"</span>\n<span class=\"nl\">nl:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\"\\n\"</span>\n\n<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">A</span>\t\t<span class=\"c\"># save pointers to A, B, C</span>\n\t<span class=\"no\">la</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">B</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">C</span>\n\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass pointer to Create</span>\n\t<span class=\"no\">jal</span>\t<span class=\"no\">Create</span>\n\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Create</span>\n\t\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Create_Array_C</span>\n\t\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\t\n\t\n<span class=\"nl\">exit:</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n\t<span class=\"nf\">syscall</span>\n\t\n<span class=\"c\">#-------</span>\n<span class=\"nl\">Create:</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\n\t\n<span class=\"nl\">Create_Loop:</span>\n\t<span class=\"nf\">beq</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Create_Done</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\t<span class=\"nf\">syscall</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t\t\n\t<span class=\"nf\">sw</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n\t<span class=\"nf\">j</span>\t<span class=\"no\">Create_Loop</span>\n\t\n<span class=\"nl\">Create_Done:</span>\n\t<span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\t\n<span class=\"c\">#-------</span>\n<span class=\"nl\">Print:</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\n<span class=\"nl\">Print_Loop:</span>\n\t<span class=\"nf\">beq</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Print_Done</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\t<span class=\"nf\">syscall</span>\n\t\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">space</span>\n\t<span class=\"nf\">syscall</span>\n\t\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n\t<span class=\"nf\">j</span>\t<span class=\"no\">Print_Loop</span>\n\t\n<span class=\"nl\">Print_Done:</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t<span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t<span class=\"nf\">syscall</span>\n\t<span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\t\n<span class=\"c\">#------</span>\n<span class=\"nl\">Create_Array_C:</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$a1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$a2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\t<span class=\"nf\">li</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\n<span class=\"nl\">Create_Array_C_Loop:</span>\n\t<span class=\"nf\">beq</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Create_Array_C_Done</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t<span class=\"nf\">sub</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"no\">$t5</span>\n\t<span class=\"nf\">sw</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n\t<span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\t<span class=\"nf\">add</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"no\">$t5</span>\n\t<span class=\"nf\">sw</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n\t<span class=\"nf\">addi</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">2</span>\n\t<span class=\"nf\">j</span>\t<span class=\"no\">Create_Array_C_Loop</span>\n\t\t\n<span class=\"nl\">Create_Array_C_Done:</span>\n\t<span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-03-05-cs211-lab7.md" . unix) f post (u . "CS211 Lab7") (? . 12) 1505088277 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/03/cs211-lab7.html" . unix) (u . "/2017/03/cs211-lab7.html") (u . "2017-03-05T00:00:00") (? . 6) (? . 11) (c (u . "CS211") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<p>I thought I would try a different approach to completing the assignment this week. Usually I modify the example problems and templates to fit the needs of the program.</p>\n\n<p>This week I thought figured I would try giving a testing based methodology a try. Specifically I wanted to incrementally build the program up by compiling and testing as I built it from scratch.</p>") #t (u . "\n<p>I thought I would try a different approach to completing the assignment this week. Usually I modify the example problems and templates to fit the needs of the program.</p>\n\n<p>This week I thought figured I would try giving a testing based methodology a try. Specifically I wanted to incrementally build the program up by compiling and testing as I built it from scratch.</p>\n<!-- more-->\n\n<h4 id=\"lab-7\">Lab 7</h4>\n\n<p>The purpose of this lab is to practice working with constants, static attributes, and friend functions.</p>\n\n<p>In this lab, you will design a <code>Student</code> class which has the following private attributes: * string name; * const long studentID;</p>\n\n<h4 id=\"version-1\">Version 1</h4>\n\n<p>I start with a constructor, setter, and getter for the required class. I test to make sure that all three are being called properly in main.</p>\n\n<p><code>main.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Student.h</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n <span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Student.cpp</code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\nStudent::Student() {\n    name = \"Unknown\";\n}\n\nstring Student::getName() const {\n    return name;\n}\n\nvoid Student::setName(string n) {\n    name = n;\n}</code><code>#### Version 2\n\nSince the basic skeleton of the program was running I expanded the class to include studentID, major, classification, units, and tuition. My main.cpp is also expanded to test all of the variables added to the class.\n\nNote: I had some issues with this step. You need to remember to declare constant member values outside of the {} brackets of the constructor.</code>main.cpp<code></code><code>c++\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    Student student1;\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; endl;\n\n    student1.setName(\"steve\");\n    student1.setMajor(\"MATH\");\n    student1.setClassification(\"graduate\");\n    student1.setUnits(8);\n    student1.setTuition(1000.50);\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; endl;\n\n    Student student2 = Student(\"Julia Robertson\", \"MATH\", \"undergraduate\", 15);\n\n    cout &lt;&lt; student2.getName() &lt;&lt; \" \" \n\t &lt;&lt; student2.getID() &lt;&lt; \" \"\n\t &lt;&lt; student2.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student2.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student2.getUnits() &lt;&lt; endl;\n\n    return 0;\n}</code><code></code>Student.h<code></code><code>c++\n#ifndef STDUENT_H\n#define STUDENT_H\n#include &lt;string&gt;\nusing namespace std;\n\nclast Student {\n    private:\n        string name;\n        const long studentID;\n        string major;\n        string classification;\n        int units;\n        float tuition;\n    public:\n        Student();\n        Student(string, string, string, int);\n        \n        string getName() const;\n        long getId() const;\n        string getMajor() const;\n        string getClassification() const;\n\tint getUnits() const;\n\tfloat getTuition() const;\n\n        void setName();\n        void setMajor(string);\n\tvoid setClassification(string);\n\tvoid setUnits(int);\n\tvoid setTuition(float);\n };\n#endif</code><code></code>Student.cpp<code></code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\n// Constructor functions\nStudent::Student() {\n    name = \"Unknown\";\n    major = \"CS\";\n    classification = \"undergraduate\";\n    units = 12;\n    tuition = 0;\n}\nStudent::Student(string theName, string theMajor, string theClassification, int theUnits) : studentID(0) {\n \tname = theName;\n \tmajor = theMajor;\n \tclassification = theClassification;\n \tunits = theUnits;\n \ttuition = 0;\n}\n\n// Getter functions\nstring Student::getName() const {\n\treturn name;\n}\nlong Student::getID() const {\n\treturn studentID;\n}\nstring Student::getMajor() const {\n\treturn major;\n}\nstring Student::getClassification() const {\n\treturn classification;\n}\nint Student::getUnits() const {\n\treturn units;\n}\nfloat Student::getTuition() const {\n\treturn tuition;\n}\n\n// Setter functions\nvoid Student::setName(string n) {\n\tname = n;\n}\nvoid Student::setMajor(string m) {\n\tmajor = m;\n}\nvoid Student::setClassification(string c) {\n\tclassification = c;\n}\nvoid Student::setUnits(int u) {\n\tunits = u;\n}\nvoid Student::setTuition(float t) {\n\ttuition = t;\n}</code><code>#### Version 3\n\nI now add the totalNumofStudents and nextStudentID values to the class. I also add the destructor to the class sense the value it deals with has been added.</code>main.cpp<code></code><code>c++\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    Student student1;\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    student1.setName(\"steve\");\n    student1.setMajor(\"MATH\");\n    student1.setClassification(\"graduate\");\n    student1.setUnits(8);\n    student1.setTuition(1000.50);\n\n    cout &lt;&lt; student1.getName() &lt;&lt; \" \" \n\t &lt;&lt; student1.getID() &lt;&lt; \" \"\n\t &lt;&lt; student1.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student1.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student1.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    Student student2 = Student(\"Julia Robertson\", \"MATH\", \"undergraduate\", 15);\n\n    cout &lt;&lt; student2.getName() &lt;&lt; \" \" \n\t &lt;&lt; student2.getID() &lt;&lt; \" \"\n\t &lt;&lt; student2.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student2.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student2.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    student1.~Student();\n        \n    cout &lt;&lt; student2.getName() &lt;&lt; \" \" \n\t &lt;&lt; student2.getID() &lt;&lt; \" \"\n\t &lt;&lt; student2.getMajor() &lt;&lt; \" \"\n\t &lt;&lt; student2.getClassification() &lt;&lt; \" \"\n\t &lt;&lt; student2.getUnits() &lt;&lt; \" \"\n\t &lt;&lt; student1.getTotalNumofStudents() &lt;&lt; \" \"\n\t &lt;&lt; student1.getNextStudentID() &lt;&lt; endl;\n\n    return 0;\n}</code><code></code>Student.h<code></code><code>c++\n#ifndef STDUENT_H\n#define STUDENT_H\n#include &lt;string&gt;\nusing namespace std;\n\nclast Student {\n    static int totalNumofStudents;\n    static long nextStudentID;\n    \n    private:\n        string name;\n        const long studentID;\n        string major;\n        string classification;\n        int units;\n        float tuition;\n    public:\n        Student();\n        Student(string, string, string, int);\n        ~Student();\n        \n        string getName() const;\n        long getId() const;\n        string getMajor() const;\n        string getClassification() const;\n\tint getUnits() const;\n\tfloat getTuition() const;\n        int getTotalNumofStudents() const;\n        long getNextStudentID() const;\n\n        void setName();\n        void setMajor(string);\n\tvoid setClassification(string);\n\tvoid setUnits(int);\n\tvoid setTuition(float);\n};\n#endif</code><code></code>Student.cpp<code></code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\nint Student::totalNumofStudents = 0;\nlong Student::nextStudentID = 10000;\n\n// Constructor functions\nStudent::Student() : studentID(nextStudentID) {\n    name = \"Unknown\";\n    major = \"CS\";\n    classification = \"undergraduate\";\n    units = 12;\n    tuition = 0;\n}\nStudent::Student(string theName, string theMajor, string theClassification, int theUnits) : studentID(nextStudentID) {\n \tname = theName;\n \tmajor = theMajor;\n \tclassification = theClassification;\n \tunits = theUnits;\n \ttuition = 0;\n}\nStudent::~Student() {\n    totalNumofStudents--;\n}\n\n// Getter functions\nstring Student::getName() const {\n\treturn name;\n}\nlong Student::getID() const {\n\treturn studentID;\n}\nstring Student::getMajor() const {\n\treturn major;\n}\nstring Student::getClassification() const {\n\treturn classification;\n}\nint Student::getUnits() const {\n\treturn units;\n}\nfloat Student::getTuition() const {\n\treturn tuition;\n}\nint Student::getTotalNumofStudents() const {\n    return totalNumofStudents;\n}\nlong Student::getNextStudentID() const {\n    return nextStudentID;\n}\n\n// Setter functions\nvoid Student::setName(string n) {\n\tname = n;\n}\nvoid Student::setMajor(string m) {\n\tmajor = m;\n}\nvoid Student::setClassification(string c) {\n\tclassification = c;\n}\nvoid Student::setUnits(int u) {\n\tunits = u;\n}\nvoid Student::setTuition(float t) {\n\ttuition = t;\n}</code><code>#### Version 4\n\nNext I add the printStudent, setData, and setTuition functions to finish off the assignment.  I also clean up the files to align with the specs given in the written assignment.</code>main.cpp<code></code><code>c++\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid setTuition(Student &amp;stu) {\n    if (stu.classification == \"graduate\")\n        stu.tuition = stu.units * 1000;\n    else\n        stu.tuition = stu.units * 700;\n}\n\nint main() {\n    Student student1;\n    student1.printStudent();    \n\n    Student student2 = Student(\"unknown\", \"PHYS\", \"graduate\", 0);\n    student2.setData(); // \"Julia Robertson\", \"MATH\", \"undergraduate\", 15\n\n    setTuition(student2);\n    student2.printStudent();\n\n    return 0;\n}</code><code></code>Student.h<code></code><code>c++\n#ifndef STDUENT_H\n#define STUDENT_H\n#include &lt;string&gt;\nusing namespace std;\n\nclast Student {\n    static int totalNumofStudents;\n    static long nextStudentID;\n\n    friend void setTuition(Students&amp;);\n    \n    private:\n        string name;\n        const long studentID;\n        string major;\n        string classification;\n        int units;\n        float tuition;\n    public:\n        Student();\n        Student(string, string, string, int);\n        ~Student();\n        \n        string getName() const;\n        long getId() const;\n        string getMajor() const;\n        string getClassification() const;\n\tint getUnits() const;\n\tfloat getTuition() const;\n        int getTotalNumofStudents() const;\n        long getNextStudentID() const;\n\n        void setName();\n        void setMajor(string);\n\tvoid setClassification(string);\n\tvoid setUnits(int);\n\tvoid setTuition(float);\n};\n#endif</code><code></code>Student.cpp<code></code><code>c++\n#include \"Student.h\"\n#include &lt;string&gt;\nusing namespace std;\n\nint Student::totalNumofStudents = 0;\nlong Student::nextStudentID = 10000;\n\n// Constructor functions\nStudent::Student() {\n    name = \"Unknown\";\n    major = \"CS\";\n    classification = \"undergraduate\";\n    units = 12;\n    tuition = 0;\n}\nStudent::Student(string theName, string theMajor, string theClassification, int theUnits) : studentID(0) {\n \tname = theName;\n \tmajor = theMajor;\n \tclassification = theClassification;\n \tunits = theUnits;\n \ttuition = 0;\n}\nStudent::~Student() {\n    totalNumofStudents--;\n}\n\n// Getter functions\nstring Student::getName() const {\n\treturn name;\n}\nlong Student::getID() const {\n\treturn studentID;\n}\nstring Student::getMajor() const {\n\treturn major;\n}\nstring Student::getClassification() const {\n\treturn classification;\n}\nint Student::getUnits() const {\n\treturn units;\n}\nfloat Student::getTuition() const {\n\treturn tuition;\n}\nint Student::getTotalNumofStudents() const {\n    return totalNumofStudents;\n}\nlong Student::getNextStudentID() const {\n    return nextStudentID;\n}\n\nvoid Student:printStudent() const {\n    cout &lt;&lt; \"Student name:   \" &lt;&lt; name &lt;&lt; endl\n\t &lt;&lt; \"Student id:     \" &lt;&lt; studentID &lt;&lt; endl\n\t &lt;&lt; \"Student major:  \" &lt;&lt; major &lt;&lt; endl\n\t &lt;&lt; \"Student class:  \" &lt;&lt; classification &lt;&lt; endl\n\t &lt;&lt; \"Student units:  \" &lt;&lt; units &lt;&lt; endl\n\t &lt;&lt; \"Tuition:        \" &lt;&lt; tuition &lt;&lt; endl;\n}\n\n// Setter functions\nvoid Student::setName(string n) {\n\tname = n;\n}\nvoid Student::setMajor(string m) {\n\tmajor = m;\n}\nvoid Student::setClassification(string c) {\n\tclassification = c;\n}\nvoid Student::setUnits(int u) {\n\tunits = u;\n}\nvoid Student::setTuition(float t) {\n\ttuition = t;\n}\n\nvoid Student::setData() {\n    string n, m, c; \t\t// Name, Major, and Classification\n    int u;\t\t\t// Units\n    cout &lt;&lt; \"Please enter the students name: \";\n    getline(cin, n);\n    name = n;\n    cout &lt;&lt; \"Please enter the students major: \";\n    cin &gt;&gt; m;\n    major = m;\n    cout &lt;&lt; \"Please enter the students classification: \";\n    cin &gt;&gt; c;\n    classification = c;\n    cout &lt;&lt; \"Please enter the students units: \";\n    cin &gt;&gt; u;\n    units = u;\t\n}</code>`</p>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-02-03-cs231-lab2.md" . unix) f post (u . "CS231 Labs") (? . 4) 1505087523 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/02/cs231-labs.html" . unix) (u . "/2017/02/cs231-labs.html") (u . "2017-02-03T00:00:00") (? . 10) (? . 5) (c (u . "CS231") c (u . "Assembly") c (u . "Author: Henry Brooks")) (u . "\n<p>I am currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS231</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> which covers assembly programming for the <a href=\"https://en.wikipedia.org/wiki/MIPS_instruction_set\">MIPS</a> architecture.</p>") #t (u . "\n<p>I am currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS231</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> which covers assembly programming for the <a href=\"https://en.wikipedia.org/wiki/MIPS_instruction_set\">MIPS</a> architecture.</p>\n<!-- more-->\n\n<p>We have been using <a href=\"http://courses.missouristate.edu/KenVollmar/mars/\">MARS</a> as the IDE for the class and it has been working out well so far.</p>\n\n<p>My second assignment for the class was to write a simple calculator that would calculate the sum, difference, product, quotient, and remainder of two numbers.</p>\n\n<p>One issue that I have been having with the language is that it seems to have a lot of boilerplate that needs to be repeated. I&rsquo;m thinking that I will write a helper function or macro to help with some of the repeated code.</p>\n\n<div class=\"brush: asm\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab2 basic calculator</span>\n\n\t\t<span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"=============================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: This program is written to mimic a very basic calculator\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              Henry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       02/01/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"=============================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Please input two numbers?\\n\"</span>\n<span class=\"nl\">sum:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Sum is: \"</span>\n<span class=\"nl\">dif:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Difference is: \"</span>\n<span class=\"nl\">prod:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Product is: \"</span> \n<span class=\"no\">quot</span><span class=\"p\">:</span>\t\t<span class=\"no\">.asciiz</span> \t<span class=\"s\">\"Quotient is: \"</span>\n<span class=\"nl\">remain:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Remainder is: \"</span>\n\n\t\t<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\t\n<span class=\"c\">################### Print header information</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print question </span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Take two inputs from the user</span>\n<span class=\"c\">################### and assign to $s0 and $s1</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t<span class=\"c\">#load take input program</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#take first input</span>\n\t\t<span class=\"no\">add</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\">#store first input in $s0</span>\n\t\t\t\t\t\n\t\t<span class=\"no\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t<span class=\"c\">#load take input program again</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#take second input</span>\n\t\t<span class=\"no\">add</span> \t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\">#store second input in $s1</span>\n\n<span class=\"c\">################## Print newline</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\t\n<span class=\"c\">################### Print sum</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">sum</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">add</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#add first and second input</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print difference</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">dif</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">sub</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#subtract second input from first</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print product\t</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">prod</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">mult</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#multiple first and second</span>\n\t\t<span class=\"no\">mflo</span> \t\t\t<span class=\"no\">$a0</span>\t\t<span class=\"c\">#assign the product to the argument</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print quotient</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">quot</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">div</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#divide the first by the second</span>\n\t\t<span class=\"no\">mflo</span> \t\t\t<span class=\"no\">$a0</span>\t\t<span class=\"c\">#assign the quotient to the argument</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print remainder</span>\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\t\t<span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">remain</span>\n\t\t<span class=\"nf\">syscall</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\">#load print integer</span>\n\t\t<span class=\"no\">div</span> \t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span>\t<span class=\"c\">#divide first and second</span>\n\t\t<span class=\"no\">mfhi</span> \t\t\t<span class=\"no\">$a0</span>\t\t<span class=\"c\">#assign the remainder to the argument</span>\n\t\t<span class=\"no\">syscall</span>\t\t\t\t\t<span class=\"c\">#print integer</span>\n\n\t\t<span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\">#print newline</span>\n\t\t<span class=\"no\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n\t\t<span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### EOF</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((p+ #"/media/henry/Steam/Github/hebr3.github.io/_src/posts/2017-01-27-cs211-lab1-program2.md" . unix) f post (u . "CS211 Lab1 Program2 in Racket") (? . 9) 1505089269 (p+ #"/media/henry/Steam/Github/hebr3.github.io/2017/01/cs211-lab1-program2-in-racket.html" . unix) (u . "/2017/01/cs211-lab1-program2-in-racket.html") (u . "2017-01-27T00:00:00") (? . 13) (? . 8) (c (u . "CS211") c (u . "Racket") c (u . "C++") c (u . "Author: Henry Brooks")) (u . "\n<h4 id=\"program-2\">Program 2</h4>\n\n<p>Write a program that reads test scores of students in a programming class from an input file, data.txt, and calculates the minimum, maximum, average test score for each student as well as the overall average score for the class. Each row of the file contains student name (no spaces), and 3 scores for test 1, test 2, and test 3, respectively.</p>") #t (u . "\n<h4 id=\"program-2\">Program 2</h4>\n\n<p>Write a program that reads test scores of students in a programming class from an input file, data.txt, and calculates the minimum, maximum, average test score for each student as well as the overall average score for the class. Each row of the file contains student name (no spaces), and 3 scores for test 1, test 2, and test 3, respectively.</p>\n<!-- more-->\n\n<p>Your main program should: - open the file and check for successful open, - then start reading one line at a time until EOF. For each line read, pass the grades for the three tests to a function called ProcessARow that calculates the minimum, maximum and average of the three grades. The results (minimum, maximum, and average) should be returned to the main program and the main program prints them on the screen in a table format. NOTE: minimum, maximum, average need to be sent by reference - Call the function, ProcessOverall, that calculates the overall average of all grades. NOTE: parameters must be sent by value</p>\n\n<p><code>data.txt</code></p>\n\n<pre><code>Bob     78   92   88\nSue     89   94   78\nFred   100   80   92\nGeorge  90   90   85\nMary    95   70   99\nJane   100   92   87}</code></pre>\n\n<p><code>output</code></p>\n\n<pre><code>Name           Average Score\n------------------------------\nBob                86.00\nSue                87.00\nFred               90.66\nGeorge             90.00\nMary               88.33\nJane               93.00\n------------------------------\nOverall Average:   89.16}</code></pre>\n\n<p><code>Lab1_Program1.cpp</code></p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iomanip&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ProcessARow</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span><span class=\"p\">);</span>\n<span class=\"kt\">double</span> <span class=\"nf\">ProcessOverall</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">);</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// initialize file</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data.txt\"</span><span class=\"p\">);</span>\n    \n  <span class=\"c1\">// init variables</span>\n  <span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">third</span><span class=\"p\">,</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">maximum</span><span class=\"p\">;</span>\n  <span class=\"kt\">double</span> <span class=\"n\">average</span><span class=\"p\">,</span>\n         <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n  \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Name                Avg    Min    Max\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"-------------------------------------\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t  \n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\t\t  \n      <span class=\"c1\">// Pull info off file</span>\n      <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">name</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">first</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">second</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">third</span><span class=\"p\">;</span>\n\t\t  \n      <span class=\"c1\">// Send values to ProcessARow</span>\n      <span class=\"n\">ProcessARow</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">third</span><span class=\"p\">,</span> <span class=\"n\">average</span><span class=\"p\">,</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">maximum</span><span class=\"p\">);</span>\n\t\t  \n      <span class=\"c1\">// Add average to total</span>\n      <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">average</span><span class=\"p\">;</span>\n\t\t  \t\t  \n      <span class=\"c1\">// Output average for student</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name</span>\n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">fixed</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">showpoint</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">right</span> \n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">average</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"     \"</span> \n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">minimum</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"    \"</span>\n           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">right</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">maximum</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t  \n    <span class=\"p\">}</span>\n\t  \n    <span class=\"c1\">// Close the file</span>\n    <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\t  \n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"-------------------------------------\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Overall Average:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ProcessOverall</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t  \n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Unable to open file\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ProcessARow</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">third</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">&amp;</span> <span class=\"n\">avg</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">maximum</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n  <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"n\">third</span><span class=\"p\">;</span>\n  <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"mf\">3.0</span><span class=\"p\">;</span>\n  <span class=\"n\">maximum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">),</span> <span class=\"n\">third</span><span class=\"p\">);</span>\n  <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">),</span> <span class=\"n\">third</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">double</span> <span class=\"nf\">ProcessOverall</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">avgs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">avgs</span> <span class=\"o\">/</span> <span class=\"mf\">6.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>Lab1_Program2.cpp</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>"))))