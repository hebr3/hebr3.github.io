<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>My Blog: Posts tagged 'Prolog'</title>
  <description>My Blog: Posts tagged 'Prolog'</description>
  <link>http://www.example.com/tags/Prolog.html</link>
  <lastBuildDate>Tue, 03 Oct 2017 07:00:00 UT</lastBuildDate>
  <pubDate>Tue, 03 Oct 2017 07:00:00 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Dynamic programming of recursive functions in Prolog</title>
   <link>http://www.example.com/2017/10/dynamic-programming-of-recursive-functions-in-prolog.html?utm_source=Prolog&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-www-example-com:-2017-10-dynamic-programming-of-recursive-functions-in-prolog-html</guid>
   <pubDate>Tue, 03 Oct 2017 07:00:00 UT</pubDate>
   <author>Henry Brooks</author>
   <description>
&lt;p&gt;Last week I was able to successfully implementing &lt;code&gt;Fibonacci&lt;/code&gt; with &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;memoization&lt;/a&gt; in &lt;code&gt;Prolog&lt;/code&gt;. This time I thought I would try the &lt;a href="https://en.wikipedia.org/wiki/Collatz_conjecture"&gt;Hailstone&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Ackermann_function"&gt;Ackermann&lt;/a&gt; formulas to see if all recursive functions can benefit from &lt;code&gt;memoization&lt;/code&gt;.&lt;/p&gt;&lt;a href="http://www.example.com/2017/10/dynamic-programming-of-recursive-functions-in-prolog.html?utm_source=Prolog&amp;amp;utm_medium=RSS"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</description></item>
  <item>
   <title>Fibonacci in Prolog</title>
   <link>http://www.example.com/2017/09/fibonacci-in-prolog.html?utm_source=Prolog&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-www-example-com:-2017-09-fibonacci-in-prolog-html</guid>
   <pubDate>Tue, 26 Sep 2017 07:00:00 UT</pubDate>
   <author>Henry Brooks</author>
   <description>
&lt;p&gt;I was looking over &lt;a href="http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse50"&gt;Exercise 11.3&lt;/a&gt; at &lt;a href="http://www.learnprolognow.org"&gt;Learn Prolog Now&lt;/a&gt; and realized that the problem actually implements memoization to calculate its result. I thought I would try modifying the problem to see if it could be used to solve the Fibonacci equation.&lt;/p&gt;&lt;a href="http://www.example.com/2017/09/fibonacci-in-prolog.html?utm_source=Prolog&amp;amp;utm_medium=RSS"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</description></item>
  <item>
   <title>SQL queries in Prolog</title>
   <link>http://www.example.com/2017/09/sql-queries-in-prolog.html?utm_source=Prolog&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-www-example-com:-2017-09-sql-queries-in-prolog-html</guid>
   <pubDate>Sat, 16 Sep 2017 07:00:00 UT</pubDate>
   <author>Henry Brooks</author>
   <description>
&lt;p&gt;This post will be looking at solving &lt;a href="https://en.wikipedia.org/wiki/SQL"&gt;SQL&lt;/a&gt; problems with &lt;a href="https://en.wikipedia.org/wiki/Prolog"&gt;Prolog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been intrigued by Prolog for a while now because of its roots in first-order logic. I have been going through tutorials and examples looking for a way to leverage logic programming as a DSL in personal projects. I feel that Prolog could be used as a substitute for a more fully featured database languages in small projects.&lt;/p&gt;&lt;a href="http://www.example.com/2017/09/sql-queries-in-prolog.html?utm_source=Prolog&amp;amp;utm_medium=RSS"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</description></item></channel></rss>