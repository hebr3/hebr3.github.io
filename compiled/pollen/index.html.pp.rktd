#hash((doc . "\n\n<!DOCTYPE html>\n<html lang=\"en\" class=\"gridded\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"generator\" content=\"Racket 6.10 + Pollen 1.2.1405.591\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Henry Brooks</title>\n        <link rel=\"stylesheet\" href=\"/styles.css\" media=\"screen\">\n                <script type=\"text/javascript\"\n                  src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n                </script>\n                <script type=\"text/x-mathjax-config\">\n                  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$']]}});\n                </script>\n    </head>\n    <body>\n        <header class=\"main\">\n            <p><a href=\"/\" class=\"home\">Henry Brooks</a></p>\n            <nav>\n                <ul>\n                    <li class=\"current-section\"><a href=\"/topics.html\">Topics</a></li>\n                    <li><a href=\"/about.html\">About</a></li>\n                </ul>\n            </nav>\n        </header>\n\n        <article><header>\n<h1><a href=\"posts/codefights-teamFinder-Python.html\">CodeFights - teamFinder</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/codefights-teamFinder-Python.html\"><time datetime=\"2017-08-17\">Thursday, August 17th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/codefights-teamFinder-Python.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/codefights-teamFinder-Python.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>I have been working through codefights and I found another problem that required memoization to complete so I thought I would write up my process solving this problem.</p><h2><a href=\"https://codefights.com/challenge/af2y4DBXqibqmHyAN\">Description</a></h2><p>You just heard about a new Pokemon tournament. In order to compete in the tournament, you must follow these rules:</p><p>You must use <code>2</code> Pokemon;<br/>Their combined attack power must be equal to <code>maxPower</code>.<br/>You and your friends would like to compete, but there is limited time to enter! You need to pick the first <code>2</code> Pokemon in your list whose combined attack power is equal to maxPower and return their indices (<code>0</code>-based).<br/>If there are no such pairs, return an empty array.</p><p>Some of your friends are true Pokemon masters, and have hundreds of thousands of Pokemon. Make sure to help them find their Pokemon fast too!</p><p>Example<br/>For <code>pokemonList = [4, 3, 2, 3, 4]</code> and <code>maxPower = 6</code>,<br/>the output should be<br/><code>teamFinder(pokemonList, maxPower) = [0, 2]</code>.<br/>The pairs that add up to <code>maxPower</code> are:<br/><code>(4, 2), (3, 3), (2, 4)</code>.<br/>The pair that gets completed first is <code>(4, 2)</code> whose indices are <code>[0, 2]</code>.</p><h2>Version 1</h2><p>I initially worked through the problem with racket to get an idea of how it should work and to check the test cases. Initially I wrote the program to recursively check all pairs starting with the first.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">teamFinder</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\">length</span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">cond</span> <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">headIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\">add1</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"mi\">2</span> <span class=\"n\">headIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"nb\">list-ref</span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\">list-ref</span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\">else</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"p\">(</span><span class=\"nb\">add1</span> <span class=\"n\">nextIndex</span><span class=\"p\">))]))</span>\n  <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [1, 5]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>Unfortunately this ended up missing on test 3 and after reading the comments I found that the test effectively checks based on the second element of the pair. Specifically, before you check a new pokemon in the list you must have checked all pairs of pokemon made with pokemon before it in the list.</p><h2>Version 2</h2><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">teamFinder-v2</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span> <span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"n\">pokemonList</span> <span class=\"n\">maxPower</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">listLength</span> <span class=\"p\">(</span><span class=\"nb\">length</span> <span class=\"n\">pokemonList</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">cond</span> <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">nextIndex</span> <span class=\"n\">listLength</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)]</span>\n          <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">add1</span> <span class=\"n\">nextIndex</span><span class=\"p\">))]</span>\n          <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">maxPower</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"nb\">list-ref</span> <span class=\"n\">pokemonList</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\">list-ref</span> <span class=\"n\">pokemonList</span> <span class=\"n\">nextIndex</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[~a, ~a]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">headIndex</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]</span>\n          <span class=\"p\">[</span><span class=\"k\">else</span>\n           <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"p\">(</span><span class=\"nb\">add1</span> <span class=\"n\">headIndex</span><span class=\"p\">)</span> <span class=\"n\">nextIndex</span><span class=\"p\">)]))</span>\n  <span class=\"p\">(</span><span class=\"n\">check-maxPower</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 2]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[0, 2]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">7</span> <span class=\"mi\">3</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 3]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[0, 3]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">; [3, 4]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[3, 4]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">33</span> <span class=\"mi\">17</span> <span class=\"mi\">21</span> <span class=\"mi\">31</span> <span class=\"mi\">15</span> <span class=\"mi\">27</span> <span class=\"mi\">29</span> <span class=\"mi\">35</span> <span class=\"mi\">23</span> <span class=\"mi\">25</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"mi\">27</span><span class=\"p\">)</span> <span class=\"c1\">; []</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[]</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">teamFinder</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">; [0, 1]</span>\n<span class=\"p\">(</span><span class=\"nb\">printf</span> <span class=\"s2\">\"[0, 1]\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>It took me a couple minutes to rewrite the program to use <code>nextIndex</code> as the pivot but that was mostly due to some trial and error problems.</p><h2>Version 3</h2><p>Currently my solution is running in <mathjax>$O \\left ( \\frac{n^2}{2} \\right )$</mathjax> however, looking over the comments I know that the solution needs to be close to <mathjax>$O \\left ( n \\right )$</mathjax>.</p><p>We can achieve this speed up by memorizing the values as we work through the <code>pokemonList</code>. Sense we are basing our search off of the second value in the pair we only need to keep a list of the differences between the previous values and the <code>maxPower</code> value.</p><p>If we were checking <code>(teamFinder '(10 5 2 3 7 5) 10)</code> we wouldn’t want to check <code>maxPower = first + second</code> for every pair on each pass. Instead we want to build a list of <code>maxPower - first</code> and check if the <code>second</code> value is in the list.</p><h3>Example</h3><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">racket</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span>difList = &#39;(0),       value = 5\ndifList = &#39;(0 5),     value = 2\ndifList = &#39;(0 5 8),   value = 3\ndifList = &#39;(0 5 8 7), value = 7\n</pre></div>\n</td></tr></tbody></table></div></div><p>We ...</p></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/racket-memorized-function.html\">Memoization in Racket</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/racket-memorized-function.html\"><time datetime=\"2017-04-1\">Saturday, April 1st, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/racket-memorized-function.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/racket-memorized-function.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>After working on <a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\"><code>totalOnes</code></a> last week I thought I would explore how I could implement memoization in racket. Working off an example I found <a href=\"http://rayhightower.com/blog/2014/04/12/recursion-and-memoization/\">here</a> I converted the standard definition of the fibonacci equation into an iterated form and a memoization form.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Fib</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">cond</span> <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">fib</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">cond</span> <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">c</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"n\">fib2-iter</span> <span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">sub1</span> <span class=\"n\">c</span><span class=\"p\">))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\">make-vector</span> <span class=\"mi\">1000</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\">vector-set!</span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">vector-set!</span> <span class=\"n\">cache</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">vector-ref</span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\">vector-set!</span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"nb\">vector-ref</span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">vector-ref</span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">mfib</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;(time (fib 40))</span>\n<span class=\"p\">(</span><span class=\"k\">time</span> <span class=\"p\">(</span><span class=\"n\">fib2</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">time</span> <span class=\"p\">(</span><span class=\"n\">fib3</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>While the standard Fibonacci formula performed as bad as it always does for large values, I was quite suprised by the speed up generated by the memoization method. Memoization uses almost the exact formula for calculating Fibonacci yet it has a speed up that is even with the iterative version into the 10’s of thousands.</p><p>Unfortunately I was never able to find an iterative version of <code>totalOnes</code> code however, there is still a significant increase in speed associated with converting the equation to use memoization.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Fib</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">cond</span> <span class=\"p\">[(</span><span class=\"nb\">=</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">[</span><span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">([</span><span class=\"n\">n2</span> <span class=\"p\">(</span><span class=\"nb\">quotient</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">n</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">n</span> <span class=\"n\">n2</span> <span class=\"mi\">1</span><span class=\"p\">))))]))</span>\n\n<span class=\"p\">(</span><span class=\"k\">time</span> <span class=\"p\">(</span><span class=\"n\">a000788</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\">&gt;</span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">78</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">63</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">0</span>\n<span class=\"nb\">&gt;</span> <span class=\"mi\">9884999</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">cache</span> <span class=\"p\">(</span><span class=\"nb\">make-vector</span> <span class=\"p\">(</span><span class=\"nb\">add1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\">vector-set!</span> <span class=\"n\">cache</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">vector-ref</span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\">vector-set!</span> <span class=\"n\">cache</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">([</span><span class=\"n\">i2</span> <span class=\"p\">(</span><span class=\"nb\">quotient</span> <span class=\"n\">i</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n                               <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">i</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">i2</span><span class=\"p\">)</span>\n                                  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"n\">i</span> <span class=\"n\">i2</span> <span class=\"mi\">1</span><span class=\"p\">)))))</span>\n        <span class=\"p\">(</span><span class=\"nb\">vector-ref</span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">vector-ref</span> <span class=\"n\">cache</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">ma</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">time</span> <span class=\"p\">(</span><span class=\"n\">a2</span> <span class=\"mi\">1000000</span><span class=\"p\">))</span>\n<span class=\"nb\">&gt;</span> <span class=\"n\">cpu</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span> <span class=\"n\">real</span> <span class=\"n\">time:</span> <span class=\"mi\">19</span> <span class=\"n\">gc</span> <span class=\"n\">time:</span> <span class=\"mi\">16</span>\n<span class=\"nb\">&gt;</span> <span class=\"mi\">9884999</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/codefights-memorized-function.html\">CodeFights - totalOnes</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/codefights-memorized-function.html\"><time datetime=\"2017-03-30\">Thursday, March 30th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/codefights-memorized-function.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/codefights-memorized-function.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>I’ve been working through algorithm challenges on <a href=\"https://codefights.com/\">Code Fights</a> and I found a problem that forced me to learn some new techniques. Specifically I had to utilize <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> to speed up a <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a> problem. I have included the description  of the challenge below.</p><h2><a href=\"https://codefights.com/challenge/DgH5cQEgpfu82oBQS\">Description </a></h2><p>Given a positive integer <code>k</code>, calculate the total number of <code>1</code>s in the binary representations of all the numbers from <code>1</code> to <code>k</code>, inclusive.</p><p>Example</p><p>For <code>k = 5</code>, the output should be<br/><code>totalOnes(k) = 7</code>.</p><p>1<mathjax>$_{10}$</mathjax> = 1<mathjax>$_2$</mathjax> =&gt; 1<br/>2<mathjax>$_{10}$</mathjax> = 10<mathjax>$_2$</mathjax> =&gt; 1<br/>3<mathjax>$_{10}$</mathjax> = 11<mathjax>$_2$</mathjax> =&gt; 2<br/>4<mathjax>$_{10}$</mathjax> = 100<mathjax>$_2$</mathjax> =&gt; 1<br/>5<mathjax>$_{10}$</mathjax> = 101<mathjax>$_2$</mathjax> =&gt; 2<br/>Thus, the answer is <code>1 + 1 + 2 + 1 + 2 = 7</code>.</p><h2>Version 1</h2><p>Initially I came at this problem utilizing a strictly brute force approach. I generated a list from <code>1 to n</code> and then mapped a function that converted <code>Integer -&gt; Binary -&gt; String</code>. Then I used concat to flatten the list <code>[String] -&gt; String</code>. Finally I filtered the <code>0</code>s out of the <code>String</code> and took the <code>length</code> of the list.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">totalOnes</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Numeric</span> <span class=\"p\">(</span><span class=\"nf\">showIntAtBase</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span> <span class=\"p\">(</span><span class=\"nf\">intToDigit</span><span class=\"p\">)</span>\n\n<span class=\"nf\">totalOnes</span> <span class=\"n\">k</span> <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"p\">(</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"sc\">&#39;1&#39;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">intToBin</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">k</span><span class=\"p\">])))</span>\n\n<span class=\"nf\">intToBin</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">intToBin</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">showIntAtBase</span> <span class=\"mi\">2</span> <span class=\"n\">intToDigit</span> <span class=\"n\">n</span> <span class=\"s\">\"\"</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>This version worked on all of the sample tests however, it wasn’t fast enough to pass the hidden tests. For this challenge we are given a time limit of <code>4000ms</code> and <code>k</code> is constrained <mathjax>$0 \\lt k \\lt 2^{31}$</mathjax>.</p><p>If I was given <code>k = 2^31 - 1</code> I would have to compute each <code>Int -&gt; String</code> in <code>1.863ns</code> just to have the list ready in less than <code>4000ms</code>.</p><p>At this point it was obvious that I needed to look for an equation that would either compute the value of <code>k</code> directly or that would generate a value near <code>k</code>.</p><h2>Version 2</h2><p>To get a clue for where I needed to go next I generated the values for <code>totalOnes</code> for <code>k &lt;- [1..10]</code>. This gave me <code>1,2,4,5,7,9,12,13,15,17</code> which I was able to plug into the <a href=\"https://oeis.org/A000788\">oeis</a> sequence encyclopedia. I was first shown this site while working on my B.S. and I have found it useful working on a number of algorithm problems.</p><p>They have a recursive formula for calculating the <code>totalOnes</code></p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">totalOnes</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>Which can be converted into Haskell as</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">totalOnes</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">a</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"n\">n2</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"kr\">where</span> <span class=\"n\">n2</span> <span class=\"ow\">=</span> <span class=\"n\">div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>This formula is faster than the <code>Int -&gt; Binary -&gt; String</code> code I was using before however, it introduced a recursive element that branches similar to fibonacci. Looking for ways to speed up the recursive function I found comments suggesting that I take a dynamic programming approach to the problem and start memoizating the function.</p><p>Since I couldn’t find a good method for memoization with Haskell I switched over to <code>C++</code> at this point.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">totalOnes</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>This version was able to pass the first hidden test however, it failed on the second.</p><h2>Version 3</h2><p>I had effectively maxxed out the speed for directly calculating the value of <code>k</code> at this point. The next speed up came when I found another equation on the oeis site for calculating specific values of <code>k</code>.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">totalOnes</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>This bit of code allows me to calculate the value of the nearest <mathjax>$n \\lt k \\; | \\; n = 2^m - 1$</mathjax> which I could use as a jumping off point to reach k.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">totalOnes</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">ma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">k2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">totalOnes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">log2k</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span>         <span class=\"c1\">// formula -&gt; a(2^n - 1) = n*2^(n-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">// so      -&gt; a(pow2sub1) = log2k*2^(log2k-1)</span>\n    <span class=\"kt\">int</span> <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span><span class=\"p\">;</span>          <span class=\"c1\">// counts how many more we need to reach k</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">passed</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ma</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">lstKsub1</span> <span class=\"o\">=</span> <span class=\"n\">log2k</span> <span class=\"o\">*</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">log2k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">passed</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">pow2sub1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">lstKsub1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>I still wasn’t able to complete all of the hidden tests with this code however, it did much better than any of my previous examples.</p><p>Overall I thought that this was a very interesting problem that required a lot more out of the box thinking than most coding challenges I come across. I have never really been given a task that requires a trade off between storage space and calculation time before and I feel that this problem nicely illustrates that concept.</p><p>Going forward I’m planning to take another look at the Coin Change problem from SICP to see if it can similarly benefit from memoization.</p></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs231-test-question.html\">CS231-Assignment1</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs231-test-question.html\"><time datetime=\"2017-03-15\">Wednesday, March 15th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs231-test-question.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs231-test-question.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>I just took a test where I was asked to hand write the code for the following program. As soon as I got out of class I coded up my work to make sure that it worked.</p><p>I found that I forgot a lot of little helper functions, like printing spaces between array elements, however I feel that the overall code was correct.</p><p>The design spec for the problem was to create a program that would ask the user to input data into two arrays. You were then supposed to create a third array that was made by adding or subtracting the values of the two initial arrays based on the index number of the element.</p><p><code>C[i] = A[i] - B[i]</code>, if <code>i</code> is odd, else <code>C[i] = A[i] + B[i]</code></p><p>To finish the program off you print the new array.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">test.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"na\">.data</span>\n<span class=\"nl\">A:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">B:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">C:</span>\t<span class=\"na\">.space</span>\t<span class=\"mi\">40</span>\n<span class=\"nl\">space:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\" \"</span>\n<span class=\"nl\">nl:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\"\\n\"</span>\n\n<span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">A</span>\t\t<span class=\"c\"># save pointers to A, B, C</span>\n        <span class=\"no\">la</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">B</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">C</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass pointer to Create</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">Create</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">jal</span>\t<span class=\"no\">Create</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">jal</span>\t<span class=\"no\">Create_Array_C</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">jal</span>\t<span class=\"no\">Print</span>\n\n\n<span class=\"nl\">exit:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n        <span class=\"nf\">syscall</span>\n\n<span class=\"c\">#-------</span>\n<span class=\"nl\">Create:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\n\n<span class=\"nl\">Create_Loop:</span>\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Create_Done</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n        <span class=\"nf\">syscall</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n        <span class=\"nf\">sw</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n        <span class=\"nf\">j</span>\t<span class=\"no\">Create_Loop</span>\n\n<span class=\"nl\">Create_Done:</span>\n        <span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#-------</span>\n<span class=\"nl\">Print:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\n<span class=\"nl\">Print_Loop:</span>\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Print_Done</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">space</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n        <span class=\"nf\">j</span>\t<span class=\"no\">Print_Loop</span>\n\n<span class=\"nl\">Print_Done:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">nl</span>\n        <span class=\"nf\">syscall</span>\n        <span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#------</span>\n<span class=\"nl\">Create_Array_C:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$a1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$a2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n\n<span class=\"nl\">Create_Array_C_Loop:</span>\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">Create_Array_C_Done</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n        <span class=\"nf\">sub</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"no\">$t5</span>\n        <span class=\"nf\">sw</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t0</span><span class=\"p\">)</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"no\">$t5</span>\n        <span class=\"nf\">sw</span>\t<span class=\"no\">$t6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">2</span>\n        <span class=\"nf\">j</span>\t<span class=\"no\">Create_Array_C_Loop</span>\n\n<span class=\"nl\">Create_Array_C_Done:</span>\n        <span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/asm-dsl.html\">ASM-DSL</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/asm-dsl.html\"><time datetime=\"2017-03-11\">Saturday, March 11th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/asm-dsl.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/asm-dsl.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>I have been thinking about all of the boilerplate code that I keep writing in my assembly class and I decide to start looking into creating a simple <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> to assist with my code writing.</p><p>Mostly I am looking to simplify code blocks that have easy c++ analogs. Specifically cin, cout, and assignment.</p><p>Currently I am writing code like this</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">example.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"na\">...</span>\n<span class=\"c\">#------ cin &lt;&lt; $s0</span>\n<span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n        <span class=\"nf\">syscall</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">#------ $s1 = $s0</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">#------ cout &lt;&lt; $s1</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">syscall</span>\n<span class=\"na\">...</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>To get results for code like this in c++</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">example.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"p\">...</span>\n<span class=\"kt\">int</span> <span class=\"n\">s0</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n<span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s0</span><span class=\"p\">;</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">s0</span><span class=\"p\">;</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n<span class=\"p\">...</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>I recognize that there are some actions that need a full compiler to implement however, I think that I can implement this much in typed/racket with what I already know. I’m choosing to use typed/racket because I want to experiment with using it and I think it will come in useful if I continue to expand the scope of the code.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ASM-DSL.rkt</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">typed/racket</span>\n\n<span class=\"c1\">;; Save register values</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">func</span> <span class=\"s2\">\"$v0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">return</span> <span class=\"s2\">\"$v0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">input</span> <span class=\"s2\">\"$s0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">arg</span> <span class=\"s2\">\"$a0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">zero</span> <span class=\"s2\">\"$0\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Buildin MIPS instructions</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">comment</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"nb\">display</span> <span class=\"p\">(</span><span class=\"nb\">string-append</span> <span class=\"s2\">\"#------ \"</span> <span class=\"n\">s</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">add</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">z</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"nb\">display</span> <span class=\"p\">(</span><span class=\"nb\">string-append</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">add</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span>\n                          <span class=\"n\">x</span> <span class=\"s2\">\", \"</span>\n                          <span class=\"n\">y</span> <span class=\"s2\">\", \"</span>\n                          <span class=\"n\">z</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">li</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"n\">:</span> <span class=\"n\">Integer</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"nb\">display</span> <span class=\"p\">(</span><span class=\"nb\">string-append</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">li</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span>\n                          <span class=\"n\">x</span> <span class=\"s2\">\", \"</span>\n                          <span class=\"p\">(</span><span class=\"nb\">number-&gt;string</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">display</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">syscall</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Macros I built</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">set-reg</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">zero</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">cout-int</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"n\">comment</span> <span class=\"p\">(</span><span class=\"nb\">string-append</span> <span class=\"s2\">\"cout &lt;&lt; \"</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">li</span> <span class=\"n\">func</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">set-reg</span> <span class=\"n\">arg</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">display</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">cin-int</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">:</span> <span class=\"n\">String</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"n\">comment</span> <span class=\"p\">(</span><span class=\"nb\">string-append</span> <span class=\"s2\">\"cin &lt;&lt; \"</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">li</span> <span class=\"n\">func</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add</span> <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">display</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Mips code</span>\n<span class=\"p\">(</span><span class=\"n\">cin-int</span> <span class=\"s2\">\"$s0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">set-reg</span> <span class=\"s2\">\"$s1\"</span> <span class=\"s2\">\"$s0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">cout-int</span> <span class=\"s2\">\"$s1\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">output.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"c\">#------ cin &lt;&lt; $s0</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n        <span class=\"nf\">syscall</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n<span class=\"c\">#------ cout &lt;&lt; $s1</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n        <span class=\"nf\">syscall</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs211-lab7.html\">CS211-Lab7</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab7.html\"><time datetime=\"2017-03-05\">Sunday, March 5th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab7.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab7.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>I thought I would try a different approach to completing the assignment this week. Usually I modify the example problems and templates to fit the needs of the program.</p><p>This week I thought figured I would try giving a testing based methodology a try. Specifically I wanted to incrementally build the program up by compiling and testing as I built it from scratch.</p><h2>Lab 7</h2><p>The purpose of this lab is to practice working with constants, static attributes, and friend functions.</p><p>In this lab, you will design a <em>Student</em> class which has the following private attributes:</p><li>string name;</li><li>const long studentID;</li><h2>Version 1</h2><p>I start with a constructor, setter, and getter for the required class. I test to make sure that all three are being called properly in main.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n <span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Version 2</h2><p>Since the basic skeleton of the program was running I expanded the class to include studentID, major, classification, units, and tuition. My main.cpp is also expanded to test all of the variables added to the class.</p><p>Note: I had some issues with this step. You need to remember to declare constant member values outside of the {} brackets of the constructor.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"s\">\"MATH\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"s\">\"graduate\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"mf\">1000.50</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Student</span> <span class=\"n\">student2</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s\">\"Julia Robertson\"</span><span class=\"p\">,</span> <span class=\"s\">\"MATH\"</span><span class=\"p\">,</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n        <span class=\"k\">const</span> <span class=\"kt\">long</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getId</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"nf\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>\n <span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Constructor functions</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"s\">\"CS\"</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">theName</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theMajor</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theClassification</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">theUnits</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">theName</span><span class=\"p\">;</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">theMajor</span><span class=\"p\">;</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">theClassification</span><span class=\"p\">;</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">theUnits</span><span class=\"p\">;</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Getter functions</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">float</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Setter functions</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Version 3</h2><p>I now add the totalNumofStudents and nextStudentID values to the class. I also add the destructor to the class sense the value it deals with has been added.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"s\">\"MATH\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"s\">\"graduate\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"mf\">1000.50</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Student</span> <span class=\"n\">student2</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s\">\"Julia Robertson\"</span><span class=\"p\">,</span> <span class=\"s\">\"MATH\"</span><span class=\"p\">,</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"o\">~</span><span class=\"n\">Student</span><span class=\"p\">();</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"kt\">long</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n        <span class=\"k\">const</span> <span class=\"kt\">long</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"o\">~</span><span class=\"n\">Student</span><span class=\"p\">();</span>\n\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getId</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"nf\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">totalNumofStudents</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">nextStudentID</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Constructor functions</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"n\">nextStudentID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"s\">\"CS\"</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">theName</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theMajor</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theClassification</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">theUnits</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"n\">nextStudentID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">theName</span><span class=\"p\">;</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">theMajor</span><span class=\"p\">;</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">theClassification</span><span class=\"p\">;</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">theUnits</span><span class=\"p\">;</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::~</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">totalNumofStudents</span><span class=\"o\">--</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Getter functions</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">float</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Setter functions</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Version 4</h2><p>Next I add the printStudent, setData, and setTuition functions to finish off the assignment.  I also clean up the files to align with the specs given in the written assignment.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"n\">Student</span> <span class=\"o\">&amp;</span><span class=\"n\">stu</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">classification</span> <span class=\"o\">==</span> <span class=\"s\">\"graduate\"</span><span class=\"p\">)</span>\n        <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">units</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">units</span> <span class=\"o\">*</span> <span class=\"mi\">700</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">printStudent</span><span class=\"p\">();</span>\n\n    <span class=\"n\">Student</span> <span class=\"n\">student2</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s\">\"unknown\"</span><span class=\"p\">,</span> <span class=\"s\">\"PHYS\"</span><span class=\"p\">,</span> <span class=\"s\">\"graduate\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">setData</span><span class=\"p\">();</span> <span class=\"c1\">// \"Julia Robertson\", \"MATH\", \"undergraduate\", 15</span>\n\n    <span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"n\">student2</span><span class=\"p\">);</span>\n    <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">printStudent</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"kt\">long</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n\n    <span class=\"k\">friend</span> <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"n\">Students</span><span class=\"o\">&amp;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n        <span class=\"k\">const</span> <span class=\"kt\">long</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"o\">~</span><span class=\"n\">Student</span><span class=\"p\">();</span>\n\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getId</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"nf\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">totalNumofStudents</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">nextStudentID</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Constructor functions</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"s\">\"CS\"</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">theName</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theMajor</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theClassification</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">theUnits</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">theName</span><span class=\"p\">;</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">theMajor</span><span class=\"p\">;</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">theClassification</span><span class=\"p\">;</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">theUnits</span><span class=\"p\">;</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::~</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">totalNumofStudents</span><span class=\"o\">--</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Getter functions</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">float</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nl\">Student</span><span class=\"p\">:</span><span class=\"n\">printStudent</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student name:   \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student id:     \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">studentID</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student major:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">major</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student class:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">classification</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student units:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">units</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Tuition:        \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tuition</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Setter functions</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">;</span> \t\t<span class=\"c1\">// Name, Major, and Classification</span>\n    <span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">;</span>\t\t\t<span class=\"c1\">// Units</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students name: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students major: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students classification: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students units: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs231-assignment1.html\">CS231-Assignment1</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs231-assignment1.html\"><time datetime=\"2017-03-02\">Thursday, March 2nd, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs231-assignment1.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs231-assignment1.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>This was a rather long assignment to type up however, the instructions made the requirements rather clear. I wasn’t required to do any outside the box thinking here, just put the peices together correctly.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Lab5.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"c\">#Henry Brooks</span>\n<span class=\"c\">#CS231 Assignment1</span>\n<span class=\"na\">.data</span>\n<span class=\"nl\">array:</span>\t\t<span class=\"na\">.word</span>\t<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">20</span>\n<span class=\"nl\">str0:</span>\t\t<span class=\"na\">.asciiz</span>\t<span class=\"s\">\"Please enter the array length: \"</span>\n<span class=\"nl\">goodMsg:</span>\t<span class=\"na\">.asciiz</span>\t<span class=\"s\">\" is a good value in checkNumPositive\\n\"</span>\n<span class=\"nl\">badMsg:</span>\t\t<span class=\"na\">.asciiz</span> <span class=\"s\">\" is a bad value in checkNumPositive\\n\"</span>\n<span class=\"nl\">errorMsg:</span>\t<span class=\"na\">.asciiz</span>\t<span class=\"s\">\"Invalid array length\\n\"</span>\n<span class=\"nl\">invalidMsg:</span>\t<span class=\"na\">.asciiz</span>\t<span class=\"s\">\"Invalid array value\\n\"</span>\n<span class=\"nl\">space:</span>\t\t<span class=\"na\">.asciiz</span> <span class=\"s\">\" \"</span>\n<span class=\"nl\">newline:</span>\t<span class=\"na\">.asciiz</span> <span class=\"s\">\"\\n\"</span>\n\n<span class=\"na\">.text</span>\n<span class=\"nl\">begin:</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">str0</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">jal</span>\t<span class=\"no\">readNum</span>\t\t<span class=\"c\"># input passed back in $v1</span>\n        <span class=\"no\">add</span>\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># $s0 = arraySize</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arraySize in $a0 to veriftySize</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">verifySize</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># get 1 or 0 back from verifySize</span>\n\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">begin</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arraySize to createArray in $a0</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">createArray</span>\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arraySize to printArray in $a0</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">printArray</span>\n\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arraySize to reverseArray in $a0</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">reverseArray</span>\n\n\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arraySize to printArray in $a0</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">printArray</span>\n\n<span class=\"nl\">exit:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n        <span class=\"nf\">syscall</span>\n\n<span class=\"c\">#----------- int readNum(), returns and int</span>\n<span class=\"nl\">readNum:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n        <span class=\"nf\">syscall</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass input back in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#----------- int verifySize(int arraySize), returns 0 or 1</span>\n<span class=\"nl\">verifySize:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save passed arg (arraySize) to $t0</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">20</span>\n        <span class=\"nf\">bgt</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">verifySizeBad</span>\n        <span class=\"nf\">ble</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">verifySizeBad</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># pass 1 back to main in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"nl\">verifySizeBad:</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">errorMsg</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t\t<span class=\"c\"># pass 0 back to main in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#----------- void createArray(int arraySize), returns nothing</span>\n<span class=\"nl\">createArray:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save passed arg (arraySize) to $s1</span>\n        <span class=\"no\">sw</span>\t<span class=\"no\">$ra</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$sp</span><span class=\"p\">)</span>\t\t<span class=\"c\"># save current $ra to stack</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t\t<span class=\"c\"># counter</span>\n        <span class=\"no\">la</span>\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">array</span>\t\t<span class=\"c\"># create pointer to array[0]</span>\n\n<span class=\"nl\">createArrayLoop:</span>\t\t<span class=\"c\"># arraySize &lt; counter</span>\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">createArrayDone</span>\n\n        <span class=\"nf\">jal</span>\t<span class=\"no\">readNum</span>\t\t\t<span class=\"c\"># int readNum(), returns int in $v1</span>\n        <span class=\"no\">add</span>\t<span class=\"no\">$s4</span><span class=\"p\">,</span> <span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save arrayEntry to $s4</span>\n\n<span class=\"c\">#------- int checkNumPositive(arrayEntry), returns 0 or 1</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s4</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arrayEntry to checkNumPositive</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">checkNumPositive</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save return value to $t4, either 0 or 1</span>\n\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">createArrayBad</span>\n\n<span class=\"c\">#------- int divisibleBy3(arrayEntry), returns 0 or 1</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s4</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># pass arrayEntry to divisibleBy3</span>\n        <span class=\"no\">jal</span>\t<span class=\"no\">divisibleBy3</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save return value to $t4, either 0 or 1</span>\n\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">createArrayBad</span>\n\n<span class=\"c\">#------- if both tests pass then save to the array and increment the counters</span>\n        <span class=\"nf\">sw</span>\t<span class=\"no\">$s4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$s3</span><span class=\"p\">)</span>\n\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t<span class=\"c\"># pointer++</span>\n        <span class=\"no\">addi</span>\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t<span class=\"c\"># counter--</span>\n        <span class=\"no\">j</span>\t<span class=\"no\">createArrayLoop</span>\n\n<span class=\"nl\">createArrayDone:</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$ra</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$sp</span><span class=\"p\">)</span>\t<span class=\"c\"># load old $ra from stack</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"nl\">createArrayBad:</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">invalidMsg</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">j</span>\t<span class=\"no\">createArrayLoop</span>\n\n<span class=\"c\">#----------- void reverseArray(int arraySize), returns nothing</span>\n<span class=\"nl\">reverseArray:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save passed arg (arraySize) to $t0</span>\n\n        <span class=\"nf\">li</span>\t\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t<span class=\"c\"># set $t1 = 4</span>\n        <span class=\"no\">mult</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t1</span>\t<span class=\"c\"># length * 4</span>\n        <span class=\"no\">mflo</span>\t<span class=\"no\">$t1</span>\t\t\t<span class=\"c\"># set $t1 = length * 4</span>\n\n        <span class=\"nf\">la</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">array</span>\t<span class=\"c\"># set pointer to start of the array</span>\n        <span class=\"no\">la</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">array</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t1</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">4</span>\t<span class=\"c\"># set pointer to end of the array</span>\n\n<span class=\"nl\">reverseArraySwap:</span>\n        <span class=\"nf\">bgt</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">reverseArrayDone</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t3</span><span class=\"p\">)</span>\n        <span class=\"nf\">sw</span>\t<span class=\"no\">$t5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t2</span><span class=\"p\">)</span>\n        <span class=\"nf\">sw</span>\t<span class=\"no\">$t4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t3</span><span class=\"p\">)</span>\n\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"no\">$t2</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">4</span>\n        <span class=\"nf\">j</span>\t<span class=\"no\">reverseArraySwap</span>\n\n<span class=\"nl\">reverseArrayDone:</span>\n        <span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#----------- void printArray(int arraySize), returns nothing</span>\n<span class=\"nl\">printArray:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save passed arg (arraySize) to $t0</span>\n        <span class=\"no\">la</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">array</span>\n\n<span class=\"nl\">printArrayLoop:</span>\n        <span class=\"nf\">beq</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">printArrayDone</span>\n        <span class=\"nf\">lw</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">space</span>\n        <span class=\"nf\">syscall</span>\n\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">addi</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span>\n        <span class=\"nf\">j</span>\t<span class=\"no\">printArrayLoop</span>\n\n<span class=\"nl\">printArrayDone:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">la</span>\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">newline</span>\n        <span class=\"nf\">syscall</span>\n        <span class=\"nf\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#----------- int divisibleBy3(int arrayEntry) , returns 0 or 1</span>\n<span class=\"nl\">divisibleBy3:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save passed arg (arrayEntry) to $t0</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n        <span class=\"nf\">div</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$t1</span>\n        <span class=\"nf\">mfhi</span>\t<span class=\"no\">$t3</span>\n\n        <span class=\"nf\">bne</span>\t<span class=\"no\">$t3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">divisibleBy3Bad</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># pass 1 back to main in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"nl\">divisibleBy3Bad:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t\t<span class=\"c\"># pass 0 back to main in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"c\">#----------- int checkNumPositive(int arrayEntry) , return 0 or 1</span>\n<span class=\"nl\">checkNumPositive:</span>\n        <span class=\"nf\">add</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t<span class=\"c\"># save passed arg (arrayEntry) to $t0</span>\n\n        <span class=\"nf\">blt</span>\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">checkNumPositiveBad</span>\n\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># pass 1 back to main in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n\n<span class=\"nl\">checkNumPositiveBad:</span>\n        <span class=\"nf\">li</span>\t<span class=\"no\">$v1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t\t<span class=\"c\"># pass 0 back to main in $v1</span>\n        <span class=\"no\">jr</span>\t<span class=\"no\">$ra</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs231-lab4.html\">CS231-Lab4</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs231-lab4.html\"><time datetime=\"2017-02-06\">Monday, February 6th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs231-lab4.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs231-lab4.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Lab4.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab4 sum numbers</span>\n\n                <span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"===============================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: This program asks a user how many numbers they want to sum\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              Henry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"===============================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"How many numbers would you like to add together? \"</span>\n<span class=\"nl\">answer:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The sum of the numbers is \"</span>\n                <span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n                <span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print query</span>\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Take number of values the user wants to sum</span>\n<span class=\"c\">################### and save it to $s0</span>\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">add</span> <span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Initialize $s2 to 0 , sum = 0</span>\n                <span class=\"nf\">add</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else sum += input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">loop:</span>\t\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$v0</span>\t\t<span class=\"c\"># $s2 += $v0 , sum += input</span>\n                <span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># $s1++ , count++</span>\n                <span class=\"no\">j</span> <span class=\"no\">loop</span>\n\n\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">answer</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n                <span class=\"nf\">syscall</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Lab4b.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"c\">## Henry Brooks</span>\n<span class=\"c\">## CS231 Lab4 divisiblity</span>\n\n                <span class=\"na\">.data</span>\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: \\tThis program asks a user how many numbers they\\n\\t\\t\\twant to find that are divisible by 6\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              \\tHenry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       \\t02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"How many positive numbers that are divisable by 6 do you want to add?\\n\"</span>\n<span class=\"nl\">query2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter a number: \"</span>\n<span class=\"nl\">badcount:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Invalid number\\nPlease enter a number greater than zero\\n\"</span>\n<span class=\"nl\">arrow:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"==&gt; \"</span>\n<span class=\"nl\">good:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is divisible by 6\\n\"</span>\n<span class=\"nl\">bad:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not divisible by 6. Enter another number.\\n\"</span>\n<span class=\"nl\">error1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"**** ERROR: \"</span>\n<span class=\"nl\">error2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not in the range of 1 to 100. Enter another number.\\n\"</span>\n<span class=\"nl\">error3:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\" is not a positive number. Enter another number.\\n\"</span>\n<span class=\"nl\">answer:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The sum of the positive numbers between 1 and 100 that are divisible by 6, is: \"</span>\n\n                <span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n                <span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"nl\">main2:</span>\n<span class=\"c\">################### Print query</span>\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query1</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Take user input</span>\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Check that input is valid</span>\n                <span class=\"nf\">ble</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">badinput</span>\n\n<span class=\"c\">################## If input is good set $s0 to $v0</span>\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Initialize $s2 to 0 and $s1 to 0, sum = 0, count = 0</span>\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else sum += input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">loop:</span>\t\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\t\t<span class=\"c\"># s0 = total, s1 = count</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query2</span>\t\t<span class=\"c\"># load \"enter number:\" message</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t\t<span class=\"c\"># load user input program</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># get user input, (cin)</span>\n\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># save input to save3 register</span>\n\n                <span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">gt100</span>\t\t<span class=\"c\"># run if input is zero</span>\n\n                <span class=\"nf\">blt</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">ltzero</span>\t\t<span class=\"c\"># run if input is less than 0</span>\n\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">100</span>\t\t<span class=\"c\"># make t0 = 100</span>\n                <span class=\"no\">blt</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">gt100</span>\t\t<span class=\"c\"># run if input is greater than 100</span>\n\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">6</span>\t\t<span class=\"c\"># make t0 = 6</span>\n                <span class=\"no\">div</span>\t\t\t<span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$t0</span>\t\t<span class=\"c\"># divide input by 6</span>\n                <span class=\"no\">mfhi</span>\t\t\t<span class=\"no\">$t0</span>\t\t\t<span class=\"c\"># move remainder of input/6 to t0</span>\n                <span class=\"no\">bne</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">notdiv</span>\t\t<span class=\"c\"># run if not divisible by 6</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s3</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load user input into arg0</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">good</span>\t\t<span class=\"c\"># load divisiblity good message</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">add</span>\t\t\t<span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$s3</span>\t\t<span class=\"c\"># $s2 += $v0 , sum += input</span>\n                <span class=\"no\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># $s1++ , count++</span>\n                <span class=\"no\">j</span> <span class=\"no\">loop</span>\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badinput:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">##################### input is less than 0</span>\n<span class=\"nl\">ltzero:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print string</span>\n\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error3</span>\t\t<span class=\"c\"># load less than zero message</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\n                <span class=\"nf\">j</span>\t\t\t<span class=\"no\">loop</span>\t\t\t<span class=\"c\"># return to loop</span>\n\n<span class=\"c\">#################### input is greater than 100</span>\n<span class=\"nl\">gt100:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print string</span>\n\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error2</span>\t\t<span class=\"c\"># load less than zero message</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\n                <span class=\"nf\">j</span>\t\t\t<span class=\"no\">loop</span>\t\t\t<span class=\"c\"># return to loop</span>\n\n<span class=\"c\">#################### input is not divisible by 6</span>\n<span class=\"nl\">notdiv:</span>\t\t<span class=\"nf\">add</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># send input to temp</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">arrow</span>\t\t<span class=\"c\"># load arrow string</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">error1</span>\t\t<span class=\"c\"># load error header</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print error header</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load temp into arg0</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print temp</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">bad</span>\t\t<span class=\"c\"># load not divisible message</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">j</span>\t\t\t<span class=\"no\">loop</span>\n\n<span class=\"c\">#################### exit from program</span>\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">answer</span>\t\t<span class=\"c\"># load answer message</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print answer message</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load sum</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print sum</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs231-lab5.html\">CS231-Lab4</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs231-lab5.html\"><time datetime=\"2017-02-06\">Monday, February 6th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs231-lab5.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs231-lab5.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Lab5.asm</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"c\">## Henry Brooks</span>\n\n                <span class=\"na\">.data</span>\n<span class=\"nl\">arry:</span>\t\t<span class=\"na\">.word</span>\t\t<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span>\n\n<span class=\"nl\">space:</span>  \t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n<span class=\"nl\">header1:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n<span class=\"nl\">header2:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Program Description: \\tThis program asks a user how many numbers they\\n\\t\\t\\tadd to an array, then returns the array in reverse order\\n\"</span>\n<span class=\"nl\">header3:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Author:              \\tHenry Brooks\\n\"</span>\n<span class=\"nl\">header4:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"Creation Date:       \\t02/06/2017\\n\"</span>\n<span class=\"nl\">header5:</span>\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"======================================================================\\n\"</span>\n\n<span class=\"nl\">nl:</span>\t\t<span class=\"na\">.asciiz</span> \t<span class=\"s\">\"\\n\"</span>\n\n<span class=\"nl\">query1:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter the number of elements:\\n\"</span>\n<span class=\"nl\">query2:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Enter number \"</span>\n<span class=\"nl\">query3:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\":\\t\"</span>\n<span class=\"nl\">badcount1:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Error array can&#39;t have more than 10 elements, try again!!\\n\"</span>\n<span class=\"nl\">badcount2:</span>\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"Error array can&#39;t have less than 1 element\\n\"</span>\n<span class=\"nl\">return:</span>\t\t<span class=\"na\">.asciiz</span>\t\t<span class=\"s\">\"The content of array in reverse order is:\\n\"</span>\n\n                <span class=\"na\">.text</span>\n<span class=\"nl\">main:</span>\n<span class=\"c\">################### Print header information</span>\n                <span class=\"nf\">li</span> \t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header2</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header3</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header4</span>\n                <span class=\"nf\">syscall</span>\n                <span class=\"nf\">la</span> \t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header5</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Print query</span>\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query1</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"nl\">main2:</span>\n<span class=\"c\">################### Take user input</span>\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n                <span class=\"nf\">syscall</span>\n\n<span class=\"c\">################### Check that input is valid</span>\n                <span class=\"nf\">ble</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"no\">badInputLo</span>\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n                <span class=\"nf\">bgt</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"no\">$t0</span><span class=\"p\">,</span> <span class=\"no\">badInputHi</span>\n\n<span class=\"c\">################## If input is good set $s0 to $v0</span>\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t<span class=\"c\"># lengthOfArray</span>\n\n<span class=\"c\">################### Initialize $s1 to 0</span>\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\t\t<span class=\"c\"># counter</span>\n                <span class=\"no\">lw</span>\t\t\t<span class=\"no\">$t1</span><span class=\"p\">,</span> <span class=\"no\">arry</span>\t\t<span class=\"c\"># pointer</span>\n\n<span class=\"c\">################### Loop to collect inputs from user</span>\n<span class=\"c\">################### if ( count == value) break</span>\n<span class=\"c\">###################   else array[count] = input</span>\n<span class=\"c\">###################        count++</span>\n<span class=\"c\">###################        loop</span>\n\n<span class=\"nl\">read_loop:</span>\t<span class=\"nf\">beq</span>\t\t\t<span class=\"no\">$s0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">exit</span>\t\t<span class=\"c\"># pointer is at end</span>\n\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query2</span>\t\t<span class=\"c\"># load \"enter number \" message</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print message</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print intger</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load count</span>\n                <span class=\"no\">addi</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t<span class=\"c\"># increment for printing</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">query3</span>\t\t<span class=\"c\"># load \":\\t\"</span>\n                <span class=\"no\">syscall</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\t\t\t<span class=\"c\"># load user input program</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># get user input, (cin)</span>\n\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$t7</span><span class=\"p\">,</span> <span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n\n                <span class=\"nf\">sw</span>\t\t\t<span class=\"no\">$t7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"no\">$t1</span><span class=\"p\">)</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">addi</span>\t\t\t<span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"no\">$s1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n                <span class=\"nf\">j</span> \t\t\t<span class=\"no\">read_loop</span>\n\n\n<span class=\"c\">#################### Loop to read off the elements of the array</span>\n<span class=\"c\">#print_loop:</span>\n<span class=\"c\">#\t\tbeq\t\t\t$t2, $0, end\t# check array end</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#\t\tlw\t\t\t$a0, ($t1)</span>\n<span class=\"c\">#\t\tli\t\t\t$v0, 1</span>\n<span class=\"c\">#\t\tsyscall</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#\t\tli\t\t\t$v0, 4</span>\n<span class=\"c\">#\t\tsyscall</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#\t\taddi\t\t\t$t2, $t2, -1</span>\n<span class=\"c\">#\t\taddi\t\t\t$t1, $t1, -4</span>\n<span class=\"c\">#\t\tj\tprint_loop\t# ret</span>\n\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badInputLo:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount2</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">#################### User input for count is less than or equal to 0</span>\n<span class=\"nl\">badInputHi:</span>\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">badcount1</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">j</span>\t\t\t<span class=\"no\">main2</span>\n\n<span class=\"c\">#################### exit from program</span>\n<span class=\"nl\">exit:</span>\t\t<span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\t\t\t<span class=\"c\"># load print string</span>\n                <span class=\"no\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">return</span>\t\t<span class=\"c\"># load answer message</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print answer message</span>\n\n                <span class=\"nf\">la</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">header1</span>\n                <span class=\"nf\">syscall</span>\n\n                <span class=\"nf\">li</span>\t\t\t<span class=\"no\">$v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\t\t\t<span class=\"c\"># load print int</span>\n                <span class=\"no\">add</span>\t\t\t<span class=\"no\">$a0</span><span class=\"p\">,</span> <span class=\"no\">$s2</span><span class=\"p\">,</span> <span class=\"no\">$0</span>\t\t<span class=\"c\"># load sum</span>\n                <span class=\"no\">syscall</span>\t\t\t\t\t\t<span class=\"c\"># print sum</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs211-lab2.html\">CS211-Lab2 in Racket</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab2.html\"><time datetime=\"2017-02-03\">Friday, February 3rd, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab2.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab2.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>The purpose of this lab is to practice working with vectors.</p><p>Write a program that reads an unknown number of integers from a data file called “data.txt” into a vector of integers named V. V is initially empty and grows as the user reads data from file.</p><p>Once done copying data into vector V, you need to print the contents of V and perform some other tasks on the vector as described below.</p><p>Your program should do the following:</p><p>Create an empty vector of integers V.<br/>Read the integers from data.txt into V.<br/>Ask the user to input a key. Then search for the key in vector V and inform the user about the existence (true / false) of the key in V.<br/>Print the contents of V.</p><div class=\"listing-filename\">&#128196; data.txt</div><pre class=\"code\">5 6 12 87 100 28 35 66 77 29</pre><div class=\"listing-filename\">&#128196; ./a.out &gt; output.txt input=&gt;12</div><pre class=\"code\">\nPlease enter a key to search for in data3.txt: 5\n6\n12 &lt;--\n87\n100\n28\n35\n66\n77\n29\n\nThe key was found\n</pre><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Lab1_Program3.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Initialized empty vector</span>\n  <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">V</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Initialized holding variable</span>\n  <span class=\"kt\">int</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Initialized inputFile</span>\n  <span class=\"n\">ifstream</span> <span class=\"n\">inputFile</span><span class=\"p\">;</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"data.txt\"</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Load first element of inputFile into holding</span>\n  <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// While inputFile is sending results</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inputFile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">V</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">holding</span><span class=\"p\">);</span>\n    <span class=\"n\">inputFile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">holding</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Close inputfile</span>\n  <span class=\"n\">inputFile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please enter a key to search for in data3.txt: \"</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Initialize key and search flag</span>\n  <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Get user input</span>\n  <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Check all values in vector</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"nl\">val</span> <span class=\"p\">:</span> <span class=\"n\">V</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" &lt;--\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n      <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// If the found flag is true output positive result</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">found</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The key was found\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"The key was not found\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Lab1_Program2.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n        <footer class=\"main\">\n            <ul>\n                <li><a href=\"mailto:brook057@cougars.csusm.edu\">brook057@cougars.csusm.edu</a></li>\n                <li>Source code on<a href=\"https://github.com/hebr3/hebr3.github.io\"> Github</a></li>\n            </ul>\n        </footer>\n    </body>\n</html>\n") (metas . #hasheq((here-path . "/media/henry/Steam/Github/hebr3.github.io/index.html.pp"))))