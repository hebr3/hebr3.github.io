#hash((doc . "\n\n<!DOCTYPE html>\n<html lang=\"en\" class=\"gridded\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"generator\" content=\"Racket 6.8 + Pollen 1.1.1266.881\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Henry Brooks</title>\n        <link rel=\"stylesheet\" href=\"/styles.css\" media=\"screen\">\n                <script type=\"text/javascript\"\n                  src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n                </script>\n                <script type=\"text/x-mathjax-config\">\n                  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$']]}});\n                </script>\n    </head>\n    <body>\n        <header class=\"main\">\n            <p><a href=\"/\" class=\"home\">Henry Brooks</a></p>\n            <nav>\n                <ul>\n                    <li class=\"current-section\"><a href=\"/topics.html\">Topics</a></li>\n                    <li><a href=\"/about.html\">About</a></li>\n                </ul>\n            </nav>\n        </header>\n\n        <article><header>\n<h1><a href=\"posts/cs211-lab7.html\">CS211-Lab7</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab7.html\"><time datetime=\"2017-03-05\">Sunday, March 5th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab7.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab7.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">untyped-test.rkt</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\">require</span> <span class=\"n\">rackunit</span> <span class=\"s2\">\"untyped-gt.rkt\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">check-true</span> <span class=\"p\">(</span><span class=\"n\">gt</span> <span class=\"mi\">42</span> <span class=\"mi\">41</span><span class=\"p\">))</span> <span class=\"c1\">; works</span>\n<span class=\"p\">(</span><span class=\"n\">check-exn</span> <span class=\"nb\">exn:fail:contract?</span> <span class=\"p\">(</span><span class=\"n\">Î»</span> <span class=\"k\">_</span> <span class=\"p\">(</span><span class=\"n\">gt</span> <span class=\"mf\">42.5</span> <span class=\"mi\">41</span><span class=\"p\">)))</span> <span class=\"c1\">; fails</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>I thought I would try a different approach to completing the assignment this week. Usually I modify the example problems and templates to fit the needs of the program.</p><p>This week I thought figured I would try giving a testing based methodology a try. Specifically I wanted to incrementally build the program up by compiling and testing as I built it from scratch.</p><h2>Lab 7</h2><p>The purpose of this lab is to practice working with constants, static attributes, and friend functions.</p><p>In this lab, you will design a <em>Student</em> class which has the following private attributes:</p><ul>string name;</ul><ul>const long studentID;</ul><h2>Version 1</h2><p>I start with a constructor, setter, and getter for the required class. I test to make sure that all three are being called properly in main.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n <span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Version 2</h2><p>Since the basic skeleton of the program was running I expanded the class to include studentID, major, classification, units, and tuition. My main.cpp is also expanded to test all of the variables added to the class.</p><p>Note: I had some issues with this step. You need to remember to declare constant member values outside of the {} brackets of the constructor.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"s\">\"MATH\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"s\">\"graduate\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"mf\">1000.50</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Student</span> <span class=\"n\">student2</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s\">\"Julia Robertson\"</span><span class=\"p\">,</span> <span class=\"s\">\"MATH\"</span><span class=\"p\">,</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n        <span class=\"k\">const</span> <span class=\"kt\">long</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getId</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"nf\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>\n <span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Constructor functions</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"s\">\"CS\"</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">theName</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theMajor</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theClassification</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">theUnits</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">theName</span><span class=\"p\">;</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">theMajor</span><span class=\"p\">;</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">theClassification</span><span class=\"p\">;</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">theUnits</span><span class=\"p\">;</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Getter functions</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">float</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Setter functions</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Version 3</h2><p>I now add the totalNumofStudents and nextStudentID values to the class. I also add the destructor to the class sense the value it deals with has been added.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s\">\"steve\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"s\">\"MATH\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"s\">\"graduate\"</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"mf\">1000.50</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Student</span> <span class=\"n\">student2</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s\">\"Julia Robertson\"</span><span class=\"p\">,</span> <span class=\"s\">\"MATH\"</span><span class=\"p\">,</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"o\">~</span><span class=\"n\">Student</span><span class=\"p\">();</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"kt\">long</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n        <span class=\"k\">const</span> <span class=\"kt\">long</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"o\">~</span><span class=\"n\">Student</span><span class=\"p\">();</span>\n\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getId</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"nf\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">totalNumofStudents</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">nextStudentID</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Constructor functions</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"n\">nextStudentID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"s\">\"CS\"</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">theName</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theMajor</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theClassification</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">theUnits</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"n\">nextStudentID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">theName</span><span class=\"p\">;</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">theMajor</span><span class=\"p\">;</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">theClassification</span><span class=\"p\">;</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">theUnits</span><span class=\"p\">;</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::~</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">totalNumofStudents</span><span class=\"o\">--</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Getter functions</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">float</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Setter functions</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Version 4</h2><p>Next I add the printStudent, setData, and setTuition functions to finish off the assignment.  I also clean up the files to align with the specs given in the written assignment.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">main.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"n\">Student</span> <span class=\"o\">&amp;</span><span class=\"n\">stu</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">classification</span> <span class=\"o\">==</span> <span class=\"s\">\"graduate\"</span><span class=\"p\">)</span>\n        <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">units</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">units</span> <span class=\"o\">*</span> <span class=\"mi\">700</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Student</span> <span class=\"n\">student1</span><span class=\"p\">;</span>\n    <span class=\"n\">student1</span><span class=\"p\">.</span><span class=\"n\">printStudent</span><span class=\"p\">();</span>\n\n    <span class=\"n\">Student</span> <span class=\"n\">student2</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s\">\"unknown\"</span><span class=\"p\">,</span> <span class=\"s\">\"PHYS\"</span><span class=\"p\">,</span> <span class=\"s\">\"graduate\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">setData</span><span class=\"p\">();</span> <span class=\"c1\">// \"Julia Robertson\", \"MATH\", \"undergraduate\", 15</span>\n\n    <span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"n\">student2</span><span class=\"p\">);</span>\n    <span class=\"n\">student2</span><span class=\"p\">.</span><span class=\"n\">printStudent</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.h</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#ifndef STDUENT_H</span>\n<span class=\"cp\">#define STUDENT_H</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">clast</span> <span class=\"n\">Student</span> <span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"kt\">long</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n\n    <span class=\"k\">friend</span> <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"n\">Students</span><span class=\"o\">&amp;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">private</span><span class=\"o\">:</span>\n        <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n        <span class=\"k\">const</span> <span class=\"kt\">long</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"n\">Student</span><span class=\"p\">();</span>\n        <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"o\">~</span><span class=\"n\">Student</span><span class=\"p\">();</span>\n\n        <span class=\"n\">string</span> <span class=\"nf\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getId</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"n\">string</span> <span class=\"nf\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">float</span> <span class=\"nf\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"nf\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n        <span class=\"kt\">long</span> <span class=\"nf\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"p\">();</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n</td></tr></tbody></table></div></div><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">Student.cpp</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"Student.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">totalNumofStudents</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">nextStudentID</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Constructor functions</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"s\">\"CS\"</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"s\">\"undergraduate\"</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">theName</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theMajor</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">theClassification</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">theUnits</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">studentID</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">theName</span><span class=\"p\">;</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">theMajor</span><span class=\"p\">;</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">theClassification</span><span class=\"p\">;</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">theUnits</span><span class=\"p\">;</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Student</span><span class=\"o\">::~</span><span class=\"n\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">totalNumofStudents</span><span class=\"o\">--</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Getter functions</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">studentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getMajor</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">major</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">string</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getClassification</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">classification</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getUnits</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">units</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">float</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTuition</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">tuition</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getTotalNumofStudents</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">totalNumofStudents</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">long</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">getNextStudentID</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">nextStudentID</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nl\">Student</span><span class=\"p\">:</span><span class=\"n\">printStudent</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student name:   \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student id:     \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">studentID</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student major:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">major</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student class:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">classification</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Student units:  \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">units</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span>\n         <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Tuition:        \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tuition</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Setter functions</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setMajor</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setClassification</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setUnits</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setTuition</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tuition</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">Student</span><span class=\"o\">::</span><span class=\"n\">setData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">string</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">;</span> \t\t<span class=\"c1\">// Name, Major, and Classification</span>\n    <span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">;</span>\t\t\t<span class=\"c1\">// Units</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students name: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students major: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students classification: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Please enter the students units: \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs211-lab2.html\">CS211-Lab2 in Racket</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab2.html\"><time datetime=\"2017-02-03\">Friday, February 3rd, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab2.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab2.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>The purpose of this lab is to practice working with vectors.</p><p>Write a program that reads an unknown number of integers from a data file called âdata.txtâ into a vector of integers named V. V is initially empty and grows as the user reads data from file.</p><p>Once done copying data into vector V, you need to print the contents of V and perform some other tasks on the vector as described below.</p><p>Your program should do the following:</p><p>Create an empty vector of integers V.<br/>Read the integers from data.txt into V.<br/>Ask the user to input a key. Then search for the key in vector V and inform the user about the existence (true / false) of the key in V.<br/>Print the contents of V.</p><div class=\"listing-filename\">&#128196; data.txt</div><pre class=\"code\">5 6 12 87 100 28 35 66 77 29</pre><div class=\"listing-filename\">&#128196; ./a.out &gt; output.txt input=&gt;12</div><pre class=\"code\">\nPlease enter a key to search for in data3.txt: 5\n6\n12 &lt;--\n87\n100\n28\n35\n66\n77\n29\n\nThe key was found\n</pre><div class=\"listing-filename\">&#128196; Lab1_Program3.cpp</div><pre class=\"code\">#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\nusing namespace std;\n\nint main()\n{\n  // Initialized empty vector\n  vector&lt;int&gt; V;\n\n  // Initialized holding variable\n  int holding;\n\n  // Initialized inputFile\n  ifstream inputFile;\n  inputFile.open(\"data.txt\");\n\n  // Load first element of inputFile into holding\n  inputFile &gt;&gt; holding;\n\n  // While inputFile is sending results\n  while (inputFile) {\n    V.push_back(holding);\n    inputFile &gt;&gt; holding;\n  }\n\n  // Close inputfile\n  inputFile.close();\n\n\n  cout &lt;&lt; endl\n       &lt;&lt;\"Please enter a key to search for in data3.txt: \";\n\n  // Initialize key and search flag\n  int key;\n  bool found = false;\n\n  // Get user input\n  cin &gt;&gt; key;\n\n  // Check all values in vector\n  for (int val : V) {\n    cout &lt;&lt; val;\n    if (val == key) {\n      cout &lt;&lt; \" &lt;--\" &lt;&lt; endl;\n      found = true;\n    } else {\n      cout &lt;&lt; endl;\n    }\n  }\n\n  cout &lt;&lt; endl;\n\n  // If the found flag is true output positive result\n  if (found) {\n    cout &lt;&lt; \"The key was found\" &lt;&lt; endl &lt;&lt; endl;\n  } else {\n    cout &lt;&lt; \"The key was not found\" &lt;&lt; endl;\n  }\n\n}</pre><div class=\"listing-filename\">&#128196; Lab1_Program2.cpp</div><pre class=\"code\">#lang racket\n</pre></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs211-lab1-program3.html\">CS211-Lab1-Program3 in Racket</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab1-program3.html\"><time datetime=\"2017-01-30\">Monday, January 30th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab1-program3.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab1-program3.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Program 3</h2><p>Write a program with several functions that perform the following tasks:</p><p>a. Read the following 10 integer numbers from the file data.txt into array A.<br/>     10 15 27 89 90 95 27 13 99 33<br/> Call function ReadArray that reads numbers from the file data.txt into an array.</p><p>b. Copy array A into array B in reverse order.<br/>Call function ReverseArray that copies an array into another array in reverse order</p><p>c. Print the elements of Array A and B.<br/>Call function PrintArray that prints the elements of an array of any size</p><p>d. Find the number of elements in array A that are &gt;= 80 and &lt;=100.<br/>Call function FindRange that finds and returns the number of elements in an array of any size that are within a certain range (min, max)</p><p>e. Find the index of the elements in array A that are divisible by 5.<br/>Call function FindDiv that finds and returns the number of the elements in array that are divisible by 5</p><p>f. Find average in array A.<br/>Call function ArrayAvg that finds and returns the average of elements in an array of any size</p><p>g. Find the minimum number in array A.<br/>Call function ArrayMin that finds and returns the minimum number in an array of any size</p><p>h. Ask the user to input a key. Then search for the key in array A and inform the user about the existence (true / false) of the key in array.<br/>Call function KeySearch that searches for a key in an array of any size and returns true/false as result</p><p>NOTES:<br/>- If a function is supposed to return a value, print that value in main not inside the function.<br/>- Any parameter that is not supposed to be changed inside a function must be declared as a constant parameter.</p><div class=\"listing-filename\">&#128196; data.txt</div><pre class=\"code\">10 15 27 89 90 95 27 13 99 33</pre><div class=\"listing-filename\">&#128196; ./a.out &gt; output.txt</div><pre class=\"code\">10 15 27 89 90 95 27 13 99 33\n\n33 99 13 27 95 90 89 27 15 10\n\nThere are 4 values in arrayA between 80 and 100.\n\nThere are elements divisible by 5 at positions 1, 2, 5, 6, 4\n\nThe average of the array is 49.8\n\nThe minimum element of the array is 10\n\nEnter an integer value to search for: True</pre><div class=\"listing-filename\">&#128196; Lab1_Program3.cpp</div><pre class=\"code\">#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\n// Function prototypes *************************************************\nint fileSize();                        // aux\nvoid ReadArray(int [], int);            // a\nvoid ReverseArray(int [], int [], int); // b\nvoid PrintArray(int [], int);           // c\nint FindRange(int, int, int []);        // d\nint FindDiv(int, int []);               // e\ndouble ArrayAvg(int []);                // f\nint ArrayMin(int []);                   // g\nbool KeySearch(int, int []);            // h\n\nint main () {\n  // find length of the input\n  int SIZE = fileSize();\n\n  // initialize array A and B\n  int arrayA[SIZE];\n  int arrayB[SIZE];\n\n  // a. Read data from data2.txt to arrayA\n  ReadArray(arrayA, SIZE);\n\n  // b. Copy arrayA into arrayB in reverse order\n  ReverseArray(arrayA, arrayB, SIZE);\n\n  // c. Print arrayA and arrayB\n  PrintArray(arrayA, SIZE);\n  PrintArray(arrayB, SIZE);\n\n  // d. Find the number of elements in array between 80 and 100\n  cout &lt;&lt; \"There are \"\n       &lt;&lt; FindRange(80, 100, arrayA)\n       &lt;&lt; \" values in arrayA between \"\n       &lt;&lt; 80\n       &lt;&lt; \" and \"\n       &lt;&lt; 100 &lt;&lt; \".\"\n       &lt;&lt; endl &lt;&lt;endl;\n\n  // e. Find the number of elements divisible by 5\n  cout &lt;&lt; \"There are elements divisible by 5 at positions \";\n  cout &lt;&lt; FindDiv(5, arrayA)\n       &lt;&lt; endl &lt;&lt; endl;\n\n  // f. Find the average of the array\n  cout &lt;&lt; \"The average of the array is \"\n       &lt;&lt; ArrayAvg(arrayA)\n       &lt;&lt; endl &lt;&lt; endl;\n\n  // g. Find the minimum element of the array\n  cout &lt;&lt; \"The minimum element of the array is \"\n       &lt;&lt; ArrayMin(arrayA)\n       &lt;&lt; endl &lt;&lt; endl;\n\n  // h. Search for an element in an array\n  int num;\n  cout &lt;&lt; \"Enter an integer value to search for: \";\n  cin &gt;&gt; num;\n  cout &lt;&lt; (KeySearch(num, arrayA) ? \"True\" : \"False\")\n       &lt;&lt; endl &lt;&lt; endl;\n\n  return 0;\n}\n\n//Function definitions *************************************************\n\nint fileSize() {\n  int count = 0;\n  int temp = 0;\n  ifstream inputFile;\n  inputFile.open(\"data2.txt\");\n  while (inputFile &gt;&gt; temp)\n    count++;\n  inputFile.close();\n  return count;\n}\n\nvoid ReadArray(int arr[], int size) {\n  // initialize ifstream to read file\n  ifstream inputFile;\n  inputFile.open(\"data2.txt\");\n\n  if (inputFile.is_open()) { // Only do these if file is open\n    // Pull data off data2.txt and place in arr\n    for (int i = 0; i &lt; size; i++) {\n      inputFile &gt;&gt; arr[i];\n    }\n  }\n\n  // Close the file\n  inputFile.close();\n}\n\nvoid ReverseArray(int arrayA[], int arrayB[], int size) {\n  for(int i = 0; i &lt; size; i++) {\n    arrayB[i] = arrayA[9 - i];\n  }\n}\n\nvoid PrintArray(int arr[], int size) {\n  for (int i = 0; i &lt; size; i++) {\n    cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  }\n  cout &lt;&lt; endl &lt;&lt; endl;\n}\n\nint FindRange(int first, int second, int arr[10]) {\n  int count = 0;\n  for(int i = 0; i &lt; 10; i++) {\n    if(arr[i] &gt; first) {\n      if(arr[i] &lt; second) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nint FindDiv(int num, int arr[10]) {\n  int count = 0;\n  for (int i = 0; i &lt; 10; i++) {\n    if (arr[i] % num == 0) {\n      cout &lt;&lt; i+1 &lt;&lt; \", \";\n      count += 1;\n    }\n  }\n  return count;\n}\n\ndouble ArrayAvg(int arr[10]) {\n  int sum = 0;\n  for(int i = 0; i &lt; 10; i++) {\n    sum += arr[i];\n  }\n  return sum / 10.0;\n}\n\nint ArrayMin(int arr[10]) {\n  int min = arr[0];\n  for(int i = 1; i &lt; 10; i++) {\n    if(arr[i] &lt; min) {\n      min = arr[i];\n    }\n  }\n  return min;\n}\n\nbool KeySearch(int num, int arr[10]) {\n  for(int i = 0; i &lt; 10; i++) {\n    if(arr[i] == num) {\n      return true;\n    }\n  }\n  return false;\n}</pre><div class=\"listing-filename\">&#128196; Lab1_Program2.cpp</div><pre class=\"code\">#lang racket\n</pre></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs211-lab1-program2.html\">CS211-Lab1-Program2 in Racket</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab1-program2.html\"><time datetime=\"2017-01-27\">Friday, January 27th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab1-program2.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab1-program2.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Program 2</h2><p>Write a program that reads test scores of students in a programming class from an input file, data.txt, and calculates the minimum, maximum, average test score for each student as well as the overall average score for the class. Each row of the file contains student name (no spaces), and 3 scores for test 1, test 2, and test 3, respectively.</p><p>Your main program should:<br/>- open the file and check for successful open,<br/>- then start reading one line at a time until EOF. For each line read, pass the grades for the three tests to a function called ProcessARow that calculates the minimum, maximum and average of the three grades. The results (minimum, maximum, and average) should be returned to the main program and the main program prints them on the screen in a table format.<br/>NOTE: minimum, maximum, average need to be sent by reference<br/>- Call the function, ProcessOverall, that calculates the overall average of all grades.<br/>NOTE: parameters must be sent by value</p><div class=\"listing-filename\">&#128196; data.txt</div><pre class=\"code\">Bob     78   92   88\nSue     89   94   78\nFred   100   80   92\nGeorge  90   90   85\nMary    95   70   99\nJane   100   92   87</pre><div class=\"listing-filename\">&#128196; output</div><pre class=\"code\">Name           Average Score\n------------------------------\nBob                86.00\nSue                87.00\nFred               90.66\nGeorge             90.00\nMary               88.33\nJane               93.00\n------------------------------\nOverall Average:   89.16</pre><div class=\"listing-filename\">&#128196; Lab1_Program1.cpp</div><pre class=\"code\">#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;string&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nvoid ProcessARow(int, int, int, double&amp;, int&amp;, int&amp;);\ndouble ProcessOverall(double);\n\nint main () {\n  // initialize file\n  ifstream inputFile;\n  inputFile.open(\"data.txt\");\n\n  // init variables\n  int first, second, third, minimum, maximum;\n  double average,\n         total = 0;\n  string name;\n\n  if (inputFile.is_open()) {\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Name                Avg    Min    Max\" &lt;&lt; endl;\n    cout &lt;&lt; \"-------------------------------------\" &lt;&lt; endl;\n\n    while (inputFile.good()) {\n      // Pull info off file\n      inputFile &gt;&gt; name &gt;&gt; first &gt;&gt; second &gt;&gt; third;\n\n      // Send values to ProcessARow\n      ProcessARow(first, second, third, average, minimum, maximum);\n\n      // Add average to total\n      total += average;\n\n      // Output average for student\n      cout &lt;&lt; setw(18) &lt;&lt; left &lt;&lt; name\n           &lt;&lt; setprecision(2) &lt;&lt; fixed &lt;&lt; showpoint &lt;&lt; right\n           &lt;&lt; average &lt;&lt; \"     \"\n           &lt;&lt; minimum &lt;&lt; \"    \"\n           &lt;&lt; setw(3) &lt;&lt; right &lt;&lt; maximum &lt;&lt; endl;\n\n    }\n\n    // Close the file\n    inputFile.close();\n\n    cout &lt;&lt; \"-------------------------------------\" &lt;&lt; endl;\n    cout &lt;&lt; \"Overall Average:  \" &lt;&lt; ProcessOverall(total) &lt;&lt; endl &lt;&lt; endl;\n\n  }\n  else {\n    cout &lt;&lt; \"Unable to open file\";\n  }\n\n  return 0;\n}\n\nvoid ProcessARow(int first, int second, int third, double&amp; avg, int&amp; minimum, int&amp; maximum) {\n  int sum;\n  sum = first + second + third;\n  avg = sum / 3.0;\n  maximum = max(max(first, second), third);\n  minimum = min(min(first, second), third);\n}\n\ndouble ProcessOverall(double avgs) {\n  return avgs / 6.0;\n}</pre><div class=\"listing-filename\">&#128196; Lab1_Program2.cpp</div><pre class=\"code\">#lang racket\n</pre></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/cs211-lab1-program1.html\">CS211-Lab1-Program1 in Racket</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/cs211-lab1-program1.html\"><time datetime=\"2017-01-25\">Wednesday, January 25th, 2017</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/cs211-lab1-program1.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/cs211-lab1-program1.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<p>Iâm currently taking <a href=\"https://www.csusm.edu/assessment/portfolios/cs/bs/2012_14/cs_course_info.pdf\">CS211</a> at <a href=\"https://www.csusm.edu/\">CSUSM</a> and I thought it would be interesting to try re-writing the labs in <a href=\"https://racket-lang.org\">Racket</a> after I submit the work in class. I figure that trying to solve the same problem with two different languages might help me to better understand the material and give me another excuse to keep messing around with Racket.</p><h2>Program 1</h2><p>Your favorite shoe store is having a saleâall pairs of shoes are 35% off! Write a program that reads shoe prices in stock at the local store from an input file, shoe.txt. Each row in the file contains a shoe serial number and price. Calculate the sale price of every pair of shoes, and what the final cost of the shoes is when the sales tax is applied to the discounted price. The calculated data must be saved in an output file, shoeSale.txt.</p><p>You MUST use a named constant for both the tax rate (8.5%) and discount rate (35%). Since the results displayed are monetary values, your output must be displayed with two decimal places of precision. Be sure decimals âline upâ when you output the information.</p><div class=\"listing-filename\">&#128196; shoe.txt</div><pre class=\"code\">234019 75.00\n234490 124.99\n347269 50.00\n239801 149.99\n487241 99.99\n982111 175.00</pre><div class=\"listing-filename\">&#128196; shoeSale.txt</div><pre class=\"code\">234019 52.89\n234490 88.15\n347269 35.26\n239801 105.78\n487241 70.51\n982111 123.41</pre><div class=\"listing-filename\">&#128196; Lab1_Program1.cpp</div><pre class=\"code\">#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\n\n// init constants\nconst double TAX_RATE = 0.085;\nconst double DISCOUNT_RATE = 0.35;\n\nint main () {\n  // initialize files\n  ifstream inputFile;\n  inputFile.open(\"shoe.txt\");\n\n  ofstream outputFile;\n  outputFile.open(\"shoeSales.txt\");\n\n  // init variables\n  int serialNumber;\n  double price,\n         discount,\n         discountedPrice,\n         saleTax,\n         final;\n\n  if (inputFile.is_open()) {\n    while (inputFile.good()) {\n      // Pull info off file\n      inputFile &gt;&gt; serialNumber &gt;&gt; price;\n\n      // Convert price to final price\n      discount = price * DISCOUNT_RATE;\n      discountedPrice = price - discount;\n      saleTax = discountedPrice * TAX_RATE;\n      final = discountedPrice + saleTax;\n\n      // Output final serialNumber and price to file\n      outputFile &lt;&lt; serialNumber\n                 &lt;&lt; setw(8) &lt;&lt; setprecision(2)\n                 &lt;&lt; fixed &lt;&lt; showpoint &lt;&lt; right\n                 &lt;&lt; final &lt;&lt; endl;\n    }\n\n    // Close the file\n    outputFile.close();\n  }\n  else {\n    cout &lt;&lt; \"Unable to open file\";\n  }\n\n  return 0;\n}</pre><div class=\"listing-filename\">&#128196; Lab1_Program2.cpp</div><pre class=\"code\">#lang racket\n\n(define TAX_RATE 0.085)\n(define DISCOUNT_RATE 0.35)\n\n(define inputFile (open-input-file \"shoe.txt\"))\n(define outputFile\n  (open-output-file \"shoeSales.txt\"\n                    #:exists 'replace))</pre></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/project-euler-with-haskell-13-14.html\">Project Euler problem 13 and 14, with Haskell</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/project-euler-with-haskell-13-14.html\"><time datetime=\"2015-11-14\">Saturday, November 14th, 2015</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/project-euler-with-haskell-13-14.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/project-euler-with-haskell-13-14.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Problem 13</h2><p>Another really straight forward problem using infinite lists.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler13.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem13 - Large sum\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem13</span>\n\n<span class=\"nf\">problem13</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"n\">nums</span>\n\n<span class=\"nf\">nums</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">37107287533902102798797998220837590246510135740250</span><span class=\"p\">,</span>\n        <span class=\"mi\">46376937677490009712648124896970078050417018260538</span><span class=\"p\">,</span>\n        <span class=\"mi\">74324986199524741059474233309513058123726617309629</span><span class=\"p\">,</span>\n        <span class=\"mi\">91942213363574161572522430563301811072406154908250</span><span class=\"p\">,</span>\n        <span class=\"mi\">23067588207539346171171980310421047513778063246676</span><span class=\"p\">,</span>\n        <span class=\"mi\">89261670696623633820136378418383684178734361726757</span><span class=\"p\">,</span>\n        <span class=\"mi\">28112879812849979408065481931592621691275889832738</span><span class=\"p\">,</span>\n        <span class=\"mi\">44274228917432520321923589422876796487670272189318</span><span class=\"p\">,</span>\n        <span class=\"mi\">47451445736001306439091167216856844588711603153276</span><span class=\"p\">,</span>\n        <span class=\"mi\">70386486105843025439939619828917593665686757934951</span><span class=\"p\">,</span>\n        <span class=\"mi\">62176457141856560629502157223196586755079324193331</span><span class=\"p\">,</span>\n        <span class=\"mi\">64906352462741904929101432445813822663347944758178</span><span class=\"p\">,</span>\n        <span class=\"mi\">92575867718337217661963751590579239728245598838407</span><span class=\"p\">,</span>\n        <span class=\"mi\">58203565325359399008402633568948830189458628227828</span><span class=\"p\">,</span>\n        <span class=\"mi\">80181199384826282014278194139940567587151170094390</span><span class=\"p\">,</span>\n        <span class=\"mi\">35398664372827112653829987240784473053190104293586</span><span class=\"p\">,</span>\n        <span class=\"mi\">86515506006295864861532075273371959191420517255829</span><span class=\"p\">,</span>\n        <span class=\"mi\">71693888707715466499115593487603532921714970056938</span><span class=\"p\">,</span>\n        <span class=\"mi\">54370070576826684624621495650076471787294438377604</span><span class=\"p\">,</span>\n        <span class=\"mi\">53282654108756828443191190634694037855217779295145</span><span class=\"p\">,</span>\n        <span class=\"mi\">36123272525000296071075082563815656710885258350721</span><span class=\"p\">,</span>\n        <span class=\"mi\">45876576172410976447339110607218265236877223636045</span><span class=\"p\">,</span>\n        <span class=\"mi\">17423706905851860660448207621209813287860733969412</span><span class=\"p\">,</span>\n        <span class=\"mi\">81142660418086830619328460811191061556940512689692</span><span class=\"p\">,</span>\n        <span class=\"mi\">51934325451728388641918047049293215058642563049483</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467221648435076201727918039944693004732956340691</span><span class=\"p\">,</span>\n        <span class=\"mi\">15732444386908125794514089057706229429197107928209</span><span class=\"p\">,</span>\n        <span class=\"mi\">55037687525678773091862540744969844508330393682126</span><span class=\"p\">,</span>\n        <span class=\"mi\">18336384825330154686196124348767681297534375946515</span><span class=\"p\">,</span>\n        <span class=\"mi\">80386287592878490201521685554828717201219257766954</span><span class=\"p\">,</span>\n        <span class=\"mi\">78182833757993103614740356856449095527097864797581</span><span class=\"p\">,</span>\n        <span class=\"mi\">16726320100436897842553539920931837441497806860984</span><span class=\"p\">,</span>\n        <span class=\"mi\">48403098129077791799088218795327364475675590848030</span><span class=\"p\">,</span>\n        <span class=\"mi\">87086987551392711854517078544161852424320693150332</span><span class=\"p\">,</span>\n        <span class=\"mi\">59959406895756536782107074926966537676326235447210</span><span class=\"p\">,</span>\n        <span class=\"mi\">69793950679652694742597709739166693763042633987085</span><span class=\"p\">,</span>\n        <span class=\"mi\">41052684708299085211399427365734116182760315001271</span><span class=\"p\">,</span>\n        <span class=\"mi\">65378607361501080857009149939512557028198746004375</span><span class=\"p\">,</span>\n        <span class=\"mi\">35829035317434717326932123578154982629742552737307</span><span class=\"p\">,</span>\n        <span class=\"mi\">94953759765105305946966067683156574377167401875275</span><span class=\"p\">,</span>\n        <span class=\"mi\">88902802571733229619176668713819931811048770190271</span><span class=\"p\">,</span>\n        <span class=\"mi\">25267680276078003013678680992525463401061632866526</span><span class=\"p\">,</span>\n        <span class=\"mi\">36270218540497705585629946580636237993140746255962</span><span class=\"p\">,</span>\n        <span class=\"mi\">24074486908231174977792365466257246923322810917141</span><span class=\"p\">,</span>\n        <span class=\"mi\">91430288197103288597806669760892938638285025333403</span><span class=\"p\">,</span>\n        <span class=\"mi\">34413065578016127815921815005561868836468420090470</span><span class=\"p\">,</span>\n        <span class=\"mi\">23053081172816430487623791969842487255036638784583</span><span class=\"p\">,</span>\n        <span class=\"mi\">11487696932154902810424020138335124462181441773470</span><span class=\"p\">,</span>\n        <span class=\"mi\">63783299490636259666498587618221225225512486764533</span><span class=\"p\">,</span>\n        <span class=\"mi\">67720186971698544312419572409913959008952310058822</span><span class=\"p\">,</span>\n        <span class=\"mi\">95548255300263520781532296796249481641953868218774</span><span class=\"p\">,</span>\n        <span class=\"mi\">76085327132285723110424803456124867697064507995236</span><span class=\"p\">,</span>\n        <span class=\"mi\">37774242535411291684276865538926205024910326572967</span><span class=\"p\">,</span>\n        <span class=\"mi\">23701913275725675285653248258265463092207058596522</span><span class=\"p\">,</span>\n        <span class=\"mi\">29798860272258331913126375147341994889534765745501</span><span class=\"p\">,</span>\n        <span class=\"mi\">18495701454879288984856827726077713721403798879715</span><span class=\"p\">,</span>\n        <span class=\"mi\">38298203783031473527721580348144513491373226651381</span><span class=\"p\">,</span>\n        <span class=\"mi\">34829543829199918180278916522431027392251122869539</span><span class=\"p\">,</span>\n        <span class=\"mi\">40957953066405232632538044100059654939159879593635</span><span class=\"p\">,</span>\n        <span class=\"mi\">29746152185502371307642255121183693803580388584903</span><span class=\"p\">,</span>\n        <span class=\"mi\">41698116222072977186158236678424689157993532961922</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467957194401269043877107275048102390895523597457</span><span class=\"p\">,</span>\n        <span class=\"mi\">23189706772547915061505504953922979530901129967519</span><span class=\"p\">,</span>\n        <span class=\"mi\">86188088225875314529584099251203829009407770775672</span><span class=\"p\">,</span>\n        <span class=\"mi\">11306739708304724483816533873502340845647058077308</span><span class=\"p\">,</span>\n        <span class=\"mi\">82959174767140363198008187129011875491310547126581</span><span class=\"p\">,</span>\n        <span class=\"mi\">97623331044818386269515456334926366572897563400500</span><span class=\"p\">,</span>\n        <span class=\"mi\">42846280183517070527831839425882145521227251250327</span><span class=\"p\">,</span>\n        <span class=\"mi\">55121603546981200581762165212827652751691296897789</span><span class=\"p\">,</span>\n        <span class=\"mi\">32238195734329339946437501907836945765883352399886</span><span class=\"p\">,</span>\n        <span class=\"mi\">75506164965184775180738168837861091527357929701337</span><span class=\"p\">,</span>\n        <span class=\"mi\">62177842752192623401942399639168044983993173312731</span><span class=\"p\">,</span>\n        <span class=\"mi\">32924185707147349566916674687634660915035914677504</span><span class=\"p\">,</span>\n        <span class=\"mi\">99518671430235219628894890102423325116913619626622</span><span class=\"p\">,</span>\n        <span class=\"mi\">73267460800591547471830798392868535206946944540724</span><span class=\"p\">,</span>\n        <span class=\"mi\">76841822524674417161514036427982273348055556214818</span><span class=\"p\">,</span>\n        <span class=\"mi\">97142617910342598647204516893989422179826088076852</span><span class=\"p\">,</span>\n        <span class=\"mi\">87783646182799346313767754307809363333018982642090</span><span class=\"p\">,</span>\n        <span class=\"mi\">10848802521674670883215120185883543223812876952786</span><span class=\"p\">,</span>\n        <span class=\"mi\">71329612474782464538636993009049310363619763878039</span><span class=\"p\">,</span>\n        <span class=\"mi\">62184073572399794223406235393808339651327408011116</span><span class=\"p\">,</span>\n        <span class=\"mi\">66627891981488087797941876876144230030984490851411</span><span class=\"p\">,</span>\n        <span class=\"mi\">60661826293682836764744779239180335110989069790714</span><span class=\"p\">,</span>\n        <span class=\"mi\">85786944089552990653640447425576083659976645795096</span><span class=\"p\">,</span>\n        <span class=\"mi\">66024396409905389607120198219976047599490197230297</span><span class=\"p\">,</span>\n        <span class=\"mi\">64913982680032973156037120041377903785566085089252</span><span class=\"p\">,</span>\n        <span class=\"mi\">16730939319872750275468906903707539413042652315011</span><span class=\"p\">,</span>\n        <span class=\"mi\">94809377245048795150954100921645863754710598436791</span><span class=\"p\">,</span>\n        <span class=\"mi\">78639167021187492431995700641917969777599028300699</span><span class=\"p\">,</span>\n        <span class=\"mi\">15368713711936614952811305876380278410754449733078</span><span class=\"p\">,</span>\n        <span class=\"mi\">40789923115535562561142322423255033685442488917353</span><span class=\"p\">,</span>\n        <span class=\"mi\">44889911501440648020369068063960672322193204149535</span><span class=\"p\">,</span>\n        <span class=\"mi\">41503128880339536053299340368006977710650566631954</span><span class=\"p\">,</span>\n        <span class=\"mi\">81234880673210146739058568557934581403627822703280</span><span class=\"p\">,</span>\n        <span class=\"mi\">82616570773948327592232845941706525094512325230608</span><span class=\"p\">,</span>\n        <span class=\"mi\">22918802058777319719839450180888072429661980811197</span><span class=\"p\">,</span>\n        <span class=\"mi\">77158542502016545090413245809786882778948721859617</span><span class=\"p\">,</span>\n        <span class=\"mi\">72107838435069186155435662884062257473692284509516</span><span class=\"p\">,</span>\n        <span class=\"mi\">20849603980134001723930671666823555245252804609722</span><span class=\"p\">,</span>\n        <span class=\"mi\">53503534226472524250874054075591789781264330331690</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Problem 14</h2><p>This one actually runs much quicker than I expected it to.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler14.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem14 - Longest Collatz sequence\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem14</span>\n\n<span class=\"nf\">problem14</span> <span class=\"ow\">=</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"p\">((</span><span class=\"n\">snd</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">snd</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"kr\">then</span> <span class=\"n\">x</span> <span class=\"kr\">else</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">collatzLengths</span>\n\n<span class=\"nf\">collatzLengths</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">length</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"n\">collatzChainList</span>\n\n<span class=\"nf\">collatzChainList</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"n\">collatzChain</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">1000000</span><span class=\"p\">]</span>\n\n<span class=\"nf\">collatzChain</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">collatzChain</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nf\">collatzChain</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">collatzIter</span> <span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n\n<span class=\"nf\">collatzIter</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">collatzIter</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span>\n    <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">collatzIter</span> <span class=\"p\">((</span><span class=\"n\">quot</span> <span class=\"n\">x</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">collatzIter</span> <span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/project-euler-with-haskell-11-12.html\">Project Euler problem 9 and 10, with Haskell</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/project-euler-with-haskell-11-12.html\"><time datetime=\"2015-11-07\">Saturday, November 7th, 2015</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/project-euler-with-haskell-11-12.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/project-euler-with-haskell-11-12.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Problem 11</h2><p>Not the cleanest implementation of this program however, it does work.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler11.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem11 - Largest product in a grid\"</span>\n    <span class=\"n\">print</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">problem11</span><span class=\"p\">)</span>\n\n<span class=\"nf\">problem11</span> <span class=\"ow\">=</span> <span class=\"p\">[(</span><span class=\"n\">maximum</span> <span class=\"n\">horizProd</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">vertiProd</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">diagFProd</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">diagBProd</span><span class=\"p\">)]</span>\n\n\n<span class=\"nf\">horizProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">product</span> <span class=\"p\">(</span><span class=\"n\">take</span> <span class=\"mi\">4</span> <span class=\"p\">(</span><span class=\"n\">drop</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"p\">)))</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">19</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">]]</span>\n<span class=\"nf\">vertiProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">19</span><span class=\"p\">]]</span>\n<span class=\"nf\">diagFProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">]]</span>\n<span class=\"nf\">diagBProd</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"n\">x</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">grid</span><span class=\"o\">!!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">!!</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">]]</span>\n<span class=\"nf\">grid</span> <span class=\"ow\">=</span> <span class=\"p\">[[</span><span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">09</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">09</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">]]</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Problem 12</h2><p>Another really straight forward problem using infinite lists.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler12.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem12 - Highly divisible triangular number\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem13</span>\n\n\n<span class=\"nf\">problem13</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"n\">nums</span>\n\n<span class=\"nf\">nums</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">37107287533902102798797998220837590246510135740250</span><span class=\"p\">,</span>\n        <span class=\"mi\">46376937677490009712648124896970078050417018260538</span><span class=\"p\">,</span>\n        <span class=\"mi\">74324986199524741059474233309513058123726617309629</span><span class=\"p\">,</span>\n        <span class=\"mi\">91942213363574161572522430563301811072406154908250</span><span class=\"p\">,</span>\n        <span class=\"mi\">23067588207539346171171980310421047513778063246676</span><span class=\"p\">,</span>\n        <span class=\"mi\">89261670696623633820136378418383684178734361726757</span><span class=\"p\">,</span>\n        <span class=\"mi\">28112879812849979408065481931592621691275889832738</span><span class=\"p\">,</span>\n        <span class=\"mi\">44274228917432520321923589422876796487670272189318</span><span class=\"p\">,</span>\n        <span class=\"mi\">47451445736001306439091167216856844588711603153276</span><span class=\"p\">,</span>\n        <span class=\"mi\">70386486105843025439939619828917593665686757934951</span><span class=\"p\">,</span>\n        <span class=\"mi\">62176457141856560629502157223196586755079324193331</span><span class=\"p\">,</span>\n        <span class=\"mi\">64906352462741904929101432445813822663347944758178</span><span class=\"p\">,</span>\n        <span class=\"mi\">92575867718337217661963751590579239728245598838407</span><span class=\"p\">,</span>\n        <span class=\"mi\">58203565325359399008402633568948830189458628227828</span><span class=\"p\">,</span>\n        <span class=\"mi\">80181199384826282014278194139940567587151170094390</span><span class=\"p\">,</span>\n        <span class=\"mi\">35398664372827112653829987240784473053190104293586</span><span class=\"p\">,</span>\n        <span class=\"mi\">86515506006295864861532075273371959191420517255829</span><span class=\"p\">,</span>\n        <span class=\"mi\">71693888707715466499115593487603532921714970056938</span><span class=\"p\">,</span>\n        <span class=\"mi\">54370070576826684624621495650076471787294438377604</span><span class=\"p\">,</span>\n        <span class=\"mi\">53282654108756828443191190634694037855217779295145</span><span class=\"p\">,</span>\n        <span class=\"mi\">36123272525000296071075082563815656710885258350721</span><span class=\"p\">,</span>\n        <span class=\"mi\">45876576172410976447339110607218265236877223636045</span><span class=\"p\">,</span>\n        <span class=\"mi\">17423706905851860660448207621209813287860733969412</span><span class=\"p\">,</span>\n        <span class=\"mi\">81142660418086830619328460811191061556940512689692</span><span class=\"p\">,</span>\n        <span class=\"mi\">51934325451728388641918047049293215058642563049483</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467221648435076201727918039944693004732956340691</span><span class=\"p\">,</span>\n        <span class=\"mi\">15732444386908125794514089057706229429197107928209</span><span class=\"p\">,</span>\n        <span class=\"mi\">55037687525678773091862540744969844508330393682126</span><span class=\"p\">,</span>\n        <span class=\"mi\">18336384825330154686196124348767681297534375946515</span><span class=\"p\">,</span>\n        <span class=\"mi\">80386287592878490201521685554828717201219257766954</span><span class=\"p\">,</span>\n        <span class=\"mi\">78182833757993103614740356856449095527097864797581</span><span class=\"p\">,</span>\n        <span class=\"mi\">16726320100436897842553539920931837441497806860984</span><span class=\"p\">,</span>\n        <span class=\"mi\">48403098129077791799088218795327364475675590848030</span><span class=\"p\">,</span>\n        <span class=\"mi\">87086987551392711854517078544161852424320693150332</span><span class=\"p\">,</span>\n        <span class=\"mi\">59959406895756536782107074926966537676326235447210</span><span class=\"p\">,</span>\n        <span class=\"mi\">69793950679652694742597709739166693763042633987085</span><span class=\"p\">,</span>\n        <span class=\"mi\">41052684708299085211399427365734116182760315001271</span><span class=\"p\">,</span>\n        <span class=\"mi\">65378607361501080857009149939512557028198746004375</span><span class=\"p\">,</span>\n        <span class=\"mi\">35829035317434717326932123578154982629742552737307</span><span class=\"p\">,</span>\n        <span class=\"mi\">94953759765105305946966067683156574377167401875275</span><span class=\"p\">,</span>\n        <span class=\"mi\">88902802571733229619176668713819931811048770190271</span><span class=\"p\">,</span>\n        <span class=\"mi\">25267680276078003013678680992525463401061632866526</span><span class=\"p\">,</span>\n        <span class=\"mi\">36270218540497705585629946580636237993140746255962</span><span class=\"p\">,</span>\n        <span class=\"mi\">24074486908231174977792365466257246923322810917141</span><span class=\"p\">,</span>\n        <span class=\"mi\">91430288197103288597806669760892938638285025333403</span><span class=\"p\">,</span>\n        <span class=\"mi\">34413065578016127815921815005561868836468420090470</span><span class=\"p\">,</span>\n        <span class=\"mi\">23053081172816430487623791969842487255036638784583</span><span class=\"p\">,</span>\n        <span class=\"mi\">11487696932154902810424020138335124462181441773470</span><span class=\"p\">,</span>\n        <span class=\"mi\">63783299490636259666498587618221225225512486764533</span><span class=\"p\">,</span>\n        <span class=\"mi\">67720186971698544312419572409913959008952310058822</span><span class=\"p\">,</span>\n        <span class=\"mi\">95548255300263520781532296796249481641953868218774</span><span class=\"p\">,</span>\n        <span class=\"mi\">76085327132285723110424803456124867697064507995236</span><span class=\"p\">,</span>\n        <span class=\"mi\">37774242535411291684276865538926205024910326572967</span><span class=\"p\">,</span>\n        <span class=\"mi\">23701913275725675285653248258265463092207058596522</span><span class=\"p\">,</span>\n        <span class=\"mi\">29798860272258331913126375147341994889534765745501</span><span class=\"p\">,</span>\n        <span class=\"mi\">18495701454879288984856827726077713721403798879715</span><span class=\"p\">,</span>\n        <span class=\"mi\">38298203783031473527721580348144513491373226651381</span><span class=\"p\">,</span>\n        <span class=\"mi\">34829543829199918180278916522431027392251122869539</span><span class=\"p\">,</span>\n        <span class=\"mi\">40957953066405232632538044100059654939159879593635</span><span class=\"p\">,</span>\n        <span class=\"mi\">29746152185502371307642255121183693803580388584903</span><span class=\"p\">,</span>\n        <span class=\"mi\">41698116222072977186158236678424689157993532961922</span><span class=\"p\">,</span>\n        <span class=\"mi\">62467957194401269043877107275048102390895523597457</span><span class=\"p\">,</span>\n        <span class=\"mi\">23189706772547915061505504953922979530901129967519</span><span class=\"p\">,</span>\n        <span class=\"mi\">86188088225875314529584099251203829009407770775672</span><span class=\"p\">,</span>\n        <span class=\"mi\">11306739708304724483816533873502340845647058077308</span><span class=\"p\">,</span>\n        <span class=\"mi\">82959174767140363198008187129011875491310547126581</span><span class=\"p\">,</span>\n        <span class=\"mi\">97623331044818386269515456334926366572897563400500</span><span class=\"p\">,</span>\n        <span class=\"mi\">42846280183517070527831839425882145521227251250327</span><span class=\"p\">,</span>\n        <span class=\"mi\">55121603546981200581762165212827652751691296897789</span><span class=\"p\">,</span>\n        <span class=\"mi\">32238195734329339946437501907836945765883352399886</span><span class=\"p\">,</span>\n        <span class=\"mi\">75506164965184775180738168837861091527357929701337</span><span class=\"p\">,</span>\n        <span class=\"mi\">62177842752192623401942399639168044983993173312731</span><span class=\"p\">,</span>\n        <span class=\"mi\">32924185707147349566916674687634660915035914677504</span><span class=\"p\">,</span>\n        <span class=\"mi\">99518671430235219628894890102423325116913619626622</span><span class=\"p\">,</span>\n        <span class=\"mi\">73267460800591547471830798392868535206946944540724</span><span class=\"p\">,</span>\n        <span class=\"mi\">76841822524674417161514036427982273348055556214818</span><span class=\"p\">,</span>\n        <span class=\"mi\">97142617910342598647204516893989422179826088076852</span><span class=\"p\">,</span>\n        <span class=\"mi\">87783646182799346313767754307809363333018982642090</span><span class=\"p\">,</span>\n        <span class=\"mi\">10848802521674670883215120185883543223812876952786</span><span class=\"p\">,</span>\n        <span class=\"mi\">71329612474782464538636993009049310363619763878039</span><span class=\"p\">,</span>\n        <span class=\"mi\">62184073572399794223406235393808339651327408011116</span><span class=\"p\">,</span>\n        <span class=\"mi\">66627891981488087797941876876144230030984490851411</span><span class=\"p\">,</span>\n        <span class=\"mi\">60661826293682836764744779239180335110989069790714</span><span class=\"p\">,</span>\n        <span class=\"mi\">85786944089552990653640447425576083659976645795096</span><span class=\"p\">,</span>\n        <span class=\"mi\">66024396409905389607120198219976047599490197230297</span><span class=\"p\">,</span>\n        <span class=\"mi\">64913982680032973156037120041377903785566085089252</span><span class=\"p\">,</span>\n        <span class=\"mi\">16730939319872750275468906903707539413042652315011</span><span class=\"p\">,</span>\n        <span class=\"mi\">94809377245048795150954100921645863754710598436791</span><span class=\"p\">,</span>\n        <span class=\"mi\">78639167021187492431995700641917969777599028300699</span><span class=\"p\">,</span>\n        <span class=\"mi\">15368713711936614952811305876380278410754449733078</span><span class=\"p\">,</span>\n        <span class=\"mi\">40789923115535562561142322423255033685442488917353</span><span class=\"p\">,</span>\n        <span class=\"mi\">44889911501440648020369068063960672322193204149535</span><span class=\"p\">,</span>\n        <span class=\"mi\">41503128880339536053299340368006977710650566631954</span><span class=\"p\">,</span>\n        <span class=\"mi\">81234880673210146739058568557934581403627822703280</span><span class=\"p\">,</span>\n        <span class=\"mi\">82616570773948327592232845941706525094512325230608</span><span class=\"p\">,</span>\n        <span class=\"mi\">22918802058777319719839450180888072429661980811197</span><span class=\"p\">,</span>\n        <span class=\"mi\">77158542502016545090413245809786882778948721859617</span><span class=\"p\">,</span>\n        <span class=\"mi\">72107838435069186155435662884062257473692284509516</span><span class=\"p\">,</span>\n        <span class=\"mi\">20849603980134001723930671666823555245252804609722</span><span class=\"p\">,</span>\n        <span class=\"mi\">53503534226472524250874054075591789781264330331690</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/project-euler-with-haskell-9-10.html\">Project Euler problem 9 and 10, with Haskell</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/project-euler-with-haskell-9-10.html\"><time datetime=\"2015-10-31\">Saturday, October 31st, 2015</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/project-euler-with-haskell-9-10.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/project-euler-with-haskell-9-10.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Problem 9</h2><p>I went through a number of different versions of this program before I was happy with the answer.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler9.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem9 - Special Pythogorean triplet\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem9</span>\n\n<span class=\"nf\">problem9</span> <span class=\"ow\">=</span> <span class=\"n\">head</span> <span class=\"n\">triplet</span>\n\n<span class=\"nf\">triplet</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"p\">],</span> <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">)],</span> <span class=\"n\">a</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Problem 10</h2><p>Another really straight forward problem using infinite lists.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler10.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem9 - Summation of primes\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem10</span>\n\n<span class=\"nf\">problem10</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"p\">(</span><span class=\"n\">takeWhile</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"mi\">2000000</span><span class=\"p\">)</span> <span class=\"n\">primes</span><span class=\"p\">)</span>\n\n<span class=\"nf\">primes</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"kt\">:</span> <span class=\"n\">primes&#39;</span>\n    <span class=\"kr\">where</span> <span class=\"n\">isPrime</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"kt\">:</span><span class=\"n\">ps</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">rem</span><span class=\"p\">`</span> <span class=\"n\">p</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isPrime</span> <span class=\"n\">ps</span> <span class=\"n\">n</span>\n          <span class=\"n\">primes&#39;</span> <span class=\"ow\">=</span> <span class=\"mi\">3</span> <span class=\"kt\">:</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isPrime</span> <span class=\"n\">primes&#39;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"o\">..</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table></div></div></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/project-euler-with-haskell-8.html\">Project Euler problem 8 with Haskell</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/project-euler-with-haskell-8.html\"><time datetime=\"2015-10-24\">Saturday, October 24th, 2015</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/project-euler-with-haskell-8.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/project-euler-with-haskell-8.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Problem 8</h2><p>This problem actually wasnât as bad as I originally thought it would be.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler8.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"Problem8 - Largest product in a series\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem8</span>\n\n<span class=\"c1\">--Largest product in a series</span>\n<span class=\"nf\">problem8</span> <span class=\"ow\">=</span> <span class=\"n\">maximum</span> <span class=\"n\">listOfProducts</span>\n\n<span class=\"nf\">stringToList</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n<span class=\"nf\">stringToList</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Char</span><span class=\"p\">])</span> <span class=\"n\">n</span>\n\n<span class=\"nf\">listOfProducts</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"n\">product</span> <span class=\"n\">groupedInts</span>\n\n<span class=\"nf\">groupedInts</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">take</span> <span class=\"mi\">13</span> <span class=\"p\">(</span><span class=\"n\">drop</span> <span class=\"n\">x</span> <span class=\"n\">listOfInts</span><span class=\"p\">)))</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"p\">)]</span>\n\n<span class=\"nf\">listOfInts</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">read</span><span class=\"ow\">::</span><span class=\"kt\">String</span><span class=\"ow\">-&gt;</span><span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"n\">listOfStrings</span>\n\n<span class=\"nf\">listOfStrings</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">stringToList</span> <span class=\"n\">largeString</span><span class=\"p\">)</span>\n\n<span class=\"nf\">largeString</span> <span class=\"ow\">=</span> <span class=\"s\">\"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>Iâm sure that there are better ways to go about solving this problem. I know that the <code>String</code> data type is stored as a list of <code>Char</code> type, so I should have been able to convert immediately from <code>String</code> to <code>[Int]</code> with a <code>map</code> function. Unfortunately I wasnât able to get this conversion to work so I had to take extra steps to convert the <code>String</code> to <code>[String]</code>.</p><p>Once I had a list of <code>Int</code> it was rather straight forward to create groups of 13 integers and map <code>product</code> over them.</p></article>\n\n<hr/>\n\n<article><header>\n<h1><a href=\"posts/project-euler-with-haskell-5-6-7.html\">Project Euler problem 5, 6 and 7, with Haskell</a></h1>\n<p>Scribbled <a class=\"permlink\" href=\"posts/project-euler-with-haskell-5-6-7.html\"><time datetime=\"2015-10-17\">Saturday, October 17th, 2015</time></a>&nbsp;&middot;&nbsp;<a class=\"pdf\" href=\"posts/project-euler-with-haskell-5-6-7.pdf\">PDF</a>&nbsp;&middot;&nbsp;<a class=\"source-link\" href=\"posts/project-euler-with-haskell-5-6-7.pollen.html\">&loz;&nbsp;Pollen&nbsp;source</a></p></header>\n\n<h2>Problem 5</h2><p>I have solved similar questions during math test so I went with a purely brute force solution to this problem as I wanted to test how long it would take to complete.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler5.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem5 - Smallest multiple of the numbers 1-20\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem5</span>\n\n<span class=\"c1\">--Smallest multiple of the numbers 1-20</span>\n<span class=\"nf\">problem5</span> <span class=\"ow\">=</span> <span class=\"n\">head</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">],</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">7</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">9</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">11</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">13</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">16</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">17</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">mod</span> <span class=\"n\">x</span> <span class=\"mi\">19</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p>I was a little suprised that the program didnât crash considering how large a number it had to count up to. Iâm not sure if this says more about the Haskell langauge or modern computers. I do know that Haskell supports Integers that can be as large as the memory space of the computer allows, so I feel like this might be a win for Haskell.</p><p>Solving this without programming is mostly an exercise in taking the prime factorization of the numbers from 1 to 20 and <a href=\"http://www.wolframalpha.com/input/?i=232792560\">combining them</a>.</p><h2>Problem 6</h2><p>Rather straight foward solution to this problem. I am still suprised by how clean the code looks in haskell compared to <code>c++</code>. There is much less <a href=\"https://en.wikipedia.org/wiki/Boilerplate_code\">boilerplate</a> code required to get a solution printed on screen.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler6.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem6 - Sum sqaure difference for the first 100 natural numbers\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem6</span>\n\n<span class=\"c1\">--Sum square difference</span>\n<span class=\"nf\">problem6</span> <span class=\"ow\">=</span> <span class=\"n\">sqSum</span> <span class=\"o\">-</span> <span class=\"n\">sumSq</span>\n\n<span class=\"nf\">sq</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n\n<span class=\"nf\">sqSum</span> <span class=\"ow\">=</span> <span class=\"n\">sq</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n<span class=\"nf\">sumSq</span> <span class=\"ow\">=</span> <span class=\"n\">sum</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">sq</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table></div></div><h2>Problem 7</h2><p>Another really clean solution using infinite lists.</p><div class=\"filebox\"><div class=\"filename\" decode=\"exclude\">ProjectEuler7.hs</div><div class=\"highlight\"><table class=\"sourcetable\"><tbody><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"source\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"ProjectEuler.net\"</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Problem7 - 10,001th Prime\"</span>\n    <span class=\"n\">print</span> <span class=\"n\">problem7</span>\n\n<span class=\"c1\">--10001th Prime</span>\n<span class=\"nf\">problem7</span> <span class=\"ow\">=</span> <span class=\"n\">primes</span><span class=\"o\">!!</span><span class=\"mi\">10000</span> <span class=\"c1\">-- index starts at 0</span>\n\n<span class=\"nf\">primes</span> <span class=\"ow\">=</span> <span class=\"mi\">2</span> <span class=\"kt\">:</span> <span class=\"n\">primes&#39;</span>\n    <span class=\"kr\">where</span> <span class=\"n\">isPrime</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"kt\">:</span><span class=\"n\">ps</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">rem</span><span class=\"p\">`</span> <span class=\"n\">p</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isPrime</span> <span class=\"n\">ps</span> <span class=\"n\">n</span>\n          <span class=\"n\">primes&#39;</span> <span class=\"ow\">=</span> <span class=\"mi\">3</span> <span class=\"kt\">:</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isPrime</span> <span class=\"n\">primes&#39;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"o\">..</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table></div></div><p><a href=\"https://projecteuler.net/problem=8\">Problem 8</a> from Project Euler is looking like a much more involved problem however, Iâm hopeful that I will be able to get it finished this week.</p></article>\n\n        <footer class=\"main\">\n            <ul>\n                <li><a href=\"mailto:brook057@cougars.csusm.edu\">brook057@cougars.csusm.edu</a></li>\n                <li>Source code on<a href=\"https://github.com/hebr3/hebr3.github.io\"> Github</a></li>\n            </ul>\n        </footer>\n    </body>\n</html>\n") (metas . #hasheq((here-path . "C:\\GitHub\\hebr3.github.io\\index.html.pp"))))